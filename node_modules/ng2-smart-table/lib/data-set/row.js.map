{"version":3,"file":"row.js","sourceRoot":"","sources":["../../../../src/ng2-smart-table/lib/data-set/row.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,IAAI,EAAE,MAAM,QAAQ,CAAC;AAI9B;IAOE,aAAmB,KAAa,EAAY,IAAS,EAAY,QAAiB;QAA/D,UAAK,GAAL,KAAK,CAAQ;QAAY,SAAI,GAAJ,IAAI,CAAK;QAAY,aAAQ,GAAR,QAAQ,CAAS;QALlF,eAAU,GAAY,KAAK,CAAC;QAC5B,gBAAW,GAAY,KAAK,CAAC;QAC7B,UAAK,GAAgB,EAAE,CAAC;QAItB,IAAI,CAAC,OAAO,EAAE,CAAC;IACjB,CAAC;IAED,qBAAO,GAAP,UAAQ,MAAc;QACpB,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,UAAA,EAAE,IAAI,OAAA,EAAE,CAAC,SAAS,EAAE,KAAK,MAAM,EAAzB,CAAyB,CAAC,CAAC;IAC1D,CAAC;IAED,sBAAQ,GAAR;QACE,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;IAED,qBAAO,GAAP;QACE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC;IACnB,CAAC;IAED,2BAAa,GAAb;QACE,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC;IACzB,CAAC;IAED,wBAAU,GAAV;QACE,IAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;QAC5C,IAAI,CAAC,QAAQ,EAAE,CAAC,OAAO,CAAC,UAAC,IAAI,IAAK,OAAA,MAAM,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,QAAQ,EAA3C,CAA2C,CAAC,CAAC;QAC/E,MAAM,CAAC,MAAM,CAAC;IAChB,CAAC;IAED,qBAAO,GAAP,UAAQ,IAAS;QACf,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,OAAO,EAAE,CAAC;IACjB,CAAC;IAED,qBAAO,GAAP;QAAA,iBAMC;QALC,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;QAChB,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,CAAC,OAAO,CAAC,UAAC,MAAc;YAChD,IAAM,IAAI,GAAG,KAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;YACrC,KAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACxB,CAAC,CAAC,CAAC;IACL,CAAC;IAED,wBAAU,GAAV,UAAW,MAAc;QACvB,IAAM,QAAQ,GAAI,MAAc,CAAC,QAAQ,CAAC,YAAY,GAAI,MAAc,CAAC,QAAQ,CAAC,YAAY,GAAG,EAAE,CAAC;QACpG,IAAM,KAAK,GAAG,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,KAAK,WAAW,GAAG,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;QAC5F,MAAM,CAAC,IAAI,IAAI,CAAC,KAAK,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;IACtD,CAAC;IACH,UAAC;AAAD,CAAC,AAnDD,IAmDC","sourcesContent":["import { Cell } from './cell';\nimport { Column } from './column';\nimport { DataSet } from './data-set';\n\nexport class Row {\n\n  isSelected: boolean = false;\n  isInEditing: boolean = false;\n  cells: Array<Cell> = [];\n\n\n  constructor(public index: number, protected data: any, protected _dataSet: DataSet) {\n    this.process();\n  }\n\n  getCell(column: Column): Cell {\n    return this.cells.find(el => el.getColumn() === column);\n  }\n\n  getCells() {\n    return this.cells;\n  }\n\n  getData(): any {\n    return this.data;\n  }\n\n  getIsSelected(): boolean {\n    return this.isSelected;\n  }\n\n  getNewData(): any {\n    const values = Object.assign({}, this.data);\n    this.getCells().forEach((cell) => values[cell.getColumn().id] = cell.newValue);\n    return values;\n  }\n\n  setData(data: any): any {\n    this.data = data;\n    this.process();\n  }\n\n  process() {\n    this.cells = [];\n    this._dataSet.getColumns().forEach((column: Column) => {\n      const cell = this.createCell(column);\n      this.cells.push(cell);\n    });\n  }\n\n  createCell(column: Column): Cell {\n    const defValue = (column as any).settings.defaultValue ? (column as any).settings.defaultValue : '';\n    const value = typeof this.data[column.id] === 'undefined' ? defValue : this.data[column.id];\n    return new Cell(value, this, column, this._dataSet);\n  }\n}\n"]}