{"version":3,"sources":["../../../src/resize-handle.directive.ts"],"names":[],"mappings":"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","file":"resize-handle.directive.js","sourceRoot":"","sourcesContent":["import {\n  Directive,\n  Input,\n  HostListener,\n  Renderer2,\n  ElementRef,\n  OnDestroy,\n  NgZone\n} from '@angular/core';\nimport { ResizableDirective } from './resizable.directive';\nimport { Edges } from './interfaces/edges.interface';\n\n/**\n * An element placed inside a `mwlResizable` directive to be used as a drag and resize handle\n *\n * For example\n *\n * ```html\n * <div mwlResizable>\n *   <div mwlResizeHandle [resizeEdges]=\"{bottom: true, right: true}\"></div>\n * </div>\n * ```\n */\n\nexport class ResizeHandleDirective implements OnDestroy {\n  /**\n   * The `Edges` object that contains the edges of the parent element that dragging the handle will trigger a resize on\n   */\n   resizeEdges: Edges = {};\n\n  private eventListeners: {\n    touchmove?: () => void;\n    mousemove?: () => void;\n  } = {};\n\n  constructor(\n    private renderer: Renderer2,\n    private element: ElementRef,\n    private zone: NgZone,\n    private resizable: ResizableDirective\n  ) {}\n\n  ngOnDestroy(): void {\n    this.unsubscribeEventListeners();\n  }\n\n  /**\n   * @private\n   */\n  \n  \n  onMousedown(\n    event: MouseEvent | TouchEvent,\n    clientX: number,\n    clientY: number\n  ): void {\n    event.preventDefault();\n    this.zone.runOutsideAngular(() => {\n      if (!this.eventListeners.touchmove) {\n        this.eventListeners.touchmove = this.renderer.listen(\n          this.element.nativeElement,\n          'touchmove',\n          (touchMoveEvent: TouchEvent) => {\n            this.onMousemove(\n              touchMoveEvent,\n              touchMoveEvent.targetTouches[0].clientX,\n              touchMoveEvent.targetTouches[0].clientY\n            );\n          }\n        );\n      }\n      if (!this.eventListeners.mousemove) {\n        this.eventListeners.mousemove = this.renderer.listen(\n          this.element.nativeElement,\n          'mousemove',\n          (mouseMoveEvent: MouseEvent) => {\n            this.onMousemove(\n              mouseMoveEvent,\n              mouseMoveEvent.clientX,\n              mouseMoveEvent.clientY\n            );\n          }\n        );\n      }\n      this.resizable.mousedown.next({\n        clientX,\n        clientY,\n        edges: this.resizeEdges\n      });\n    });\n  }\n\n  /**\n   * @private\n   */\n  \n  \n  \n  onMouseup(clientX: number, clientY: number): void {\n    this.zone.runOutsideAngular(() => {\n      this.unsubscribeEventListeners();\n      this.resizable.mouseup.next({\n        clientX,\n        clientY,\n        edges: this.resizeEdges\n      });\n    });\n  }\n\n  private onMousemove(\n    event: MouseEvent | TouchEvent,\n    clientX: number,\n    clientY: number\n  ): void {\n    this.resizable.mousemove.next({\n      clientX,\n      clientY,\n      edges: this.resizeEdges,\n      event\n    });\n  }\n\n  private unsubscribeEventListeners(): void {\n    Object.keys(this.eventListeners).forEach(\n      (type: 'touchmove' | 'mousemove') => {\n        (this as any).eventListeners[type]();\n        delete this.eventListeners[type];\n      }\n    );\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mwlResizeHandle]'\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Renderer2, },\n{type: ElementRef, },\n{type: NgZone, },\n{type: ResizableDirective, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'resizeEdges': [{ type: Input },],\n'onMousedown': [{ type: HostListener, args: ['touchstart', [\n    '$event',\n    '$event.touches[0].clientX',\n    '$event.touches[0].clientY'\n  ], ] },{ type: HostListener, args: ['mousedown', ['$event', '$event.clientX', '$event.clientY'], ] },],\n'onMouseup': [{ type: HostListener, args: ['touchend', [\n    '$event.changedTouches[0].clientX',\n    '$event.changedTouches[0].clientY'\n  ], ] },{ type: HostListener, args: ['touchcancel', [\n    '$event.changedTouches[0].clientX',\n    '$event.changedTouches[0].clientY'\n  ], ] },{ type: HostListener, args: ['mouseup', ['$event.clientX', '$event.clientY'], ] },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}