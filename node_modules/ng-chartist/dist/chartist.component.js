"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var Chartist = require("chartist");
var ChartistComponent = (function () {
    function ChartistComponent(element) {
        this.element = element.nativeElement;
    }
    ChartistComponent.prototype.ngOnInit = function () {
        var _this = this;
        if (!this.type || !this.data) {
            Promise.reject("Expected at least type and data.");
        }
        return this.renderChart().then(function (chart) {
            if (_this.events !== undefined) {
                _this.bindEvents(chart);
            }
            return chart;
        });
    };
    ChartistComponent.prototype.ngOnChanges = function (changes) {
        this.update(changes);
    };
    ChartistComponent.prototype.ngOnDestroy = function () {
        if (this.chart) {
            this.chart.detach();
        }
    };
    ChartistComponent.prototype.renderChart = function () {
        var _this = this;
        var promises = [
            this.type,
            this.element,
            this.data,
            this.options,
            this.responsiveOptions
        ];
        return Promise.all(promises).then(function (values) {
            var type = values[0], args = values.slice(1);
            if (!(type in Chartist)) {
                throw new Error(type + " is not a valid chart type");
            }
            _this.chart = (_a = Chartist)[type].apply(_a, args);
            return _this.chart;
            var _a;
        });
    };
    ChartistComponent.prototype.update = function (changes) {
        if (!this.chart || 'type' in changes) {
            this.renderChart();
        }
        else {
            if (changes['data']) {
                this.data = changes['data'].currentValue;
            }
            if (changes['options']) {
                this.options = changes['options'].currentValue;
            }
            this.chart.update(this.data, this.options);
        }
    };
    ChartistComponent.prototype.bindEvents = function (chart) {
        for (var _i = 0, _a = Object.keys(this.events); _i < _a.length; _i++) {
            var event_1 = _a[_i];
            chart.on(event_1, this.events[event_1]);
        }
    };
    return ChartistComponent;
}());
ChartistComponent.decorators = [
    { type: core_1.Component, args: [{
                selector: 'x-chartist',
                template: '<ng-content></ng-content>'
            },] },
];
/** @nocollapse */
ChartistComponent.ctorParameters = function () { return [
    { type: core_1.ElementRef, },
]; };
ChartistComponent.propDecorators = {
    'data': [{ type: core_1.Input },],
    'type': [{ type: core_1.Input },],
    'options': [{ type: core_1.Input },],
    'responsiveOptions': [{ type: core_1.Input },],
    'events': [{ type: core_1.Input },],
};
exports.ChartistComponent = ChartistComponent;
var ChartistModule = (function () {
    function ChartistModule() {
    }
    return ChartistModule;
}());
ChartistModule.decorators = [
    { type: core_1.NgModule, args: [{
                declarations: [
                    ChartistComponent
                ],
                exports: [
                    ChartistComponent
                ]
            },] },
];
/** @nocollapse */
ChartistModule.ctorParameters = function () { return []; };
exports.ChartistModule = ChartistModule;
// for angular-cli
exports.default = {
    directives: [ChartistComponent]
};
