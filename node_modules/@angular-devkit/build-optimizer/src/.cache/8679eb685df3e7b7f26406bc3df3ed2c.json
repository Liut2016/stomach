{"remainingRequest":"/home/liutao/Project/0/oncology/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/home/liutao/Project/0/oncology/node_modules/@swimlane/ngx-datatable/release/components/body/selection.component.js","dependencies":[{"path":"/home/liutao/Project/0/oncology/node_modules/@swimlane/ngx-datatable/release/components/body/selection.component.js","mtime":1511963642000},{"path":"/home/liutao/Project/0/oncology/node_modules/cache-loader/dist/cjs.js","mtime":1539266424898},{"path":"/home/liutao/Project/0/oncology/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1526531406000}],"contextDependencies":[],"result":["\"use strict\";\nvar __decorate = /*@__PURE__*/ require(\"tslib\").__decorate;\nvar __metadata = /*@__PURE__*/ require(\"tslib\").__metadata;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = require(\"@angular/core\");\nvar utils_1 = require(\"../../utils\");\nvar types_1 = require(\"../../types\");\nvar DataTableSelectionComponent = /*@__PURE__*/ (function () {\n    function DataTableSelectionComponent() {\n        this.activate = new core_1.EventEmitter();\n        this.select = new core_1.EventEmitter();\n    }\n    DataTableSelectionComponent.prototype.selectRow = function (event, index, row) {\n        if (!this.selectEnabled)\n            return;\n        var chkbox = this.selectionType === types_1.SelectionType.checkbox;\n        var multi = this.selectionType === types_1.SelectionType.multi;\n        var multiClick = this.selectionType === types_1.SelectionType.multiClick;\n        var selected = [];\n        if (multi || chkbox || multiClick) {\n            if (event.shiftKey) {\n                selected = utils_1.selectRowsBetween([], this.rows, index, this.prevIndex, this.getRowSelectedIdx.bind(this));\n            }\n            else if (event.ctrlKey || event.metaKey || multiClick || chkbox) {\n                selected = utils_1.selectRows(this.selected.slice(), row, this.getRowSelectedIdx.bind(this));\n            }\n            else {\n                selected = utils_1.selectRows([], row, this.getRowSelectedIdx.bind(this));\n            }\n        }\n        else {\n            selected = utils_1.selectRows([], row, this.getRowSelectedIdx.bind(this));\n        }\n        if (typeof this.selectCheck === 'function') {\n            selected = selected.filter(this.selectCheck.bind(this));\n        }\n        this.selected.splice(0, this.selected.length);\n        (_a = this.selected).push.apply(_a, selected);\n        this.prevIndex = index;\n        this.select.emit({\n            selected: selected\n        });\n        var _a;\n    };\n    DataTableSelectionComponent.prototype.onActivate = function (model, index) {\n        var type = model.type, event = model.event, row = model.row;\n        var chkbox = this.selectionType === types_1.SelectionType.checkbox;\n        var select = (!chkbox && (type === 'click' || type === 'dblclick')) ||\n            (chkbox && type === 'checkbox');\n        if (select) {\n            this.selectRow(event, index, row);\n        }\n        else if (type === 'keydown') {\n            if (event.keyCode === utils_1.Keys.return) {\n                this.selectRow(event, index, row);\n            }\n            else {\n                this.onKeyboardFocus(model);\n            }\n        }\n        this.activate.emit(model);\n    };\n    DataTableSelectionComponent.prototype.onKeyboardFocus = function (model) {\n        var keyCode = model.event.keyCode;\n        var shouldFocus = keyCode === utils_1.Keys.up ||\n            keyCode === utils_1.Keys.down ||\n            keyCode === utils_1.Keys.right ||\n            keyCode === utils_1.Keys.left;\n        if (shouldFocus) {\n            var isCellSelection = this.selectionType === types_1.SelectionType.cell;\n            if (!model.cellElement || !isCellSelection) {\n                this.focusRow(model.rowElement, keyCode);\n            }\n            else if (isCellSelection) {\n                this.focusCell(model.cellElement, model.rowElement, keyCode, model.cellIndex);\n            }\n        }\n    };\n    DataTableSelectionComponent.prototype.focusRow = function (rowElement, keyCode) {\n        var nextRowElement = this.getPrevNextRow(rowElement, keyCode);\n        if (nextRowElement)\n            nextRowElement.focus();\n    };\n    DataTableSelectionComponent.prototype.getPrevNextRow = function (rowElement, keyCode) {\n        var parentElement = rowElement.parentElement;\n        if (parentElement) {\n            var focusElement = void 0;\n            if (keyCode === utils_1.Keys.up) {\n                focusElement = parentElement.previousElementSibling;\n            }\n            else if (keyCode === utils_1.Keys.down) {\n                focusElement = parentElement.nextElementSibling;\n            }\n            if (focusElement && focusElement.children.length) {\n                return focusElement.children[0];\n            }\n        }\n    };\n    DataTableSelectionComponent.prototype.focusCell = function (cellElement, rowElement, keyCode, cellIndex) {\n        var nextCellElement;\n        if (keyCode === utils_1.Keys.left) {\n            nextCellElement = cellElement.previousElementSibling;\n        }\n        else if (keyCode === utils_1.Keys.right) {\n            nextCellElement = cellElement.nextElementSibling;\n        }\n        else if (keyCode === utils_1.Keys.up || keyCode === utils_1.Keys.down) {\n            var nextRowElement = this.getPrevNextRow(rowElement, keyCode);\n            if (nextRowElement) {\n                var children = nextRowElement.getElementsByClassName('datatable-body-cell');\n                if (children.length)\n                    nextCellElement = children[cellIndex];\n            }\n        }\n        if (nextCellElement)\n            nextCellElement.focus();\n    };\n    DataTableSelectionComponent.prototype.getRowSelected = function (row) {\n        return this.getRowSelectedIdx(row, this.selected) > -1;\n    };\n    DataTableSelectionComponent.prototype.getRowSelectedIdx = function (row, selected) {\n        var _this = this;\n        if (!selected || !selected.length)\n            return -1;\n        var rowId = this.rowIdentity(row);\n        return selected.findIndex(function (r) {\n            var id = _this.rowIdentity(r);\n            return id === rowId;\n        });\n    };\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Array)\n    ], DataTableSelectionComponent.prototype, \"rows\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Array)\n    ], DataTableSelectionComponent.prototype, \"selected\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], DataTableSelectionComponent.prototype, \"selectEnabled\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String)\n    ], DataTableSelectionComponent.prototype, \"selectionType\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Object)\n    ], DataTableSelectionComponent.prototype, \"rowIdentity\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Object)\n    ], DataTableSelectionComponent.prototype, \"selectCheck\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], DataTableSelectionComponent.prototype, \"activate\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], DataTableSelectionComponent.prototype, \"select\", void 0);\n    DataTableSelectionComponent = __decorate([\n        core_1.Component({\n            selector: 'datatable-selection',\n            template: \"\\n    <ng-content></ng-content>\\n  \",\n            changeDetection: core_1.ChangeDetectionStrategy.OnPush\n        })\n    ], DataTableSelectionComponent);\n    return DataTableSelectionComponent;\n}());\nexports.DataTableSelectionComponent = DataTableSelectionComponent;\n",null]}