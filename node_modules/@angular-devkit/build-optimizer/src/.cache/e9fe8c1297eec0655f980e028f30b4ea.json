{"remainingRequest":"/home/liutao/Project/0/oncology/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/home/liutao/Project/0/oncology/node_modules/ngx-perfect-scrollbar/dist/ngx-perfect-scrollbar.es5.js","dependencies":[{"path":"/home/liutao/Project/0/oncology/node_modules/ngx-perfect-scrollbar/dist/ngx-perfect-scrollbar.es5.js","mtime":1510245674000},{"path":"/home/liutao/Project/0/oncology/node_modules/cache-loader/dist/cjs.js","mtime":1539266424898},{"path":"/home/liutao/Project/0/oncology/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1526531406000}],"contextDependencies":[],"result":["import 'rxjs/add/operator/throttleTime';\nimport 'rxjs/add/operator/distinctUntilChanged';\nimport { Subject as Subject$1 } from 'rxjs/Subject';\nimport { ChangeDetectorRef, Component, Directive, ElementRef, EventEmitter, HostBinding, HostListener, Inject, InjectionToken, Input, KeyValueDiffers, NgModule, NgZone, Optional, Output, ViewChild, ViewEncapsulation } from '@angular/core';\nimport PerfectScrollbar from 'perfect-scrollbar';\nimport ResizeObserver from 'resize-observer-polyfill';\nimport { CommonModule } from '@angular/common';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar PERFECT_SCROLLBAR_CONFIG = new InjectionToken('PERFECT_SCROLLBAR_CONFIG');\nvar Geometry = /*@__PURE__*/ (function () {\n    function Geometry(x, y, w, h) {\n        this.x = x;\n        this.y = y;\n        this.w = w;\n        this.h = h;\n    }\n    return Geometry;\n}());\nvar Position = /*@__PURE__*/ (function () {\n    function Position(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    return Position;\n}());\n/**\n * @record\n */\nvar PerfectScrollbarConfig = /*@__PURE__*/ (function () {\n    function PerfectScrollbarConfig(config) {\n        if (config === void 0) {\n            config = {};\n        }\n        this.assign(config);\n    }\n    /**\n     * @param {?=} config\n     * @return {?}\n     */\n    PerfectScrollbarConfig.prototype.assign = /**\n     * @param {?=} config\n     * @return {?}\n     */\n        function (config) {\n            if (config === void 0) {\n                config = {};\n            }\n            for (var /** @type {?} */ key in config) {\n                this[key] = config[key];\n            }\n        };\n    return PerfectScrollbarConfig;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar PerfectScrollbarDirective = /*@__PURE__*/ (function () {\n    function PerfectScrollbarDirective(zone, elementRef, differs, defaults) {\n        this.zone = zone;\n        this.elementRef = elementRef;\n        this.differs = differs;\n        this.defaults = defaults;\n        this.disabled = false;\n        this.PS_SCROLL_Y = new EventEmitter();\n        this.PS_SCROLL_X = new EventEmitter();\n        this.PS_SCROLL_UP = new EventEmitter();\n        this.PS_SCROLL_DOWN = new EventEmitter();\n        this.PS_SCROLL_LEFT = new EventEmitter();\n        this.PS_SCROLL_RIGHT = new EventEmitter();\n        this.PS_Y_REACH_END = new EventEmitter();\n        this.PS_Y_REACH_START = new EventEmitter();\n        this.PS_X_REACH_END = new EventEmitter();\n        this.PS_X_REACH_START = new EventEmitter();\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    PerfectScrollbarDirective.prototype.emit = /**\n     * @param {?} event\n     * @return {?}\n     */\n        function (event) { this[event.type.replace(/-/g, '_').toUpperCase()].emit(event); };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    PerfectScrollbarDirective.prototype.psScrollY = /**\n     * @param {?} event\n     * @return {?}\n     */\n        function (event) { this.emit(event); };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    PerfectScrollbarDirective.prototype.psScrollX = /**\n     * @param {?} event\n     * @return {?}\n     */\n        function (event) { this.emit(event); };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    PerfectScrollbarDirective.prototype.psScrollUp = /**\n     * @param {?} event\n     * @return {?}\n     */\n        function (event) { this.emit(event); };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    PerfectScrollbarDirective.prototype.pscrollDown = /**\n     * @param {?} event\n     * @return {?}\n     */\n        function (event) { this.emit(event); };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    PerfectScrollbarDirective.prototype.psScrollLeft = /**\n     * @param {?} event\n     * @return {?}\n     */\n        function (event) { this.emit(event); };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    PerfectScrollbarDirective.prototype.psScrollRight = /**\n     * @param {?} event\n     * @return {?}\n     */\n        function (event) { this.emit(event); };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    PerfectScrollbarDirective.prototype.psReachEndY = /**\n     * @param {?} event\n     * @return {?}\n     */\n        function (event) { this.emit(event); };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    PerfectScrollbarDirective.prototype.psReachStartY = /**\n     * @param {?} event\n     * @return {?}\n     */\n        function (event) { this.emit(event); };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    PerfectScrollbarDirective.prototype.psReachEndX = /**\n     * @param {?} event\n     * @return {?}\n     */\n        function (event) { this.emit(event); };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    PerfectScrollbarDirective.prototype.psReachStartX = /**\n     * @param {?} event\n     * @return {?}\n     */\n        function (event) { this.emit(event); };\n    /**\n     * @return {?}\n     */\n    PerfectScrollbarDirective.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            if (!this.disabled) {\n                var /** @type {?} */ config_1 = new PerfectScrollbarConfig(this.defaults);\n                config_1.assign(this.config); // Custom configuration\n                this.zone.runOutsideAngular(function () {\n                    _this.instance = new PerfectScrollbar(_this.elementRef.nativeElement, config_1);\n                });\n                if (!this.configDiff) {\n                    this.configDiff = this.differs.find(this.config || {}).create();\n                    this.configDiff.diff(this.config || {});\n                }\n                this.zone.runOutsideAngular(function () {\n                    _this.ro = new ResizeObserver(function (entries, observer) {\n                        _this.update();\n                    });\n                    _this.ro.observe(_this.elementRef.nativeElement);\n                });\n            }\n        };\n    /**\n     * @return {?}\n     */\n    PerfectScrollbarDirective.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            if (this.ro) {\n                this.ro.disconnect();\n            }\n            if (this.timeout) {\n                window.clearTimeout(this.timeout);\n            }\n            if (this.instance) {\n                this.zone.runOutsideAngular(function () {\n                    _this.instance.destroy();\n                });\n                this.instance = null;\n            }\n        };\n    /**\n     * @return {?}\n     */\n    PerfectScrollbarDirective.prototype.ngDoCheck = /**\n     * @return {?}\n     */\n        function () {\n            if (!this.disabled && this.configDiff) {\n                var /** @type {?} */ changes = this.configDiff.diff(this.config || {});\n                if (changes) {\n                    this.ngOnDestroy();\n                    this.ngOnInit();\n                }\n            }\n        };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    PerfectScrollbarDirective.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n        function (changes) {\n            if (changes['disabled'] && !changes['disabled'].isFirstChange()) {\n                if (changes['disabled'].currentValue !== changes['disabled'].previousValue) {\n                    if (changes['disabled'].currentValue === true) {\n                        this.ngOnDestroy();\n                    }\n                    else if (changes['disabled'].currentValue === false) {\n                        this.ngOnInit();\n                    }\n                }\n            }\n        };\n    /**\n     * @return {?}\n     */\n    PerfectScrollbarDirective.prototype.ps = /**\n     * @return {?}\n     */\n        function () {\n            return this.instance;\n        };\n    /**\n     * @return {?}\n     */\n    PerfectScrollbarDirective.prototype.update = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            if (this.timeout) {\n                window.clearTimeout(this.timeout);\n            }\n            this.timeout = window.setTimeout(function () {\n                if (!_this.disabled && _this.configDiff) {\n                    try {\n                        _this.zone.runOutsideAngular(function () {\n                            _this.instance.update();\n                        });\n                    }\n                    catch (error) {\n                        // Update can be finished after destroy so catch errors\n                    }\n                }\n            }, 0);\n        };\n    /**\n     * @param {?=} prefix\n     * @return {?}\n     */\n    PerfectScrollbarDirective.prototype.geometry = /**\n     * @param {?=} prefix\n     * @return {?}\n     */\n        function (prefix) {\n            if (prefix === void 0) {\n                prefix = 'scroll';\n            }\n            return new Geometry(this.elementRef.nativeElement[prefix + 'Left'], this.elementRef.nativeElement[prefix + 'Top'], this.elementRef.nativeElement[prefix + 'Width'], this.elementRef.nativeElement[prefix + 'Height']);\n        };\n    /**\n     * @param {?=} absolute\n     * @return {?}\n     */\n    PerfectScrollbarDirective.prototype.position = /**\n     * @param {?=} absolute\n     * @return {?}\n     */\n        function (absolute) {\n            if (absolute === void 0) {\n                absolute = false;\n            }\n            if (!absolute) {\n                return new Position(this.instance.reach.x, this.instance.reach.y);\n            }\n            else {\n                return new Position(this.elementRef.nativeElement.scrollLeft, this.elementRef.nativeElement.scrollTop);\n            }\n        };\n    /**\n     * @param {?=} direction\n     * @return {?}\n     */\n    PerfectScrollbarDirective.prototype.scrollable = /**\n     * @param {?=} direction\n     * @return {?}\n     */\n        function (direction) {\n            if (direction === void 0) {\n                direction = 'any';\n            }\n            var /** @type {?} */ element = this.elementRef.nativeElement;\n            if (direction === 'any') {\n                return element.classList.contains('ps--active-x') ||\n                    element.classList.contains('ps--active-y');\n            }\n            else if (direction === 'both') {\n                return element.classList.contains('ps--active-x') &&\n                    element.classList.contains('ps--active-y');\n            }\n            else {\n                return element.classList.contains('ps--active-' + direction);\n            }\n        };\n    /**\n     * @param {?} x\n     * @param {?=} y\n     * @param {?=} speed\n     * @return {?}\n     */\n    PerfectScrollbarDirective.prototype.scrollTo = /**\n     * @param {?} x\n     * @param {?=} y\n     * @param {?=} speed\n     * @return {?}\n     */\n        function (x, y, speed) {\n            if (!this.disabled) {\n                if (y == null && speed == null) {\n                    this.animateScrolling('scrollTop', x, speed);\n                }\n                else {\n                    if (x != null) {\n                        this.animateScrolling('scrollLeft', x, speed);\n                    }\n                    if (y != null) {\n                        this.animateScrolling('scrollTop', y, speed);\n                    }\n                }\n            }\n        };\n    /**\n     * @param {?} x\n     * @param {?=} speed\n     * @return {?}\n     */\n    PerfectScrollbarDirective.prototype.scrollToX = /**\n     * @param {?} x\n     * @param {?=} speed\n     * @return {?}\n     */\n        function (x, speed) {\n            this.animateScrolling('scrollLeft', x, speed);\n        };\n    /**\n     * @param {?} y\n     * @param {?=} speed\n     * @return {?}\n     */\n    PerfectScrollbarDirective.prototype.scrollToY = /**\n     * @param {?} y\n     * @param {?=} speed\n     * @return {?}\n     */\n        function (y, speed) {\n            this.animateScrolling('scrollTop', y, speed);\n        };\n    /**\n     * @param {?=} offset\n     * @param {?=} speed\n     * @return {?}\n     */\n    PerfectScrollbarDirective.prototype.scrollToTop = /**\n     * @param {?=} offset\n     * @param {?=} speed\n     * @return {?}\n     */\n        function (offset, speed) {\n            this.animateScrolling('scrollTop', (offset || 0), speed);\n        };\n    /**\n     * @param {?=} offset\n     * @param {?=} speed\n     * @return {?}\n     */\n    PerfectScrollbarDirective.prototype.scrollToLeft = /**\n     * @param {?=} offset\n     * @param {?=} speed\n     * @return {?}\n     */\n        function (offset, speed) {\n            this.animateScrolling('scrollLeft', (offset || 0), speed);\n        };\n    /**\n     * @param {?=} offset\n     * @param {?=} speed\n     * @return {?}\n     */\n    PerfectScrollbarDirective.prototype.scrollToRight = /**\n     * @param {?=} offset\n     * @param {?=} speed\n     * @return {?}\n     */\n        function (offset, speed) {\n            var /** @type {?} */ left = this.elementRef.nativeElement.scrollWidth -\n                this.elementRef.nativeElement.clientWidth;\n            this.animateScrolling('scrollLeft', left - (offset || 0), speed);\n        };\n    /**\n     * @param {?=} offset\n     * @param {?=} speed\n     * @return {?}\n     */\n    PerfectScrollbarDirective.prototype.scrollToBottom = /**\n     * @param {?=} offset\n     * @param {?=} speed\n     * @return {?}\n     */\n        function (offset, speed) {\n            var /** @type {?} */ top = this.elementRef.nativeElement.scrollHeight -\n                this.elementRef.nativeElement.clientHeight;\n            this.animateScrolling('scrollTop', top - (offset || 0), speed);\n        };\n    /**\n     * @param {?} target\n     * @param {?} value\n     * @param {?=} speed\n     * @return {?}\n     */\n    PerfectScrollbarDirective.prototype.animateScrolling = /**\n     * @param {?} target\n     * @param {?} value\n     * @param {?=} speed\n     * @return {?}\n     */\n        function (target, value, speed) {\n            var _this = this;\n            if (!speed) {\n                var /** @type {?} */ oldValue = this.elementRef.nativeElement[target];\n                this.elementRef.nativeElement[target] = value;\n                if (value !== oldValue) {\n                    this.instance.update();\n                }\n            }\n            else if (value !== this.elementRef.nativeElement[target]) {\n                var /** @type {?} */ newValue_1 = 0;\n                var /** @type {?} */ scrollCount_1 = 0;\n                var /** @type {?} */ oldTimestamp_1 = performance.now();\n                var /** @type {?} */ oldValue_1 = this.elementRef.nativeElement[target];\n                var /** @type {?} */ cosParameter_1 = (oldValue_1 - value) / 2;\n                var /** @type {?} */ step_1 = function (newTimestamp) {\n                    scrollCount_1 += Math.PI / (speed / (newTimestamp - oldTimestamp_1));\n                    newValue_1 = Math.round(value + cosParameter_1 + cosParameter_1 * Math.cos(scrollCount_1));\n                    // Only continue animation if scroll position has not changed\n                    if (_this.elementRef.nativeElement[target] === oldValue_1) {\n                        if (scrollCount_1 >= Math.PI) {\n                            _this.animateScrolling(target, value, 0);\n                        }\n                        else {\n                            _this.elementRef.nativeElement[target] = oldValue_1 = newValue_1;\n                            _this.instance.update();\n                            oldTimestamp_1 = newTimestamp;\n                            window.requestAnimationFrame(step_1);\n                        }\n                    }\n                };\n                window.requestAnimationFrame(step_1);\n            }\n        };\n    return PerfectScrollbarDirective;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar PerfectScrollbarComponent = /*@__PURE__*/ (function () {\n    function PerfectScrollbarComponent(cdRef, elementRef) {\n        this.cdRef = cdRef;\n        this.elementRef = elementRef;\n        this.states = {};\n        this.notify = null;\n        this.userInteraction = false;\n        this.allowPropagation = false;\n        this.cancelEvent = null;\n        this.timeoutState = null;\n        this.timeoutScroll = null;\n        this.usePropagationX = false;\n        this.usePropagationY = false;\n        this.statesSub = null;\n        this.statesUpdate = new Subject$1();\n        this.activeSub = null;\n        this.activeUpdate = new Subject$1();\n        this.disabled = false;\n        this.usePSClass = true;\n        this.autoPropagation = false;\n        this.scrollIndicators = false;\n        this.PS_SCROLL_Y = new EventEmitter();\n        this.PS_SCROLL_X = new EventEmitter();\n        this.PS_SCROLL_UP = new EventEmitter();\n        this.PS_SCROLL_DOWN = new EventEmitter();\n        this.PS_SCROLL_LEFT = new EventEmitter();\n        this.PS_SCROLL_RIGHT = new EventEmitter();\n        this.PS_Y_REACH_END = new EventEmitter();\n        this.PS_Y_REACH_START = new EventEmitter();\n        this.PS_X_REACH_END = new EventEmitter();\n        this.PS_X_REACH_START = new EventEmitter();\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    PerfectScrollbarComponent.prototype.onGeneratedEvent = /**\n     * @param {?} event\n     * @return {?}\n     */\n        function (event) {\n            // Stop the generated event from reaching window for PS to work correctly\n            if (event['psGenerated']) {\n                event.stopPropagation();\n            }\n        };\n    /**\n     * @return {?}\n     */\n    PerfectScrollbarComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this.activeSub = this.activeUpdate\n                .distinctUntilChanged()\n                .subscribe(function (active) {\n                _this.allowPropagation = active;\n            });\n            this.statesSub = this.statesUpdate\n                .distinctUntilChanged()\n                .subscribe(function (state) {\n                window.clearTimeout(_this.timeoutState);\n                if (state !== 'x' && state !== 'y') {\n                    _this.notify = true;\n                    _this.states[state] = true;\n                    if (state === 'top') {\n                        _this.states.bottom = false;\n                    }\n                    else if (state === 'bottom') {\n                        _this.states.top = false;\n                    }\n                    else if (state === 'left') {\n                        _this.states.rights = false;\n                    }\n                    else if (state === 'rights') {\n                        _this.states.left = false;\n                    }\n                    _this.timeoutState = window.setTimeout(function () {\n                        _this.notify = false;\n                        if (_this.autoPropagation && _this.userInteraction &&\n                            ((!_this.usePropagationX && (_this.states.left || _this.states.right)) ||\n                                (!_this.usePropagationY && (_this.states.top || _this.states.bottom)))) {\n                            _this.allowPropagation = true;\n                        }\n                        _this.cdRef.markForCheck();\n                    }, 300);\n                }\n                else {\n                    _this.notify = false;\n                    if (state === 'x') {\n                        _this.states.left = false;\n                        _this.states.right = false;\n                    }\n                    else if (state === 'y') {\n                        _this.states.top = false;\n                        _this.states.bottom = false;\n                    }\n                    _this.userInteraction = true;\n                    if (_this.autoPropagation &&\n                        (!_this.usePropagationX || !_this.usePropagationY)) {\n                        _this.allowPropagation = false;\n                        if (_this.cancelEvent) {\n                            _this.elementRef.nativeElement.dispatchEvent(_this.cancelEvent);\n                            _this.cancelEvent = null;\n                        }\n                    }\n                    else if (_this.scrollIndicators) {\n                        _this.notify = true;\n                        _this.timeoutState = window.setTimeout(function () {\n                            _this.notify = false;\n                            _this.cdRef.markForCheck();\n                        }, 300);\n                    }\n                }\n                _this.cdRef.markForCheck();\n                _this.cdRef.detectChanges();\n            });\n        };\n    /**\n     * @return {?}\n     */\n    PerfectScrollbarComponent.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            if (this.activeSub) {\n                this.activeSub.unsubscribe();\n            }\n            if (this.statesSub) {\n                this.statesSub.unsubscribe();\n            }\n            if (this.timeoutState) {\n                window.clearTimeout(this.timeoutState);\n            }\n            if (this.timeoutScroll) {\n                window.clearTimeout(this.timeoutScroll);\n            }\n        };\n    /**\n     * @return {?}\n     */\n    PerfectScrollbarComponent.prototype.ngDoCheck = /**\n     * @return {?}\n     */\n        function () {\n            if (!this.disabled && this.autoPropagation && this.directiveRef) {\n                var /** @type {?} */ element = this.directiveRef.elementRef.nativeElement;\n                this.usePropagationX = !element.classList.contains('ps--active-x');\n                this.usePropagationY = !element.classList.contains('ps--active-y');\n                this.activeUpdate.next(this.usePropagationX && this.usePropagationY);\n            }\n        };\n    /**\n     * @return {?}\n     */\n    PerfectScrollbarComponent.prototype.getConfig = /**\n     * @return {?}\n     */\n        function () {\n            var /** @type {?} */ config = this.config || {};\n            if (this.autoPropagation) {\n                config.swipePropagation = true;\n                config.wheelPropagation = true;\n            }\n            return config;\n        };\n    /**\n     * @param {?=} event\n     * @return {?}\n     */\n    PerfectScrollbarComponent.prototype.onTouchEnd = /**\n     * @param {?=} event\n     * @return {?}\n     */\n        function (event) {\n            if (event === void 0) {\n                event = null;\n            }\n            if (!this.disabled && this.autoPropagation &&\n                (!this.usePropagationX || !this.usePropagationY)) {\n                this.cancelEvent = null;\n                this.allowPropagation = false;\n            }\n        };\n    /**\n     * @param {?=} event\n     * @return {?}\n     */\n    PerfectScrollbarComponent.prototype.onTouchMove = /**\n     * @param {?=} event\n     * @return {?}\n     */\n        function (event) {\n            if (event === void 0) {\n                event = null;\n            }\n            if (!this.disabled && this.autoPropagation && !this.allowPropagation) {\n                event.preventDefault();\n                event.stopPropagation();\n            }\n        };\n    /**\n     * @param {?=} event\n     * @return {?}\n     */\n    PerfectScrollbarComponent.prototype.onTouchStart = /**\n     * @param {?=} event\n     * @return {?}\n     */\n        function (event) {\n            if (event === void 0) {\n                event = null;\n            }\n            if (!this.disabled && this.autoPropagation) {\n                this.userInteraction = true;\n                if (this.allowPropagation) {\n                    // PS stops the touchmove event so lets re-emit it here\n                    if (this.elementRef.nativeElement) {\n                        var /** @type {?} */ newEvent = new MouseEvent('touchstart', event);\n                        this.cancelEvent = new MouseEvent('touchmove', event);\n                        newEvent['psGenerated'] = this.cancelEvent['psGenerated'] = true;\n                        newEvent['touches'] = this.cancelEvent['touches'] = event['touches'];\n                        newEvent['targetTouches'] = this.cancelEvent['targetTouches'] = event['targetTouches'];\n                        this.elementRef.nativeElement.dispatchEvent(newEvent);\n                    }\n                }\n                this.cdRef.detectChanges();\n            }\n        };\n    /**\n     * @param {?=} event\n     * @return {?}\n     */\n    PerfectScrollbarComponent.prototype.onWheelEvent = /**\n     * @param {?=} event\n     * @return {?}\n     */\n        function (event) {\n            if (event === void 0) {\n                event = null;\n            }\n            if (!this.disabled && this.autoPropagation) {\n                this.userInteraction = true;\n                if (!this.allowPropagation) {\n                    event.preventDefault();\n                    event.stopPropagation();\n                }\n                else if (!this.usePropagationX || !this.usePropagationY) {\n                    this.allowPropagation = false;\n                }\n                this.cdRef.detectChanges();\n            }\n        };\n    /**\n     * @param {?=} event\n     * @param {?=} state\n     * @return {?}\n     */\n    PerfectScrollbarComponent.prototype.onScrollEvent = /**\n     * @param {?=} event\n     * @param {?=} state\n     * @return {?}\n     */\n        function (event, state) {\n            if (event === void 0) {\n                event = null;\n            }\n            if (!this.disabled && (this.autoPropagation || this.scrollIndicators)) {\n                this.statesUpdate.next(state);\n            }\n        };\n    return PerfectScrollbarComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar PerfectScrollbarModule = /*@__PURE__*/ (function () {\n    function PerfectScrollbarModule() {\n    }\n    return PerfectScrollbarModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Generated bundle index. Do not edit.\n */\nexport { PerfectScrollbarComponent, PerfectScrollbarDirective, Geometry, Position, PERFECT_SCROLLBAR_CONFIG, PerfectScrollbarConfig, PerfectScrollbarModule };\n//# sourceMappingURL=ngx-perfect-scrollbar.es5.js.map\n",null]}