{"remainingRequest":"/home/liutao/Project/0/oncology/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/home/liutao/Project/0/oncology/node_modules/@swimlane/ngx-datatable/release/directives/draggable.directive.js","dependencies":[{"path":"/home/liutao/Project/0/oncology/node_modules/@swimlane/ngx-datatable/release/directives/draggable.directive.js","mtime":1511963642000},{"path":"/home/liutao/Project/0/oncology/node_modules/cache-loader/dist/cjs.js","mtime":1539266424898},{"path":"/home/liutao/Project/0/oncology/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1526531406000}],"contextDependencies":[],"result":["\"use strict\";\nvar __decorate = /*@__PURE__*/ require(\"tslib\").__decorate;\nvar __metadata = /*@__PURE__*/ require(\"tslib\").__metadata;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = require(\"@angular/core\");\nvar Observable_1 = require(\"rxjs/Observable\");\nvar operators_1 = require(\"rxjs/operators\");\n/**\n * Draggable Directive for Angular2\n *\n * Inspiration:\n *   https://github.com/AngularClass/angular2-examples/blob/master/rx-draggable/directives/draggable.ts\n *   http://stackoverflow.com/questions/35662530/how-to-implement-drag-and-drop-in-angular2\n *\n */\nvar DraggableDirective = /*@__PURE__*/ (function () {\n    function DraggableDirective(element) {\n        this.dragX = true;\n        this.dragY = true;\n        this.dragStart = new core_1.EventEmitter();\n        this.dragging = new core_1.EventEmitter();\n        this.dragEnd = new core_1.EventEmitter();\n        this.isDragging = false;\n        this.element = element.nativeElement;\n    }\n    DraggableDirective.prototype.ngOnChanges = function (changes) {\n        if (changes['dragEventTarget'] && changes['dragEventTarget'].currentValue && this.dragModel.dragging) {\n            this.onMousedown(changes['dragEventTarget'].currentValue);\n        }\n    };\n    DraggableDirective.prototype.ngOnDestroy = function () {\n        this._destroySubscription();\n    };\n    DraggableDirective.prototype.onMouseup = function (event) {\n        if (!this.isDragging)\n            return;\n        this.isDragging = false;\n        this.element.classList.remove('dragging');\n        if (this.subscription) {\n            this._destroySubscription();\n            this.dragEnd.emit({\n                event: event,\n                element: this.element,\n                model: this.dragModel\n            });\n        }\n    };\n    DraggableDirective.prototype.onMousedown = function (event) {\n        var _this = this;\n        // we only want to drag the inner header text\n        var isDragElm = event.target.classList.contains('draggable');\n        if (isDragElm && (this.dragX || this.dragY)) {\n            event.preventDefault();\n            this.isDragging = true;\n            var mouseDownPos_1 = { x: event.clientX, y: event.clientY };\n            var mouseup = Observable_1.Observable.fromEvent(document, 'mouseup');\n            this.subscription = mouseup\n                .subscribe(function (ev) { return _this.onMouseup(ev); });\n            var mouseMoveSub = Observable_1.Observable.fromEvent(document, 'mousemove')\n                .pipe(operators_1.takeUntil(mouseup))\n                .subscribe(function (ev) { return _this.move(ev, mouseDownPos_1); });\n            this.subscription.add(mouseMoveSub);\n            this.dragStart.emit({\n                event: event,\n                element: this.element,\n                model: this.dragModel\n            });\n        }\n    };\n    DraggableDirective.prototype.move = function (event, mouseDownPos) {\n        if (!this.isDragging)\n            return;\n        var x = event.clientX - mouseDownPos.x;\n        var y = event.clientY - mouseDownPos.y;\n        if (this.dragX)\n            this.element.style.left = x + \"px\";\n        if (this.dragY)\n            this.element.style.top = y + \"px\";\n        this.element.classList.add('dragging');\n        this.dragging.emit({\n            event: event,\n            element: this.element,\n            model: this.dragModel\n        });\n    };\n    DraggableDirective.prototype._destroySubscription = function () {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n            this.subscription = undefined;\n        }\n    };\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Object)\n    ], DraggableDirective.prototype, \"dragEventTarget\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Object)\n    ], DraggableDirective.prototype, \"dragModel\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], DraggableDirective.prototype, \"dragX\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], DraggableDirective.prototype, \"dragY\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], DraggableDirective.prototype, \"dragStart\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], DraggableDirective.prototype, \"dragging\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], DraggableDirective.prototype, \"dragEnd\", void 0);\n    DraggableDirective = __decorate([\n        core_1.Directive({ selector: '[draggable]' })\n    ], DraggableDirective);\n    return DraggableDirective;\n}());\nexports.DraggableDirective = DraggableDirective;\n",null]}