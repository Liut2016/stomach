{"remainingRequest":"/home/liutao/Project/0/oncology/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/home/liutao/Project/0/oncology/node_modules/@swimlane/ngx-datatable/release/utils/column.js","dependencies":[{"path":"/home/liutao/Project/0/oncology/node_modules/@swimlane/ngx-datatable/release/utils/column.js","mtime":1511963642000},{"path":"/home/liutao/Project/0/oncology/node_modules/cache-loader/dist/cjs.js","mtime":1539266424898},{"path":"/home/liutao/Project/0/oncology/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1526531406000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Returns the columns by pin.\n */\nfunction columnsByPin(cols) {\n    var ret = {\n        left: [],\n        center: [],\n        right: []\n    };\n    if (cols) {\n        for (var _i = 0, cols_1 = cols; _i < cols_1.length; _i++) {\n            var col = cols_1[_i];\n            if (col.frozenLeft) {\n                ret.left.push(col);\n            }\n            else if (col.frozenRight) {\n                ret.right.push(col);\n            }\n            else {\n                ret.center.push(col);\n            }\n        }\n    }\n    return ret;\n}\nexports.columnsByPin = columnsByPin;\n/**\n * Returns the widths of all group sets of a column\n */\nfunction columnGroupWidths(groups, all) {\n    return {\n        left: columnTotalWidth(groups.left),\n        center: columnTotalWidth(groups.center),\n        right: columnTotalWidth(groups.right),\n        total: Math.floor(columnTotalWidth(all))\n    };\n}\nexports.columnGroupWidths = columnGroupWidths;\n/**\n * Calculates the total width of all columns and their groups\n */\nfunction columnTotalWidth(columns, prop) {\n    var totalWidth = 0;\n    if (columns) {\n        for (var _i = 0, columns_1 = columns; _i < columns_1.length; _i++) {\n            var c = columns_1[_i];\n            var has = prop && c[prop];\n            var width = has ? c[prop] : c.width;\n            totalWidth = totalWidth + parseFloat(width);\n        }\n    }\n    return totalWidth;\n}\nexports.columnTotalWidth = columnTotalWidth;\n/**\n * Calculates the total width of all columns and their groups\n */\nfunction columnsTotalWidth(columns, prop) {\n    var totalWidth = 0;\n    for (var _i = 0, columns_2 = columns; _i < columns_2.length; _i++) {\n        var column = columns_2[_i];\n        var has = prop && column[prop];\n        totalWidth = totalWidth + (has ? column[prop] : column.width);\n    }\n    return totalWidth;\n}\nexports.columnsTotalWidth = columnsTotalWidth;\nfunction columnsByPinArr(val) {\n    var colsByPinArr = [];\n    var colsByPin = columnsByPin(val);\n    colsByPinArr.push({ type: 'left', columns: colsByPin['left'] });\n    colsByPinArr.push({ type: 'center', columns: colsByPin['center'] });\n    colsByPinArr.push({ type: 'right', columns: colsByPin['right'] });\n    return colsByPinArr;\n}\nexports.columnsByPinArr = columnsByPinArr;\nfunction allColumnsByPinArr(val) {\n    var colsByPinArr = [];\n    var colsByPin = columnsByPin(val);\n    var colsTest = [];\n    colsByPinArr.push({ type: 'left', columns: colsByPin['left'] });\n    colsByPinArr.push({ type: 'center', columns: colsByPin['center'] });\n    colsByPinArr.push({ type: 'right', columns: colsByPin['right'] });\n    return colsByPinArr;\n}\nexports.allColumnsByPinArr = allColumnsByPinArr;\n//# sourceMappingURL=column.js.map",null]}