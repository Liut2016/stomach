{"remainingRequest":"/home/liutao/Project/0/oncology/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/home/liutao/Project/0/oncology/node_modules/@angularclass/hmr/dist/experimental.js","dependencies":[{"path":"/home/liutao/Project/0/oncology/node_modules/@angularclass/hmr/dist/experimental.js","mtime":1500075642000},{"path":"/home/liutao/Project/0/oncology/node_modules/cache-loader/dist/cjs.js","mtime":1539266424898},{"path":"/home/liutao/Project/0/oncology/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1526531406000}],"contextDependencies":[],"result":["\"use strict\";\n// Experimental API below\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * get input values\n *\n * Extended by: Gabriel Schuster <github.com@actra.de>\n * Now gets values of inputs (including \"checked\" status radios, checkboxes), textareas and selects (including multiselects)\n * Tries to identify the elements as exact as possible, falls back to numeric index when identification fails\n * WIP refactor by: PatrickJS\n */\nfunction __getInputValues() {\n    var _inputs = document.querySelectorAll('input, textarea, select');\n    var inputs = Array.prototype.slice.call(_inputs);\n    return inputs.map(function (input) {\n        var inputTagName = input.tagName.toLowerCase();\n        var inputType = input.type;\n        var inputId = (input.id && typeof input.id === 'string') ? input.id : null;\n        var inputName = (input.name && typeof input.name === 'string') ? input.name : null;\n        var inputValue = (input.value && typeof input.value === 'string') ? input.value : null;\n        var inputChildNodes = input.childNodes;\n        var inputSelected = Boolean(input.selected);\n        var elementStore = {\n            'tag': inputTagName,\n            'type': null,\n            'id': inputId,\n            'name': inputName,\n            'value': '',\n            'checked': false,\n            'options': []\n        };\n        if ('input' === inputTagName || 'textarea' === inputTagName) {\n            elementStore['type'] = inputType;\n            if ('input' !== inputTagName) {\n                elementStore['value'] = inputValue;\n                return elementStore;\n            }\n            switch (inputType) {\n                case 'checkbox':\n                case 'radio':\n                    elementStore['checked'] = inputSelected;\n                    elementStore['value'] = inputValue;\n                    return elementStore;\n                case 'image':\n                case 'button':\n                case 'submit':\n                case 'reset':\n                default:\n                    // These types don't need any config and thus need no update, they only were stored because they match \"input\"\n                    return elementStore;\n            }\n        }\n        else if ('select' === inputTagName) {\n            var childNodes = Array.prototype.slice.call(inputChildNodes);\n            var options = childNodes.map(function (option, i) {\n                return { value: option['value'], selected: Boolean(option['selected']) };\n            });\n            elementStore['options'] = options;\n            return elementStore;\n        }\n        return elementStore;\n    });\n}\nexports.__getInputValues = __getInputValues;\n/**\n * set input values\n *\n * Extended by: Gabriel Schuster <github.com@actra.de>\n * WIP refactor by: PatrickJS\n */\nfunction __setInputValues($inputs) {\n    var inputs = document.querySelectorAll('input, textarea');\n    $inputs.forEach(function (store, i) {\n        if ('input' === store.tag || 'textarea' === store.tag) {\n            if ('input' === store.tag && ('checkbox' === store.type || 'radio' === store.type)) {\n                var selector = 'input' + (null !== store.id ? '#' + store.id : '') + '[type=\"' + store.type + '\"]' + (null !== store.name ? '[name=\"' + store.name + '\"]' : '') +\n                    '[value=\"' + store.value + '\"]';\n                var element = document.body.querySelector(selector);\n                if (element && Boolean(store['checked'])) {\n                    element['checked'] = 'checked';\n                    element.dispatchEvent(new CustomEvent('input', { detail: element['checked'] }));\n                }\n            }\n            else if ('input' === store.tagName.toLowerCase() &&\n                ('image' === store.type || 'button' === store.type || 'submit' === store.type || 'reset' === store.type)) {\n                // These types don't need any config and thus need no update, they only were stored because they match \"input\"\n            }\n            else {\n                if (null === store.id && null === store.name) {\n                    if (store.value.length &&\n                        inputs[i] &&\n                        inputs[i].tagName.toLowerCase() === store.tag &&\n                        ('textarea' === store.tag || inputs[i].getAttribute('type') === store.type) &&\n                        ('string' !== typeof inputs[i].id || !inputs[i].id.length) &&\n                        ('string' !== typeof inputs[i].getAttribute('name') ||\n                            !inputs[i].getAttribute('name').length)) {\n                        inputs[i]['value'] = store.value;\n                        inputs[i].dispatchEvent(new CustomEvent('input', { detail: inputs[i]['value'] }));\n                    }\n                }\n                else {\n                    var selector = 'input' +\n                        (null !== store.id ? '#' + store.id : '') + ('input' === store.tag ? '[type=\"' + store.type + '\"]' : '') +\n                        (null !== store.name ? '[name=\"' + store.name + '\"]' : '');\n                    var element = document.body.querySelector(selector);\n                    if (element && store.value.length) {\n                        element['value'] = store.value;\n                        element.dispatchEvent(new CustomEvent('input', { detail: element['value'] }));\n                    }\n                }\n            }\n        }\n        else if ('select' === store.tag) {\n            var select_1 = null;\n            if (null === store.id && null === store.name) {\n                if (inputs[i] && inputs[i].tagName.toLowerCase() === store.tag && ('string' !== typeof inputs[i].id || !inputs[i].id.length) &&\n                    ('string' !== typeof inputs[i].getAttribute('name') || !inputs[i].getAttribute('name').length)) {\n                    select_1 = inputs[i];\n                }\n            }\n            else {\n                var selector = 'select' + (null !== store.id ? '#' + store.id : '') + (null !== store.name ? '[name=\"' + store.name + '\"]' : '');\n                var element = document.body.querySelector(selector);\n                if (element) {\n                    select_1 = element;\n                }\n            }\n            if (select_1) {\n                store.options.forEach(function (storedOption, j) {\n                    var option = select_1.querySelector('option[value=\"' + storedOption.value + '\"]');\n                    if (!option &&\n                        select_1.childNodes[j] &&\n                        ('string' !== typeof select_1.childNodes[j]['value'] || !select_1.childNodes[j]['value'].length)) {\n                        option = select_1.childNodes[j];\n                    }\n                    if (option && !!storedOption.selected) {\n                        option['selected'] = 'selected';\n                        option.dispatchEvent(new CustomEvent('input', { detail: option['selected'] }));\n                    }\n                });\n            }\n        }\n    });\n}\nexports.__setInputValues = __setInputValues;\nfunction __createInputTransfer() {\n    var $inputs = __getInputValues();\n    return function restoreInputValues() {\n        return __setInputValues($inputs);\n    };\n}\nexports.__createInputTransfer = __createInputTransfer;\n//# sourceMappingURL=experimental.js.map",null]}