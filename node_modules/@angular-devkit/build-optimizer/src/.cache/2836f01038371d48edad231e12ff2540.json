{"remainingRequest":"/home/liutao/Project/0/oncology/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/home/liutao/Project/0/oncology/node_modules/ngx-store/src/service/webstorage.service.js","dependencies":[{"path":"/home/liutao/Project/0/oncology/node_modules/ngx-store/src/service/webstorage.service.js","mtime":1526508791000},{"path":"/home/liutao/Project/0/oncology/node_modules/cache-loader/dist/cjs.js","mtime":1539266424898},{"path":"/home/liutao/Project/0/oncology/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1526531406000}],"contextDependencies":[],"result":["import { debug, Config } from '../config/index';\nimport { Cache } from '../decorator/cache';\nimport { delay, filter } from 'rxjs/operators';\nimport { NgxStorageEvent } from '../utility/storage/storage-event';\nimport { Resource } from './resource';\nvar merge = require('lodash.merge');\nvar WebStorageService = /*@__PURE__*/ (function () {\n    function WebStorageService(utility) {\n        this.utility = utility;\n    }\n    Object.defineProperty(WebStorageService.prototype, \"keys\", {\n        /**\n         * Gets keys for stored variables created by ngx-store,\n         * ignores keys that have not been created by decorators and have no prefix at once\n         */\n        get: /**\n             * Gets keys for stored variables created by ngx-store,\n             * ignores keys that have not been created by decorators and have no prefix at once\n             */ function () {\n            var _this = this;\n            // get prefixed key if prefix is defined\n            var prefixKeys = this.utility.keys.filter(function (key) {\n                return _this.utility.prefix && key.startsWith(_this.utility.prefix);\n            });\n            var decoratorKeys = this.constructor.keys;\n            return prefixKeys.concat(decoratorKeys);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(WebStorageService.prototype, \"config\", {\n        get: function () {\n            return Config;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    WebStorageService.prototype.get = function (key) {\n        return this.utility.get(key);\n    };\n    /**\n     * Returns new data Resource for given key exposing builder design pattern\n     * designed for complex nested data structures\n     * @param {string} key\n     * @returns {any}\n     */\n    /**\n         * Returns new data Resource for given key exposing builder design pattern\n         * designed for complex nested data structures\n         * @param {string} key\n         * @returns {any}\n         */\n    WebStorageService.prototype.load = /**\n         * Returns new data Resource for given key exposing builder design pattern\n         * designed for complex nested data structures\n         * @param {string} key\n         * @returns {any}\n         */\n        function (key) {\n            return new Resource(this, key);\n        };\n    WebStorageService.prototype.set = function (key, value) {\n        return this.utility.set(key, value);\n    };\n    WebStorageService.prototype.update = function (key, changes) {\n        var value = this.get(key);\n        if (value !== undefined && typeof value !== 'object') {\n            debug.throw(new Error(\"Value stored under \\\"\" + key + \"\\\" key is not an object and tried to be updated.\"));\n            return value;\n        }\n        return this.set(key, merge({}, value, changes));\n    };\n    // TODO return true if item existed and false otherwise (?)\n    // TODO return true if item existed and false otherwise (?)\n    WebStorageService.prototype.remove =\n        // TODO return true if item existed and false otherwise (?)\n        function (key) {\n            return this.utility.remove(key);\n        };\n    WebStorageService.prototype.observe = function (key, exactMatch) {\n        return this._changes.pipe(filter(function (event) {\n            if (!key) {\n                return true;\n            }\n            if (exactMatch) {\n                if (key.startsWith(Config.prefix)) {\n                    return event.key === key;\n                }\n                return event.key === Config.prefix + key;\n            }\n            else {\n                return event.key.indexOf(key) !== -1;\n            }\n        }), delay(30) // event should come after actual data change and propagation\n        );\n    };\n    /**\n     * Clears chosen data from Storage\n     * @param clearType 'prefix' | 'decorators' | 'all'\n     * @param prefixOrClass defines the prefix or class (not its instance) whose decorators should be cleared\n     */\n    /**\n         * Clears chosen data from Storage\n         * @param clearType 'prefix' | 'decorators' | 'all'\n         * @param prefixOrClass defines the prefix or class (not its instance) whose decorators should be cleared\n         */\n    WebStorageService.prototype.clear = /**\n         * Clears chosen data from Storage\n         * @param clearType 'prefix' | 'decorators' | 'all'\n         * @param prefixOrClass defines the prefix or class (not its instance) whose decorators should be cleared\n         */\n        function (clearType, prefixOrClass) {\n            var _this = this;\n            clearType = clearType || Config.clearType;\n            if (clearType === 'decorators') {\n                var keys = [];\n                if (typeof prefixOrClass === 'object') {\n                    keys = this.keys.filter(function (key) { return Cache.get(key).targets.indexOf(prefixOrClass) !== -1; });\n                    debug.log(this.utility.getStorageName() + ' > Removing decorated data from ' + prefixOrClass.constructor.name + ':', keys);\n                }\n                else {\n                    keys = this.keys;\n                    debug.log(this.utility.getStorageName() + ' > Removing decorated data:', keys);\n                }\n                keys.forEach(function (key) { return _this.remove(key); });\n            }\n            else if (clearType === 'prefix') {\n                prefixOrClass = prefixOrClass || this.utility.prefix;\n                this.utility.forEach(function (value, key) {\n                    if (key.startsWith(prefixOrClass)) {\n                        _this.remove(_this.utility.trimPrefix(key));\n                    }\n                });\n            }\n            else if (clearType === 'all') {\n                this.utility.clear();\n            }\n        };\n    WebStorageService.prototype.generateEvent = function (key, newValue, oldValue) {\n        var type = this.utility.getStorageName().charAt(0).toLowerCase() + this.utility.getStorageName().slice(1);\n        var event = new NgxStorageEvent(type, key, this.utility.getStorage());\n        event.oldValue = (oldValue !== undefined) ? oldValue : this.get(key);\n        event.newValue = newValue;\n        return event;\n    };\n    WebStorageService.prototype.mapNativeEvent = function (ev) {\n        var event = this.generateEvent(ev.key, this.utility.getGettable(ev.newValue), this.utility.getGettable(ev.oldValue));\n        event.isInternal = false;\n        return event;\n    };\n    WebStorageService.keys = [];\n    return WebStorageService;\n}());\nexport { WebStorageService };\n//# sourceMappingURL=webstorage.service.js.map\n",null]}