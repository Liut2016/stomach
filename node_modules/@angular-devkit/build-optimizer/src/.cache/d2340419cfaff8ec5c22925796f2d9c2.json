{"remainingRequest":"/home/liutao/Project/0/oncology/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/home/liutao/Project/0/oncology/node_modules/ngx-store/src/decorator/webstorage.js","dependencies":[{"path":"/home/liutao/Project/0/oncology/node_modules/ngx-store/src/decorator/webstorage.js","mtime":1526508791000},{"path":"/home/liutao/Project/0/oncology/node_modules/cache-loader/dist/cjs.js","mtime":1539266424898},{"path":"/home/liutao/Project/0/oncology/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1526531406000}],"contextDependencies":[],"result":["import { CookiesStorageService, LocalStorageService, SessionStorageService } from '../service/index';\nimport { cookiesStorageUtility, localStorageUtility, sessionStorageUtility, sharedStorageUtility } from '../utility/index';\nimport { SharedStorageService } from '../service/shared-storage.service';\nimport { Cache } from './cache';\nexport function LocalStorage(keyOrConfig, config) {\n    return WebStorage(localStorageUtility, LocalStorageService, keyOrConfig, config);\n}\nexport function SessionStorage(keyOrConfig, config) {\n    return WebStorage(sessionStorageUtility, SessionStorageService, keyOrConfig, config);\n}\nexport function CookieStorage(keyOrConfig, config) {\n    return WebStorage(cookiesStorageUtility, CookiesStorageService, keyOrConfig, config);\n}\nexport function SharedStorage(keyOrConfig, config) {\n    return WebStorage(sharedStorageUtility, SharedStorageService, keyOrConfig, config);\n}\nfunction WebStorage(webStorageUtility, service, keyOrConfig, config) {\n    if (config === void 0) { config = {}; }\n    return function (target, propertyName) {\n        var key;\n        if (typeof keyOrConfig === 'object') {\n            key = keyOrConfig.key;\n            config = keyOrConfig;\n        }\n        else if (typeof keyOrConfig === 'string') {\n            key = keyOrConfig;\n        }\n        key = key || config.key || propertyName;\n        var cacheItem = Cache.getCacheFor({\n            key: key,\n            name: propertyName,\n            targets: [target],\n            services: [service],\n            utilities: [{\n                    utility: webStorageUtility,\n                    config: config,\n                }],\n        });\n        Object.defineProperty(target, propertyName, {\n            get: function () {\n                return cacheItem.getProxy(undefined, config);\n            },\n            set: function (value) {\n                if (!Cache.get(cacheItem.key)) {\n                    cacheItem = Cache.getCacheFor(cacheItem);\n                }\n                cacheItem.addTargets([target]);\n                cacheItem.currentTarget = target;\n                cacheItem.saveValue(value, config);\n            },\n        });\n        return target;\n    };\n}\n//# sourceMappingURL=webstorage.js.map",null]}