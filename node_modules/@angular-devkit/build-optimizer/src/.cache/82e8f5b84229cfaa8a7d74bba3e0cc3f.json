{"remainingRequest":"/home/liutao/Project/0/oncology/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/home/liutao/Project/0/oncology/node_modules/@angular/cdk/esm5/collections.es5.js","dependencies":[{"path":"/home/liutao/Project/0/oncology/node_modules/@angular/cdk/esm5/collections.es5.js","mtime":1526940964000},{"path":"/home/liutao/Project/0/oncology/node_modules/cache-loader/dist/cjs.js","mtime":1539266424898},{"path":"/home/liutao/Project/0/oncology/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1526531406000}],"contextDependencies":[],"result":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** PURE_IMPORTS_START rxjs,_angular_core PURE_IMPORTS_END */\nimport { Subject } from 'rxjs';\nimport { Injectable, defineInjectable } from '@angular/core';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @abstract\n * @template T\n */\nvar /**\n * @abstract\n * @template T\n */ DataSource = /*@__PURE__*/ (function () {\n    function DataSource() {\n    }\n    return DataSource;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Class to be used to power selecting one or more options from a list.\n * @template T\n */\nvar /**\n * Class to be used to power selecting one or more options from a list.\n * @template T\n */ SelectionModel = /*@__PURE__*/ (function () {\n    function SelectionModel(_multiple, initiallySelectedValues, _emitChanges) {\n        if (_multiple === void 0) {\n            _multiple = false;\n        }\n        if (_emitChanges === void 0) {\n            _emitChanges = true;\n        }\n        var _this = this;\n        this._multiple = _multiple;\n        this._emitChanges = _emitChanges;\n        /**\n         * Currently-selected values.\n         */\n        this._selection = new Set();\n        /**\n         * Keeps track of the deselected options that haven't been emitted by the change event.\n         */\n        this._deselectedToEmit = [];\n        /**\n         * Keeps track of the selected options that haven't been emitted by the change event.\n         */\n        this._selectedToEmit = [];\n        /**\n         * Event emitted when the value has changed.\n         */\n        this.onChange = this._emitChanges ? new Subject() : null;\n        if (initiallySelectedValues && initiallySelectedValues.length) {\n            if (_multiple) {\n                initiallySelectedValues.forEach(function (value) { return _this._markSelected(value); });\n            }\n            else {\n                this._markSelected(initiallySelectedValues[0]);\n            }\n            // Clear the array in order to avoid firing the change event for preselected values.\n            this._selectedToEmit.length = 0;\n        }\n    }\n    Object.defineProperty(SelectionModel.prototype, \"selected\", {\n        /** Selected values. */\n        get: /**\n         * Selected values.\n         * @return {?}\n         */ function () {\n            if (!this._selected) {\n                this._selected = Array.from(this._selection.values());\n            }\n            return this._selected;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Selects a value or an array of values.\n     */\n    /**\n     * Selects a value or an array of values.\n     * @param {...?} values\n     * @return {?}\n     */\n    SelectionModel.prototype.select = /**\n     * Selects a value or an array of values.\n     * @param {...?} values\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            var values = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                values[_i] = arguments[_i];\n            }\n            this._verifyValueAssignment(values);\n            values.forEach(function (value) { return _this._markSelected(value); });\n            this._emitChangeEvent();\n        };\n    /**\n     * Deselects a value or an array of values.\n     */\n    /**\n     * Deselects a value or an array of values.\n     * @param {...?} values\n     * @return {?}\n     */\n    SelectionModel.prototype.deselect = /**\n     * Deselects a value or an array of values.\n     * @param {...?} values\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            var values = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                values[_i] = arguments[_i];\n            }\n            this._verifyValueAssignment(values);\n            values.forEach(function (value) { return _this._unmarkSelected(value); });\n            this._emitChangeEvent();\n        };\n    /**\n     * Toggles a value between selected and deselected.\n     */\n    /**\n     * Toggles a value between selected and deselected.\n     * @param {?} value\n     * @return {?}\n     */\n    SelectionModel.prototype.toggle = /**\n     * Toggles a value between selected and deselected.\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            this.isSelected(value) ? this.deselect(value) : this.select(value);\n        };\n    /**\n     * Clears all of the selected values.\n     */\n    /**\n     * Clears all of the selected values.\n     * @return {?}\n     */\n    SelectionModel.prototype.clear = /**\n     * Clears all of the selected values.\n     * @return {?}\n     */\n        function () {\n            this._unmarkAll();\n            this._emitChangeEvent();\n        };\n    /**\n     * Determines whether a value is selected.\n     */\n    /**\n     * Determines whether a value is selected.\n     * @param {?} value\n     * @return {?}\n     */\n    SelectionModel.prototype.isSelected = /**\n     * Determines whether a value is selected.\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            return this._selection.has(value);\n        };\n    /**\n     * Determines whether the model does not have a value.\n     */\n    /**\n     * Determines whether the model does not have a value.\n     * @return {?}\n     */\n    SelectionModel.prototype.isEmpty = /**\n     * Determines whether the model does not have a value.\n     * @return {?}\n     */\n        function () {\n            return this._selection.size === 0;\n        };\n    /**\n     * Determines whether the model has a value.\n     */\n    /**\n     * Determines whether the model has a value.\n     * @return {?}\n     */\n    SelectionModel.prototype.hasValue = /**\n     * Determines whether the model has a value.\n     * @return {?}\n     */\n        function () {\n            return !this.isEmpty();\n        };\n    /**\n     * Sorts the selected values based on a predicate function.\n     */\n    /**\n     * Sorts the selected values based on a predicate function.\n     * @param {?=} predicate\n     * @return {?}\n     */\n    SelectionModel.prototype.sort = /**\n     * Sorts the selected values based on a predicate function.\n     * @param {?=} predicate\n     * @return {?}\n     */\n        function (predicate) {\n            if (this._multiple && this._selected) {\n                this._selected.sort(predicate);\n            }\n        };\n    /**\n     * Emits a change event and clears the records of selected and deselected values.\n     * @return {?}\n     */\n    SelectionModel.prototype._emitChangeEvent = /**\n     * Emits a change event and clears the records of selected and deselected values.\n     * @return {?}\n     */\n        function () {\n            // Clear the selected values so they can be re-cached.\n            this._selected = null;\n            if (this._selectedToEmit.length || this._deselectedToEmit.length) {\n                if (this.onChange) {\n                    this.onChange.next({\n                        source: this,\n                        added: this._selectedToEmit,\n                        removed: this._deselectedToEmit\n                    });\n                }\n                this._deselectedToEmit = [];\n                this._selectedToEmit = [];\n            }\n        };\n    /**\n     * Selects a value.\n     * @param {?} value\n     * @return {?}\n     */\n    SelectionModel.prototype._markSelected = /**\n     * Selects a value.\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            if (!this.isSelected(value)) {\n                if (!this._multiple) {\n                    this._unmarkAll();\n                }\n                this._selection.add(value);\n                if (this._emitChanges) {\n                    this._selectedToEmit.push(value);\n                }\n            }\n        };\n    /**\n     * Deselects a value.\n     * @param {?} value\n     * @return {?}\n     */\n    SelectionModel.prototype._unmarkSelected = /**\n     * Deselects a value.\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            if (this.isSelected(value)) {\n                this._selection.delete(value);\n                if (this._emitChanges) {\n                    this._deselectedToEmit.push(value);\n                }\n            }\n        };\n    /**\n     * Clears out the selected values.\n     * @return {?}\n     */\n    SelectionModel.prototype._unmarkAll = /**\n     * Clears out the selected values.\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            if (!this.isEmpty()) {\n                this._selection.forEach(function (value) { return _this._unmarkSelected(value); });\n            }\n        };\n    /**\n     * Verifies the value assignment and throws an error if the specified value array is\n     * including multiple values while the selection model is not supporting multiple values.\n     * @param {?} values\n     * @return {?}\n     */\n    SelectionModel.prototype._verifyValueAssignment = /**\n     * Verifies the value assignment and throws an error if the specified value array is\n     * including multiple values while the selection model is not supporting multiple values.\n     * @param {?} values\n     * @return {?}\n     */\n        function (values) {\n            if (values.length > 1 && !this._multiple) {\n                throw getMultipleValuesInSingleSelectionError();\n            }\n        };\n    return SelectionModel;\n}());\n/**\n * Returns an error that reports that multiple values are passed into a selection model\n * with a single value.\n * @return {?}\n */\nfunction getMultipleValuesInSingleSelectionError() {\n    return Error('Cannot pass multiple values into SelectionModel with single-value mode.');\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Class to coordinate unique selection based on name.\n * Intended to be consumed as an Angular service.\n * This service is needed because native radio change events are only fired on the item currently\n * being selected, and we still need to uncheck the previous selection.\n *\n * This service does not *store* any IDs and names because they may change at any time, so it is\n * less error-prone if they are simply passed through when the events occur.\n */\nvar UniqueSelectionDispatcher = /*@__PURE__*/ (function () {\n    function UniqueSelectionDispatcher() {\n        this._listeners = [];\n    }\n    /**\n     * Notify other items that selection for the given name has been set.\n     * @param id ID of the item.\n     * @param name Name of the item.\n     */\n    /**\n     * Notify other items that selection for the given name has been set.\n     * @param {?} id ID of the item.\n     * @param {?} name Name of the item.\n     * @return {?}\n     */\n    UniqueSelectionDispatcher.prototype.notify = /**\n     * Notify other items that selection for the given name has been set.\n     * @param {?} id ID of the item.\n     * @param {?} name Name of the item.\n     * @return {?}\n     */\n        function (id, name) {\n            for (var _i = 0, _a = this._listeners; _i < _a.length; _i++) {\n                var listener = _a[_i];\n                listener(id, name);\n            }\n        };\n    /**\n     * Listen for future changes to item selection.\n     * @return Function used to deregister listener\n     */\n    /**\n     * Listen for future changes to item selection.\n     * @param {?} listener\n     * @return {?} Function used to deregister listener\n     */\n    UniqueSelectionDispatcher.prototype.listen = /**\n     * Listen for future changes to item selection.\n     * @param {?} listener\n     * @return {?} Function used to deregister listener\n     */\n        function (listener) {\n            var _this = this;\n            this._listeners.push(listener);\n            return function () {\n                _this._listeners = _this._listeners.filter(function (registered) {\n                    return listener !== registered;\n                });\n            };\n        };\n    /**\n     * @return {?}\n     */\n    UniqueSelectionDispatcher.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            this._listeners = [];\n        };\n    /** @nocollapse */ UniqueSelectionDispatcher.ngInjectableDef = defineInjectable({ factory: function UniqueSelectionDispatcher_Factory() { return new UniqueSelectionDispatcher(); }, token: UniqueSelectionDispatcher, providedIn: \"root\" });\n    return UniqueSelectionDispatcher;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nexport { UniqueSelectionDispatcher, DataSource, SelectionModel, getMultipleValuesInSingleSelectionError };\n//# sourceMappingURL=collections.es5.js.map\n",null]}