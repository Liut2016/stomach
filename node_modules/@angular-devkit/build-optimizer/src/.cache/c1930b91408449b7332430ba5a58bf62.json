{"remainingRequest":"/home/liutao/Project/0/oncology/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/home/liutao/Project/0/oncology/node_modules/ngx-store/src/service/resource.js","dependencies":[{"path":"/home/liutao/Project/0/oncology/node_modules/ngx-store/src/service/resource.js","mtime":1526508791000},{"path":"/home/liutao/Project/0/oncology/node_modules/cache-loader/dist/cjs.js","mtime":1539266424898},{"path":"/home/liutao/Project/0/oncology/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1526531406000}],"contextDependencies":[],"result":["import { Config } from '../config/config';\nvar _get = require('lodash.get');\nvar _set = require('lodash.set');\nvar _merge = require('lodash.merge');\nvar Resource = /*@__PURE__*/ (function () {\n    function Resource(service, key) {\n        this.service = service;\n        this.key = key;\n        this._defaultValue = null;\n        this._path = [];\n        this._prefix = Config.prefix;\n    }\n    Object.defineProperty(Resource.prototype, \"value\", {\n        /**\n         * Returns value taking path into account\n         * @returns {any}\n         */\n        get: /**\n             * Returns value taking path into account\n             * @returns {any}\n             */ function () {\n            return this.considerDefault(this.readValue());\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Resource.prototype, \"defaultValue\", {\n        /**\n         * Returns default value\n         * @returns {T}\n         */\n        get: /**\n             * Returns default value\n             * @returns {T}\n             */ function () {\n            return this._defaultValue;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Resource.prototype, \"path\", {\n        /**\n         * Returns current path as a string\n         * @returns {string}\n         */\n        get: /**\n             * Returns current path as a string\n             * @returns {string}\n             */ function () {\n            return this.pathString;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Resource.prototype, \"prefix\", {\n        /**\n         * Returns currently set prefix\n         * @returns {string}\n         */\n        get: /**\n             * Returns currently set prefix\n             * @returns {string}\n             */ function () {\n            return this._prefix;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Sets path of object property\n     * @param {string} path\n     * @returns {this}\n     */\n    /**\n         * Sets path of object property\n         * @param {string} path\n         * @returns {this}\n         */\n    Resource.prototype.setPath = /**\n         * Sets path of object property\n         * @param {string} path\n         * @returns {this}\n         */\n        function (path) {\n            this._path = path.split('.');\n            return this;\n        };\n    /**\n     * Appends current path\n     * e.g. if path('key') and appendPath('nested'), the path will be \"key.nested\"\n     * @param {string} path\n     * @returns {this}\n     */\n    /**\n         * Appends current path\n         * e.g. if path('key') and appendPath('nested'), the path will be \"key.nested\"\n         * @param {string} path\n         * @returns {this}\n         */\n    Resource.prototype.appendPath = /**\n         * Appends current path\n         * e.g. if path('key') and appendPath('nested'), the path will be \"key.nested\"\n         * @param {string} path\n         * @returns {this}\n         */\n        function (path) {\n            this._path.push(path);\n            return this;\n        };\n    /**\n     * Removes last item of path\n     * e.g. if path('key.nested') and truncatePath(), the path will be \"key\"\n     * @returns {this}\n     */\n    /**\n         * Removes last item of path\n         * e.g. if path('key.nested') and truncatePath(), the path will be \"key\"\n         * @returns {this}\n         */\n    Resource.prototype.truncatePath = /**\n         * Removes last item of path\n         * e.g. if path('key.nested') and truncatePath(), the path will be \"key\"\n         * @returns {this}\n         */\n        function () {\n            this._path.pop();\n            return this;\n        };\n    /**\n     * Resets set path\n     * @returns {this}\n     */\n    /**\n         * Resets set path\n         * @returns {this}\n         */\n    Resource.prototype.resetPath = /**\n         * Resets set path\n         * @returns {this}\n         */\n        function () {\n            this._path = [];\n            return this;\n        };\n    /**\n     * Sets prefix\n     * @param {string} prefix\n     * @returns {this}\n     */\n    /**\n         * Sets prefix\n         * @param {string} prefix\n         * @returns {this}\n         */\n    Resource.prototype.setPrefix = /**\n         * Sets prefix\n         * @param {string} prefix\n         * @returns {this}\n         */\n        function (prefix) {\n            this._prefix = prefix;\n            return this;\n        };\n    /**\n     * Moves storage item to new key using given prefix\n     * @param {string} prefix\n     * @returns {this}\n     */\n    /**\n         * Moves storage item to new key using given prefix\n         * @param {string} prefix\n         * @returns {this}\n         */\n    Resource.prototype.changePrefix = /**\n         * Moves storage item to new key using given prefix\n         * @param {string} prefix\n         * @returns {this}\n         */\n        function (prefix) {\n            this.service.utility.set(this.key, this.fullValue, { prefix: prefix });\n            this.service.utility.remove(this.key, { prefix: this._prefix });\n            return this.setPrefix(prefix);\n        };\n    /**\n     * Sets default value for both reading and saving operations\n     * @param defaultValue\n     * @returns {this}\n     */\n    /**\n         * Sets default value for both reading and saving operations\n         * @param defaultValue\n         * @returns {this}\n         */\n    Resource.prototype.setDefaultValue = /**\n         * Sets default value for both reading and saving operations\n         * @param defaultValue\n         * @returns {this}\n         */\n        function (defaultValue) {\n            this._defaultValue = defaultValue;\n            var value = this.readValue();\n            if (this.isNullOrUndefined(value)) {\n                this.save(defaultValue);\n            }\n            return this;\n        };\n    /**\n     * Creates or overrides value as a new entry or existing object property depending on path\n     * @param value\n     * @returns {this}\n     */\n    /**\n         * Creates or overrides value as a new entry or existing object property depending on path\n         * @param value\n         * @returns {this}\n         */\n    Resource.prototype.save = /**\n         * Creates or overrides value as a new entry or existing object property depending on path\n         * @param value\n         * @returns {this}\n         */\n        function (value) {\n            if (this.pathString) {\n                value = _set(this.fullValue, this.pathString, this.considerDefault(value));\n            }\n            this.service.utility.set(this.key, this.considerDefault(value), { prefix: this._prefix });\n            return this;\n        };\n    /**\n     * Updates existing object property using current path\n     * @param {T} value\n     * @returns {this}\n     */\n    /**\n         * Updates existing object property using current path\n         * @param {T} value\n         * @returns {this}\n         */\n    Resource.prototype.update = /**\n         * Updates existing object property using current path\n         * @param {T} value\n         * @returns {this}\n         */\n        function (value) {\n            return this.save(_merge(this.readValue(), value));\n        };\n    /**\n     * Removes item stored under current key\n     * @returns {this}\n     */\n    /**\n         * Removes item stored under current key\n         * @returns {this}\n         */\n    Resource.prototype.remove = /**\n         * Removes item stored under current key\n         * @returns {this}\n         */\n        function () {\n            this.service.utility.remove(this.key);\n            return this;\n        };\n    Object.defineProperty(Resource.prototype, \"fullValue\", {\n        get: function () {\n            return this.considerDefault(this.service.utility.get(this.key, { prefix: this._prefix }));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Resource.prototype.considerDefault = function (value) {\n        return this.isNullOrUndefined(value) ? this._defaultValue : value;\n    };\n    Resource.prototype.isNullOrUndefined = function (value) {\n        return (value === null || value === undefined);\n    };\n    Object.defineProperty(Resource.prototype, \"pathString\", {\n        get: function () {\n            return this._path.join('.');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Resource.prototype.readValue = function () {\n        var value = this.service.utility.get(this.key, { prefix: this._prefix });\n        if (this.pathString) {\n            return _get(value, this.pathString);\n        }\n        return value;\n    };\n    return Resource;\n}());\nexport { Resource };\n//# sourceMappingURL=resource.js.map\n",null]}