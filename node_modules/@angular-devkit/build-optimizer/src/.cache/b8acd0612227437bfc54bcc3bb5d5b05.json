{"remainingRequest":"/home/liutao/Project/0/oncology/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/home/liutao/Project/0/oncology/node_modules/@swimlane/ngx-datatable/release/directives/resizeable.directive.js","dependencies":[{"path":"/home/liutao/Project/0/oncology/node_modules/@swimlane/ngx-datatable/release/directives/resizeable.directive.js","mtime":1511963642000},{"path":"/home/liutao/Project/0/oncology/node_modules/cache-loader/dist/cjs.js","mtime":1539266424898},{"path":"/home/liutao/Project/0/oncology/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1526531406000}],"contextDependencies":[],"result":["\"use strict\";\nvar __decorate = /*@__PURE__*/ require(\"tslib\").__decorate;\nvar __metadata = /*@__PURE__*/ require(\"tslib\").__metadata;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = require(\"@angular/core\");\nvar Observable_1 = require(\"rxjs/Observable\");\nvar events_1 = require(\"../events\");\nvar operators_1 = require(\"rxjs/operators\");\nvar ResizeableDirective = /*@__PURE__*/ (function () {\n    function ResizeableDirective(element) {\n        this.resizeEnabled = true;\n        this.resize = new core_1.EventEmitter();\n        this.resizing = false;\n        this.element = element.nativeElement;\n    }\n    ResizeableDirective.prototype.ngAfterViewInit = function () {\n        if (this.resizeEnabled) {\n            var node = document.createElement('span');\n            node.classList.add('resize-handle');\n            this.element.appendChild(node);\n        }\n    };\n    ResizeableDirective.prototype.ngOnDestroy = function () {\n        this._destroySubscription();\n    };\n    ResizeableDirective.prototype.onMouseup = function () {\n        this.resizing = false;\n        if (this.subscription && !this.subscription.closed) {\n            this._destroySubscription();\n            this.resize.emit(this.element.clientWidth);\n        }\n    };\n    ResizeableDirective.prototype.onMousedown = function (event) {\n        var _this = this;\n        var isHandle = (event.target).classList.contains('resize-handle');\n        var initialWidth = this.element.clientWidth;\n        var mouseDownScreenX = event.screenX;\n        if (isHandle) {\n            event.stopPropagation();\n            this.resizing = true;\n            var mouseup = Observable_1.Observable.fromEvent(document, 'mouseup');\n            this.subscription = mouseup\n                .subscribe(function (ev) { return _this.onMouseup(); });\n            var mouseMoveSub = Observable_1.Observable.fromEvent(document, 'mousemove')\n                .pipe(operators_1.takeUntil(mouseup))\n                .subscribe(function (e) { return _this.move(e, initialWidth, mouseDownScreenX); });\n            this.subscription.add(mouseMoveSub);\n        }\n    };\n    ResizeableDirective.prototype.move = function (event, initialWidth, mouseDownScreenX) {\n        var movementX = event.screenX - mouseDownScreenX;\n        var newWidth = initialWidth + movementX;\n        var overMinWidth = !this.minWidth || newWidth >= this.minWidth;\n        var underMaxWidth = !this.maxWidth || newWidth <= this.maxWidth;\n        if (overMinWidth && underMaxWidth) {\n            this.element.style.width = newWidth + \"px\";\n        }\n    };\n    ResizeableDirective.prototype._destroySubscription = function () {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n            this.subscription = undefined;\n        }\n    };\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], ResizeableDirective.prototype, \"resizeEnabled\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Number)\n    ], ResizeableDirective.prototype, \"minWidth\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Number)\n    ], ResizeableDirective.prototype, \"maxWidth\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], ResizeableDirective.prototype, \"resize\", void 0);\n    __decorate([\n        core_1.HostListener('mousedown', ['$event']),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", [Object]),\n        __metadata(\"design:returntype\", void 0)\n    ], ResizeableDirective.prototype, \"onMousedown\", null);\n    ResizeableDirective = __decorate([\n        core_1.Directive({\n            selector: '[resizeable]',\n            host: {\n                '[class.resizeable]': 'resizeEnabled'\n            }\n        })\n    ], ResizeableDirective);\n    return ResizeableDirective;\n}());\nexports.ResizeableDirective = ResizeableDirective;\n",null]}