{"remainingRequest":"/home/liutao/Project/0/oncology/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/home/liutao/Project/0/oncology/node_modules/ngx-store/src/utility/webstorage.utility.js","dependencies":[{"path":"/home/liutao/Project/0/oncology/node_modules/ngx-store/src/utility/webstorage.utility.js","mtime":1526508791000},{"path":"/home/liutao/Project/0/oncology/node_modules/cache-loader/dist/cjs.js","mtime":1539266424898},{"path":"/home/liutao/Project/0/oncology/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1526531406000}],"contextDependencies":[],"result":["import { Cache } from '../decorator/cache';\nimport { CONFIG_PREFIX, debug } from '../config/index';\nimport { Subject } from 'rxjs';\nimport { NgxStorageEvent } from './storage/storage-event';\nvar WebStorageUtility = /*@__PURE__*/ (function () {\n    function WebStorageUtility(storage, prefix, previousPrefix) {\n        var _this = this;\n        this._prefix = '';\n        this._changes = new Subject();\n        this._storage = storage;\n        this._prefix = prefix;\n        // handle previousPrefix for backward-compatibility and safe config changes below\n        if (prefix === previousPrefix)\n            return;\n        if (previousPrefix === null)\n            return;\n        if (previousPrefix === undefined)\n            return;\n        debug.log(this.getStorageName() + ' > Detected prefix change from ' + previousPrefix + ' to ' + prefix);\n        this.forEach(function (value, key) {\n            // ignore config settings when previousPrefix = ''\n            if (key.startsWith(previousPrefix) && !key.startsWith(CONFIG_PREFIX)) {\n                var nameWithoutPrefix = _this.trimPrefix(key);\n                _this.set(nameWithoutPrefix, _this._storage.getItem(key));\n                if (previousPrefix !== '') {\n                    _this._storage.removeItem(key);\n                }\n            }\n        });\n    }\n    WebStorageUtility.getSettable = function (value) {\n        return JSON.stringify(value);\n    };\n    WebStorageUtility.getGettable = function (value) {\n        if (value === 'undefined')\n            return null;\n        try {\n            return JSON.parse(value);\n        }\n        catch (e) {\n            return value;\n        }\n    };\n    Object.defineProperty(WebStorageUtility.prototype, \"prefix\", {\n        get: function () {\n            return this._prefix;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(WebStorageUtility.prototype, \"keys\", {\n        get: function () {\n            var keys = [];\n            this.forEach(function (value, key) { return keys.push(key); });\n            return keys;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(WebStorageUtility.prototype, \"changes\", {\n        get: function () {\n            return this._changes.asObservable();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    WebStorageUtility.prototype.getStorage = function () {\n        return this._storage;\n    };\n    WebStorageUtility.prototype.getStorageKey = function (key, prefix) {\n        prefix = (typeof prefix === 'string') ? prefix : this.prefix;\n        return \"\" + prefix + key;\n    };\n    WebStorageUtility.prototype.getStorageName = function () {\n        return this._storage.type || ((this._storage === localStorage) ? 'localStorage' : 'sessionStorage');\n    };\n    WebStorageUtility.prototype.get = function (key, config) {\n        if (config === void 0) {\n            config = {};\n        }\n        var storageKey = this.getStorageKey(key, config.prefix);\n        var value = this._storage.getItem(storageKey);\n        return this.getGettable(value);\n    };\n    WebStorageUtility.prototype.set = function (key, value, config) {\n        if (config === void 0) {\n            config = {};\n        }\n        if (value === null || value === undefined) {\n            this.remove(key);\n            return null;\n        }\n        try {\n            var storageKey = this.getStorageKey(key, config.prefix);\n            var storable = this.getSettable(value);\n            this.emitEvent(key, value);\n            this._storage.setItem(storageKey, storable, config.expires);\n            var cacheItem = Cache.get(key);\n            if (cacheItem) {\n                debug.log(\"updating following CacheItem from \" + this.constructor.name + \":\", cacheItem);\n                cacheItem.resetProxy();\n                cacheItem.propagateChange(value, this);\n            }\n        }\n        catch (error) {\n            console.warn(\"[ngx-store] \" + this.getStorageName() + \": following error occurred while trying to save \" + key + \" =\", value);\n            console.error(error);\n        }\n        return value;\n    };\n    // TODO return true if item existed and false otherwise (?)\n    // TODO return true if item existed and false otherwise (?)\n    WebStorageUtility.prototype.remove =\n        // TODO return true if item existed and false otherwise (?)\n        function (key, config) {\n            if (config === void 0) {\n                config = {};\n            }\n            var storageKey = this.getStorageKey(key, config.prefix);\n            this._storage.removeItem(storageKey);\n            var cacheItem = Cache.get(key);\n            if (cacheItem) {\n                cacheItem.resetProxy();\n            }\n        };\n    WebStorageUtility.prototype.clear = function () {\n        var _this = this;\n        this.emitEvent(null, null, null);\n        this.forEach(function (value, key) {\n            if (key.startsWith(CONFIG_PREFIX))\n                return;\n            _this.remove(key, { prefix: '' });\n        });\n    };\n    WebStorageUtility.prototype.forEach = function (callbackFn) {\n        var _this = this;\n        if (typeof this._storage.forEach === 'function') {\n            return this._storage.forEach(function (value, key) {\n                callbackFn(_this.getGettable(value), key);\n            });\n        }\n        Object.keys(this._storage).forEach(function (key) {\n            callbackFn(_this.getGettable(_this._storage[key]), key);\n        });\n    };\n    WebStorageUtility.prototype.getSettable = function (value) {\n        return WebStorageUtility.getSettable(value);\n    };\n    WebStorageUtility.prototype.getGettable = function (value) {\n        return WebStorageUtility.getGettable(value);\n    };\n    WebStorageUtility.prototype.trimPrefix = function (key) {\n        return key.replace(this.prefix, '');\n    };\n    WebStorageUtility.prototype.emitEvent = function (key, newValue, oldValue) {\n        var event = new NgxStorageEvent(this.getStorageName(), key, this._storage);\n        event.oldValue = (oldValue !== undefined) ? oldValue : this.get(key);\n        event.newValue = newValue;\n        this._changes.next(event);\n    };\n    return WebStorageUtility;\n}());\nexport { WebStorageUtility };\n//# sourceMappingURL=webstorage.utility.js.map\n",null]}