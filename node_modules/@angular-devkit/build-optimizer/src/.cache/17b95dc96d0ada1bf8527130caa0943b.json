{"remainingRequest":"/home/liutao/Project/0/oncology/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/home/liutao/Project/0/oncology/node_modules/@angular/material/esm5/bottom-sheet.es5.js","dependencies":[{"path":"/home/liutao/Project/0/oncology/node_modules/@angular/material/esm5/bottom-sheet.es5.js","mtime":1526941038000},{"path":"/home/liutao/Project/0/oncology/node_modules/cache-loader/dist/cjs.js","mtime":1539266424898},{"path":"/home/liutao/Project/0/oncology/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1526531406000}],"contextDependencies":[],"result":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** PURE_IMPORTS_START _angular_core,_angular_cdk_keycodes,rxjs,rxjs_operators,_angular_animations,_angular_material_core,tslib,_angular_cdk_portal,_angular_cdk_layout,_angular_common,_angular_cdk_a11y,_angular_cdk_overlay,_angular_cdk_bidi PURE_IMPORTS_END */\nimport { InjectionToken, Component, ViewChild, ElementRef, ChangeDetectionStrategy, ViewEncapsulation, ChangeDetectorRef, EventEmitter, Inject, Optional, TemplateRef, Injectable, Injector, SkipSelf, NgModule } from '@angular/core';\nimport { ESCAPE } from '@angular/cdk/keycodes';\nimport { merge, Subject, of } from 'rxjs';\nimport { filter, take } from 'rxjs/operators';\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport { AnimationCurves, AnimationDurations, MatCommonModule } from '@angular/material/core';\nimport { __assign, __extends } from 'tslib';\nimport { BasePortalOutlet, CdkPortalOutlet, ComponentPortal, TemplatePortal, PortalInjector, PortalModule } from '@angular/cdk/portal';\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { FocusTrapFactory } from '@angular/cdk/a11y';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { Directionality } from '@angular/cdk/bidi';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Injection token that can be used to access the data that was passed in to a bottom sheet.\n */\nvar /** @type {?} */ MAT_BOTTOM_SHEET_DATA = /*@__PURE__*/ new InjectionToken('MatBottomSheetData');\n/**\n * Configuration used when opening a bottom sheet.\n * @template D\n */\nvar /**\n * Configuration used when opening a bottom sheet.\n * @template D\n */ MatBottomSheetConfig = /*@__PURE__*/ (function () {\n    function MatBottomSheetConfig() {\n        /**\n         * Data being injected into the child component.\n         */\n        this.data = null;\n        /**\n         * Whether the bottom sheet has a backdrop.\n         */\n        this.hasBackdrop = true;\n        /**\n         * Whether the user can use escape or clicking outside to close the bottom sheet.\n         */\n        this.disableClose = false;\n        /**\n         * Aria label to assign to the bottom sheet element.\n         */\n        this.ariaLabel = null;\n    }\n    return MatBottomSheetConfig;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n * @template T, R\n */\nvar /**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n * @template T, R\n */ MatBottomSheetRef = /*@__PURE__*/ (function () {\n    function MatBottomSheetRef(containerInstance, _overlayRef) {\n        var _this = this;\n        this._overlayRef = _overlayRef;\n        /**\n         * Subject for notifying the user that the bottom sheet has been dismissed.\n         */\n        this._afterDismissed = new Subject();\n        /**\n         * Subject for notifying the user that the bottom sheet has opened and appeared.\n         */\n        this._afterOpened = new Subject();\n        this.containerInstance = containerInstance;\n        // Emit when opening animation completes\n        containerInstance._animationStateChanged.pipe(filter(function (event) { return event.phaseName === 'done' && event.toState === 'visible'; }), take(1))\n            .subscribe(function () {\n            _this._afterOpened.next();\n            _this._afterOpened.complete();\n        });\n        // Dispose overlay when closing animation is complete\n        containerInstance._animationStateChanged.pipe(filter(function (event) { return event.phaseName === 'done' && event.toState === 'hidden'; }), take(1))\n            .subscribe(function () {\n            _this._overlayRef.dispose();\n            _this._afterDismissed.next(_this._result);\n            _this._afterDismissed.complete();\n        });\n        if (!containerInstance.bottomSheetConfig.disableClose) {\n            merge(_overlayRef.backdropClick(), _overlayRef._keydownEvents.pipe(filter(function (event) { return event.keyCode === ESCAPE; }))).subscribe(function () { return _this.dismiss(); });\n        }\n    }\n    /**\n     * Dismisses the bottom sheet.\n     * @param result Data to be passed back to the bottom sheet opener.\n     */\n    /**\n     * Dismisses the bottom sheet.\n     * @param {?=} result Data to be passed back to the bottom sheet opener.\n     * @return {?}\n     */\n    MatBottomSheetRef.prototype.dismiss = /**\n     * Dismisses the bottom sheet.\n     * @param {?=} result Data to be passed back to the bottom sheet opener.\n     * @return {?}\n     */\n        function (result) {\n            var _this = this;\n            if (!this._afterDismissed.closed) {\n                // Transition the backdrop in parallel to the bottom sheet.\n                this.containerInstance._animationStateChanged.pipe(filter(function (event) { return event.phaseName === 'start'; }), take(1)).subscribe(function () { return _this._overlayRef.detachBackdrop(); });\n                this._result = result;\n                this.containerInstance.exit();\n            }\n        };\n    /** Gets an observable that is notified when the bottom sheet is finished closing. */\n    /**\n     * Gets an observable that is notified when the bottom sheet is finished closing.\n     * @return {?}\n     */\n    MatBottomSheetRef.prototype.afterDismissed = /**\n     * Gets an observable that is notified when the bottom sheet is finished closing.\n     * @return {?}\n     */\n        function () {\n            return this._afterDismissed.asObservable();\n        };\n    /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n    /**\n     * Gets an observable that is notified when the bottom sheet has opened and appeared.\n     * @return {?}\n     */\n    MatBottomSheetRef.prototype.afterOpened = /**\n     * Gets an observable that is notified when the bottom sheet has opened and appeared.\n     * @return {?}\n     */\n        function () {\n            return this._afterOpened.asObservable();\n        };\n    /**\n     * Gets an observable that emits when the overlay's backdrop has been clicked.\n     */\n    /**\n     * Gets an observable that emits when the overlay's backdrop has been clicked.\n     * @return {?}\n     */\n    MatBottomSheetRef.prototype.backdropClick = /**\n     * Gets an observable that emits when the overlay's backdrop has been clicked.\n     * @return {?}\n     */\n        function () {\n            return this._overlayRef.backdropClick();\n        };\n    /**\n     * Gets an observable that emits when keydown events are targeted on the overlay.\n     */\n    /**\n     * Gets an observable that emits when keydown events are targeted on the overlay.\n     * @return {?}\n     */\n    MatBottomSheetRef.prototype.keydownEvents = /**\n     * Gets an observable that emits when keydown events are targeted on the overlay.\n     * @return {?}\n     */\n        function () {\n            return this._overlayRef.keydownEvents();\n        };\n    return MatBottomSheetRef;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Animations used by the Material bottom sheet.\n */\nvar /** @type {?} */ matBottomSheetAnimations = {\n    /** Animation that shows and hides a bottom sheet. */\n    bottomSheetState: /*@__PURE__*/ trigger('state', [\n        /*@__PURE__*/ state('void, hidden', /*@__PURE__*/ style({ transform: 'translateY(100%)' })),\n        /*@__PURE__*/ state('visible', /*@__PURE__*/ style({ transform: 'translateY(0%)' })),\n        /*@__PURE__*/ transition('visible => void, visible => hidden', /*@__PURE__*/ animate(AnimationDurations.COMPLEX + \" \" + AnimationCurves.ACCELERATION_CURVE)),\n        /*@__PURE__*/ transition('void => visible', /*@__PURE__*/ animate(AnimationDurations.EXITING + \" \" + AnimationCurves.DECELERATION_CURVE)),\n    ])\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * \\@docs-private\n */\nvar MatBottomSheetContainer = /*@__PURE__*/ (function (_super) {\n    __extends(MatBottomSheetContainer, _super);\n    function MatBottomSheetContainer(_elementRef, _changeDetectorRef, _focusTrapFactory, breakpointObserver, document, bottomSheetConfig) {\n        var _this = _super.call(this) || this;\n        _this._elementRef = _elementRef;\n        _this._changeDetectorRef = _changeDetectorRef;\n        _this._focusTrapFactory = _focusTrapFactory;\n        _this.bottomSheetConfig = bottomSheetConfig;\n        /**\n         * The state of the bottom sheet animations.\n         */\n        _this._animationState = 'void';\n        /**\n         * Emits whenever the state of the animation changes.\n         */\n        _this._animationStateChanged = new EventEmitter();\n        /**\n         * Element that was focused before the bottom sheet was opened.\n         */\n        _this._elementFocusedBeforeOpened = null;\n        _this._document = document;\n        _this._breakpointSubscription = breakpointObserver\n            .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n            .subscribe(function () {\n            _this._toggleClass('mat-bottom-sheet-container-medium', breakpointObserver.isMatched(Breakpoints.Medium));\n            _this._toggleClass('mat-bottom-sheet-container-large', breakpointObserver.isMatched(Breakpoints.Large));\n            _this._toggleClass('mat-bottom-sheet-container-xlarge', breakpointObserver.isMatched(Breakpoints.XLarge));\n        });\n        return _this;\n    }\n    /** Attach a component portal as content to this bottom sheet container. */\n    /**\n     * Attach a component portal as content to this bottom sheet container.\n     * @template T\n     * @param {?} portal\n     * @return {?}\n     */\n    MatBottomSheetContainer.prototype.attachComponentPortal = /**\n     * Attach a component portal as content to this bottom sheet container.\n     * @template T\n     * @param {?} portal\n     * @return {?}\n     */\n        function (portal) {\n            this._validatePortalAttached();\n            this._setPanelClass();\n            this._savePreviouslyFocusedElement();\n            return this._portalOutlet.attachComponentPortal(portal);\n        };\n    /** Attach a template portal as content to this bottom sheet container. */\n    /**\n     * Attach a template portal as content to this bottom sheet container.\n     * @template C\n     * @param {?} portal\n     * @return {?}\n     */\n    MatBottomSheetContainer.prototype.attachTemplatePortal = /**\n     * Attach a template portal as content to this bottom sheet container.\n     * @template C\n     * @param {?} portal\n     * @return {?}\n     */\n        function (portal) {\n            this._validatePortalAttached();\n            this._setPanelClass();\n            this._savePreviouslyFocusedElement();\n            return this._portalOutlet.attachTemplatePortal(portal);\n        };\n    /** Begin animation of bottom sheet entrance into view. */\n    /**\n     * Begin animation of bottom sheet entrance into view.\n     * @return {?}\n     */\n    MatBottomSheetContainer.prototype.enter = /**\n     * Begin animation of bottom sheet entrance into view.\n     * @return {?}\n     */\n        function () {\n            if (!this._destroyed) {\n                this._animationState = 'visible';\n                this._changeDetectorRef.detectChanges();\n            }\n        };\n    /** Begin animation of the bottom sheet exiting from view. */\n    /**\n     * Begin animation of the bottom sheet exiting from view.\n     * @return {?}\n     */\n    MatBottomSheetContainer.prototype.exit = /**\n     * Begin animation of the bottom sheet exiting from view.\n     * @return {?}\n     */\n        function () {\n            if (!this._destroyed) {\n                this._animationState = 'hidden';\n                this._changeDetectorRef.markForCheck();\n            }\n        };\n    /**\n     * @return {?}\n     */\n    MatBottomSheetContainer.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            this._breakpointSubscription.unsubscribe();\n            this._destroyed = true;\n        };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    MatBottomSheetContainer.prototype._onAnimationDone = /**\n     * @param {?} event\n     * @return {?}\n     */\n        function (event) {\n            if (event.toState === 'visible') {\n                this._trapFocus();\n            }\n            else if (event.toState === 'hidden') {\n                this._restoreFocus();\n            }\n            this._animationStateChanged.emit(event);\n        };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    MatBottomSheetContainer.prototype._onAnimationStart = /**\n     * @param {?} event\n     * @return {?}\n     */\n        function (event) {\n            this._animationStateChanged.emit(event);\n        };\n    /**\n     * @param {?} cssClass\n     * @param {?} add\n     * @return {?}\n     */\n    MatBottomSheetContainer.prototype._toggleClass = /**\n     * @param {?} cssClass\n     * @param {?} add\n     * @return {?}\n     */\n        function (cssClass, add) {\n            var /** @type {?} */ classList = this._elementRef.nativeElement.classList;\n            add ? classList.add(cssClass) : classList.remove(cssClass);\n        };\n    /**\n     * @return {?}\n     */\n    MatBottomSheetContainer.prototype._validatePortalAttached = /**\n     * @return {?}\n     */\n        function () {\n            if (this._portalOutlet.hasAttached()) {\n                throw Error('Attempting to attach bottom sheet content after content is already attached');\n            }\n        };\n    /**\n     * @return {?}\n     */\n    MatBottomSheetContainer.prototype._setPanelClass = /**\n     * @return {?}\n     */\n        function () {\n            var /** @type {?} */ element = this._elementRef.nativeElement;\n            var /** @type {?} */ panelClass = this.bottomSheetConfig.panelClass;\n            if (Array.isArray(panelClass)) {\n                // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n                panelClass.forEach(function (cssClass) { return element.classList.add(cssClass); });\n            }\n            else if (panelClass) {\n                element.classList.add(panelClass);\n            }\n        };\n    /**\n     * Moves the focus inside the focus trap.\n     * @return {?}\n     */\n    MatBottomSheetContainer.prototype._trapFocus = /**\n     * Moves the focus inside the focus trap.\n     * @return {?}\n     */\n        function () {\n            if (!this._focusTrap) {\n                this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n            }\n            this._focusTrap.focusInitialElementWhenReady();\n        };\n    /**\n     * Restores focus to the element that was focused before the bottom sheet opened.\n     * @return {?}\n     */\n    MatBottomSheetContainer.prototype._restoreFocus = /**\n     * Restores focus to the element that was focused before the bottom sheet opened.\n     * @return {?}\n     */\n        function () {\n            var /** @type {?} */ toFocus = this._elementFocusedBeforeOpened;\n            // We need the extra check, because IE can set the `activeElement` to null in some cases.\n            if (toFocus && typeof toFocus.focus === 'function') {\n                toFocus.focus();\n            }\n            if (this._focusTrap) {\n                this._focusTrap.destroy();\n            }\n        };\n    /**\n     * Saves a reference to the element that was focused before the bottom sheet was opened.\n     * @return {?}\n     */\n    MatBottomSheetContainer.prototype._savePreviouslyFocusedElement = /**\n     * Saves a reference to the element that was focused before the bottom sheet was opened.\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this._elementFocusedBeforeOpened = /** @type {?} */ (this._document.activeElement);\n            // The `focus` method isn't available during server-side rendering.\n            if (this._elementRef.nativeElement.focus) {\n                Promise.resolve().then(function () { return _this._elementRef.nativeElement.focus(); });\n            }\n        };\n    return MatBottomSheetContainer;\n}(BasePortalOutlet));\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Service to trigger Material Design bottom sheets.\n */\nvar MatBottomSheet = /*@__PURE__*/ (function () {\n    function MatBottomSheet(_overlay, _injector, _parentBottomSheet) {\n        this._overlay = _overlay;\n        this._injector = _injector;\n        this._parentBottomSheet = _parentBottomSheet;\n        this._bottomSheetRefAtThisLevel = null;\n    }\n    Object.defineProperty(MatBottomSheet.prototype, \"_openedBottomSheetRef\", {\n        /** Reference to the currently opened bottom sheet. */\n        get: /**\n         * Reference to the currently opened bottom sheet.\n         * @return {?}\n         */ function () {\n            var /** @type {?} */ parent = this._parentBottomSheet;\n            return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            if (this._parentBottomSheet) {\n                this._parentBottomSheet._openedBottomSheetRef = value;\n            }\n            else {\n                this._bottomSheetRefAtThisLevel = value;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @template T, D, R\n     * @param {?} componentOrTemplateRef\n     * @param {?=} config\n     * @return {?}\n     */\n    MatBottomSheet.prototype.open = /**\n     * @template T, D, R\n     * @param {?} componentOrTemplateRef\n     * @param {?=} config\n     * @return {?}\n     */\n        function (componentOrTemplateRef, config) {\n            var _this = this;\n            var /** @type {?} */ _config = _applyConfigDefaults(config);\n            var /** @type {?} */ overlayRef = this._createOverlay(_config);\n            var /** @type {?} */ container = this._attachContainer(overlayRef, _config);\n            var /** @type {?} */ ref = new MatBottomSheetRef(container, overlayRef);\n            if (componentOrTemplateRef instanceof TemplateRef) {\n                container.attachTemplatePortal(new TemplatePortal(componentOrTemplateRef, /** @type {?} */ ((null)), /** @type {?} */ ({\n                    $implicit: _config.data,\n                    bottomSheetRef: ref\n                })));\n            }\n            else {\n                var /** @type {?} */ portal = new ComponentPortal(componentOrTemplateRef, undefined, this._createInjector(_config, ref));\n                var /** @type {?} */ contentRef = container.attachComponentPortal(portal);\n                ref.instance = contentRef.instance;\n            }\n            // When the bottom sheet is dismissed, clear the reference to it.\n            ref.afterDismissed().subscribe(function () {\n                // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n                if (_this._openedBottomSheetRef == ref) {\n                    _this._openedBottomSheetRef = null;\n                }\n            });\n            if (this._openedBottomSheetRef) {\n                // If a bottom sheet is already in view, dismiss it and enter the\n                // new bottom sheet after exit animation is complete.\n                this._openedBottomSheetRef.afterDismissed().subscribe(function () { return ref.containerInstance.enter(); });\n                this._openedBottomSheetRef.dismiss();\n            }\n            else {\n                // If no bottom sheet is in view, enter the new bottom sheet.\n                ref.containerInstance.enter();\n            }\n            this._openedBottomSheetRef = ref;\n            return ref;\n        };\n    /**\n     * Dismisses the currently-visible bottom sheet.\n     */\n    /**\n     * Dismisses the currently-visible bottom sheet.\n     * @return {?}\n     */\n    MatBottomSheet.prototype.dismiss = /**\n     * Dismisses the currently-visible bottom sheet.\n     * @return {?}\n     */\n        function () {\n            if (this._openedBottomSheetRef) {\n                this._openedBottomSheetRef.dismiss();\n            }\n        };\n    /**\n     * Attaches the bottom sheet container component to the overlay.\n     * @param {?} overlayRef\n     * @param {?} config\n     * @return {?}\n     */\n    MatBottomSheet.prototype._attachContainer = /**\n     * Attaches the bottom sheet container component to the overlay.\n     * @param {?} overlayRef\n     * @param {?} config\n     * @return {?}\n     */\n        function (overlayRef, config) {\n            var /** @type {?} */ userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n            var /** @type {?} */ injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n                [MatBottomSheetConfig, config]\n            ]));\n            var /** @type {?} */ containerPortal = new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef, injector);\n            var /** @type {?} */ containerRef = overlayRef.attach(containerPortal);\n            return containerRef.instance;\n        };\n    /**\n     * Creates a new overlay and places it in the correct location.\n     * @param {?} config The user-specified bottom sheet config.\n     * @return {?}\n     */\n    MatBottomSheet.prototype._createOverlay = /**\n     * Creates a new overlay and places it in the correct location.\n     * @param {?} config The user-specified bottom sheet config.\n     * @return {?}\n     */\n        function (config) {\n            var /** @type {?} */ overlayConfig = new OverlayConfig({\n                direction: config.direction,\n                hasBackdrop: config.hasBackdrop,\n                maxWidth: '100%',\n                scrollStrategy: this._overlay.scrollStrategies.block(),\n                positionStrategy: this._overlay.position()\n                    .global()\n                    .centerHorizontally()\n                    .bottom('0')\n            });\n            if (config.backdropClass) {\n                overlayConfig.backdropClass = config.backdropClass;\n            }\n            return this._overlay.create(overlayConfig);\n        };\n    /**\n     * Creates an injector to be used inside of a bottom sheet component.\n     * @template T\n     * @param {?} config Config that was used to create the bottom sheet.\n     * @param {?} bottomSheetRef Reference to the bottom sheet.\n     * @return {?}\n     */\n    MatBottomSheet.prototype._createInjector = /**\n     * Creates an injector to be used inside of a bottom sheet component.\n     * @template T\n     * @param {?} config Config that was used to create the bottom sheet.\n     * @param {?} bottomSheetRef Reference to the bottom sheet.\n     * @return {?}\n     */\n        function (config, bottomSheetRef) {\n            var /** @type {?} */ userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n            var /** @type {?} */ injectionTokens = new WeakMap([\n                [MatBottomSheetRef, bottomSheetRef],\n                [MAT_BOTTOM_SHEET_DATA, config.data]\n            ]);\n            if (config.direction &&\n                (!userInjector || !userInjector.get(Directionality, null))) {\n                injectionTokens.set(Directionality, {\n                    value: config.direction,\n                    change: of()\n                });\n            }\n            return new PortalInjector(userInjector || this._injector, injectionTokens);\n        };\n    return MatBottomSheet;\n}());\n/**\n * Applies default options to the bottom sheet config.\n * @param {?=} config The configuration to which the defaults will be applied.\n * @return {?} The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(config) {\n    return __assign({}, new MatBottomSheetConfig(), config);\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar MatBottomSheetModule = /*@__PURE__*/ (function () {\n    function MatBottomSheetModule() {\n    }\n    return MatBottomSheetModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nexport { MatBottomSheetModule, MatBottomSheet, MAT_BOTTOM_SHEET_DATA, MatBottomSheetConfig, MatBottomSheetContainer, matBottomSheetAnimations, MatBottomSheetRef };\n//# sourceMappingURL=bottom-sheet.es5.js.map\n",null]}