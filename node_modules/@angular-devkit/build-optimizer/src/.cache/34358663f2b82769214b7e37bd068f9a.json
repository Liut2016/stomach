{"remainingRequest":"/home/liutao/Project/0/oncology/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/home/liutao/Project/0/oncology/node_modules/ts-debug/debug.js","dependencies":[{"path":"/home/liutao/Project/0/oncology/node_modules/ts-debug/debug.js","mtime":499162500000},{"path":"/home/liutao/Project/0/oncology/node_modules/cache-loader/dist/cjs.js","mtime":1539266424898},{"path":"/home/liutao/Project/0/oncology/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1526531406000}],"contextDependencies":[],"result":["var Debugger = /*@__PURE__*/ (function () {\n    function Debugger(console, isEnabled, prefix) {\n        if (isEnabled === void 0) {\n            isEnabled = true;\n        }\n        if (prefix === void 0) {\n            prefix = '';\n        }\n        this.prefix = '';\n        this.console = console;\n        this.isEnabled = isEnabled;\n        this.prefix = prefix;\n    }\n    Object.defineProperty(Debugger.prototype, \"memory\", {\n        get: function () {\n            return this.doIfEnabled(function () { return console.hasOwnProperty('memory') && console.memory; });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Debugger.prototype.assert = function (value, message) {\n        var _this = this;\n        var optionalParams = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            optionalParams[_i - 2] = arguments[_i];\n        }\n        return this.doIfEnabled(function () {\n            return (_a = _this.console).assert.apply(_a, [value, message].concat(optionalParams));\n            var _a;\n        });\n    };\n    Debugger.prototype.countReset = function (label) {\n        var _this = this;\n        return this.doIfEnabled(function () { return _this.console.countReset(label); });\n    };\n    Debugger.prototype.dir = function (obj) {\n        var _this = this;\n        var options = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            options[_i - 1] = arguments[_i];\n        }\n        return this.doIfEnabled(function () {\n            return (_a = _this.console).dir.apply(_a, [obj].concat(options));\n            var _a;\n        });\n    };\n    Debugger.prototype.error = function (message) {\n        var _this = this;\n        var optionalParams = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            optionalParams[_i - 1] = arguments[_i];\n        }\n        return this.doIfEnabled(function () {\n            return (_a = _this.console).error.apply(_a, [_this.addPrefix(message)].concat(optionalParams));\n            var _a;\n        });\n    };\n    Debugger.prototype.info = function (message) {\n        var _this = this;\n        var optionalParams = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            optionalParams[_i - 1] = arguments[_i];\n        }\n        return this.doIfEnabled(function () {\n            return (_a = _this.console).info.apply(_a, [_this.addPrefix(message)].concat(optionalParams));\n            var _a;\n        });\n    };\n    Debugger.prototype.log = function (message) {\n        var _this = this;\n        var optionalParams = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            optionalParams[_i - 1] = arguments[_i];\n        }\n        return this.doIfEnabled(function () {\n            return (_a = _this.console).log.apply(_a, [_this.addPrefix(message)].concat(optionalParams));\n            var _a;\n        });\n    };\n    Debugger.prototype.time = function (label) {\n        var _this = this;\n        return this.doIfEnabled(function () { return _this.console.time(label); });\n    };\n    Debugger.prototype.timeEnd = function (label) {\n        var _this = this;\n        return this.doIfEnabled(function () { return _this.console.timeEnd(label); });\n    };\n    Debugger.prototype.timeStamp = function (label) {\n        var _this = this;\n        return this.doIfEnabled(function () { return _this.console.timeStamp(label); });\n    };\n    Debugger.prototype.timeline = function (label) {\n        var _this = this;\n        return this.doIfEnabled(function () { return _this.console.timeline(label); });\n    };\n    Debugger.prototype.timelineEnd = function (label) {\n        var _this = this;\n        return this.doIfEnabled(function () { return _this.console.timelineEnd(label); });\n    };\n    Debugger.prototype.trace = function (message) {\n        var _this = this;\n        var optionalParams = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            optionalParams[_i - 1] = arguments[_i];\n        }\n        return this.doIfEnabled(function () {\n            return (_a = _this.console).trace.apply(_a, [_this.addPrefix(message)].concat(optionalParams));\n            var _a;\n        });\n    };\n    Debugger.prototype.warn = function (message) {\n        var _this = this;\n        var optionalParams = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            optionalParams[_i - 1] = arguments[_i];\n        }\n        return this.doIfEnabled(function () {\n            return (_a = _this.console).warn.apply(_a, [_this.addPrefix(message)].concat(optionalParams));\n            var _a;\n        });\n    };\n    Debugger.prototype.clear = function () {\n        var _this = this;\n        return this.doIfEnabled(function () { return _this.console.clear(); });\n    };\n    Debugger.prototype.count = function (countTitle) {\n        var _this = this;\n        return this.doIfEnabled(function () { return _this.console.count(); });\n    };\n    Debugger.prototype.debug = function (message) {\n        var _this = this;\n        var optionalParams = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            optionalParams[_i - 1] = arguments[_i];\n        }\n        return this.doIfEnabled(function () {\n            return (_a = _this.console).debug.apply(_a, [_this.addPrefix(message)].concat(optionalParams));\n            var _a;\n        });\n    };\n    Debugger.prototype.dirxml = function (value) {\n        var _this = this;\n        return this.doIfEnabled(function () { return _this.console.dirxml(value); });\n    };\n    Debugger.prototype.exception = function (message) {\n        var _this = this;\n        var optionalParams = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            optionalParams[_i - 1] = arguments[_i];\n        }\n        return this.doIfEnabled(function () {\n            return (_a = _this.console).exception.apply(_a, [_this.addPrefix(message)].concat(optionalParams));\n            var _a;\n        });\n    };\n    Debugger.prototype.group = function (groupTitle) {\n        var _this = this;\n        return this.doIfEnabled(function () { return _this.console.group(groupTitle); });\n    };\n    Debugger.prototype.groupCollapsed = function (groupTitle) {\n        var _this = this;\n        return this.doIfEnabled(function () { return _this.console.groupCollapsed(groupTitle); });\n    };\n    Debugger.prototype.groupEnd = function () {\n        var _this = this;\n        return this.doIfEnabled(function () { return _this.console.groupEnd(); });\n    };\n    Debugger.prototype.markTimeline = function (label) {\n        var _this = this;\n        return this.doIfEnabled(function () { return _this.console.markTimeline(label); });\n    };\n    Debugger.prototype.msIsIndependentlyComposed = function (element) {\n        var _this = this;\n        return this.doIfEnabled(function () { return _this.console.msIsIndependentlyComposed(element); });\n    };\n    Debugger.prototype.profile = function (reportName) {\n        var _this = this;\n        return this.doIfEnabled(function () { return _this.console.profile(reportName); });\n    };\n    Debugger.prototype.profileEnd = function () {\n        var _this = this;\n        return this.doIfEnabled(function () { return _this.console.profileEnd(); });\n    };\n    Debugger.prototype.select = function (element) {\n        var _this = this;\n        return this.doIfEnabled(function () { return _this.console.select(element); });\n    };\n    Debugger.prototype.table = function () {\n        var _this = this;\n        var data = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            data[_i] = arguments[_i];\n        }\n        return this.doIfEnabled(function () {\n            return (_a = _this.console).table.apply(_a, data);\n            var _a;\n        });\n    };\n    /**\n     * Throws usual error in debug mode and non-blocking otherwise\n     * @param {Error} error\n     */\n    Debugger.prototype.throw = function (error) {\n        error.message = this.addPrefix(error.message);\n        if (this.isEnabled) {\n            throw error;\n        }\n        setTimeout(function () {\n            throw error;\n        });\n    };\n    Debugger.prototype.doIfEnabled = function (action) {\n        if (this.isEnabled) {\n            return action();\n        }\n    };\n    Debugger.prototype.addPrefix = function (message) {\n        if (this.prefix && (typeof message === 'string' || !message)) {\n            return this.prefix + message;\n        }\n        return message;\n    };\n    return Debugger;\n}());\nexport { Debugger };\n",null]}