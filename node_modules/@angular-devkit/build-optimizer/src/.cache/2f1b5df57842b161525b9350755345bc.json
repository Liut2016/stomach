{"remainingRequest":"/home/liutao/Project/0/oncology/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/home/liutao/Project/0/oncology/node_modules/@angular/material/esm5/checkbox.es5.js","dependencies":[{"path":"/home/liutao/Project/0/oncology/node_modules/@angular/material/esm5/checkbox.es5.js","mtime":1526941038000},{"path":"/home/liutao/Project/0/oncology/node_modules/cache-loader/dist/cjs.js","mtime":1539266424898},{"path":"/home/liutao/Project/0/oncology/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1526531406000}],"contextDependencies":[],"result":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** PURE_IMPORTS_START _angular_core,tslib,_angular_cdk_a11y,_angular_cdk_coercion,_angular_forms,_angular_material_core,_angular_platform_browser_animations,_angular_cdk_observers,_angular_common PURE_IMPORTS_END */\nimport { InjectionToken, Attribute, ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, forwardRef, Inject, Input, Optional, Output, ViewChild, ViewEncapsulation, Directive, NgModule } from '@angular/core';\nimport { __extends } from 'tslib';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { NG_VALUE_ACCESSOR, CheckboxRequiredValidator, NG_VALIDATORS } from '@angular/forms';\nimport { MatRipple, mixinColor, mixinDisabled, mixinDisableRipple, mixinTabIndex, MatCommonModule, MatRippleModule } from '@angular/material/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { ObserversModule } from '@angular/cdk/observers';\nimport { CommonModule } from '@angular/common';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nvar /** @type {?} */ MAT_CHECKBOX_CLICK_ACTION = /*@__PURE__*/ new InjectionToken('mat-checkbox-click-action');\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n// Increasing integer for generating unique ids for checkbox components.\nvar /** @type {?} */ nextUniqueId = 0;\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * \\@docs-private\n */\nvar /** @type {?} */ MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: /*@__PURE__*/ forwardRef(function () { return MatCheckbox; }),\n    multi: true\n};\n/** @enum {number} */\nvar TransitionCheckState = /*@__PURE__*/ (function () {\n    var TransitionCheckState = {\n        /** The initial state of the component before any user interaction. */\n        Init: 0,\n        /** The state representing the component when it's becoming checked. */\n        Checked: 1,\n        /** The state representing the component when it's becoming unchecked. */\n        Unchecked: 2,\n        /** The state representing the component when it's becoming indeterminate. */\n        Indeterminate: 3,\n    };\n    TransitionCheckState[TransitionCheckState.Init] = \"Init\";\n    TransitionCheckState[TransitionCheckState.Checked] = \"Checked\";\n    TransitionCheckState[TransitionCheckState.Unchecked] = \"Unchecked\";\n    TransitionCheckState[TransitionCheckState.Indeterminate] = \"Indeterminate\";\n    return TransitionCheckState;\n}());\n/**\n * Change event object emitted by MatCheckbox.\n */\nvar /**\n * Change event object emitted by MatCheckbox.\n */ MatCheckboxChange = /*@__PURE__*/ (function () {\n    function MatCheckboxChange() {\n    }\n    return MatCheckboxChange;\n}());\n/**\n * \\@docs-private\n */\nvar /**\n * \\@docs-private\n */ MatCheckboxBase = /*@__PURE__*/ (function () {\n    function MatCheckboxBase(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n    return MatCheckboxBase;\n}());\nvar /** @type {?} */ _MatCheckboxMixinBase = /*@__PURE__*/ mixinTabIndex(/*@__PURE__*/ mixinColor(/*@__PURE__*/ mixinDisableRipple(/*@__PURE__*/ mixinDisabled(MatCheckboxBase)), 'accent'));\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\nvar MatCheckbox = /*@__PURE__*/ (function (_super) {\n    __extends(MatCheckbox, _super);\n    function MatCheckbox(elementRef, _changeDetectorRef, _focusMonitor, tabIndex, _clickAction, _animationMode) {\n        var _this = _super.call(this, elementRef) || this;\n        _this._changeDetectorRef = _changeDetectorRef;\n        _this._focusMonitor = _focusMonitor;\n        _this._clickAction = _clickAction;\n        _this._animationMode = _animationMode;\n        /**\n         * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n         * take precedence so this may be omitted.\n         */\n        _this.ariaLabel = '';\n        /**\n         * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n         */\n        _this.ariaLabelledby = null;\n        _this._uniqueId = \"mat-checkbox-\" + ++nextUniqueId;\n        /**\n         * A unique id for the checkbox input. If none is supplied, it will be auto-generated.\n         */\n        _this.id = _this._uniqueId;\n        /**\n         * Whether the label should appear after or before the checkbox. Defaults to 'after'\n         */\n        _this.labelPosition = 'after';\n        /**\n         * Name value will be applied to the input element if present\n         */\n        _this.name = null;\n        /**\n         * Event emitted when the checkbox's `checked` value changes.\n         */\n        _this.change = new EventEmitter();\n        /**\n         * Event emitted when the checkbox's `indeterminate` value changes.\n         */\n        _this.indeterminateChange = new EventEmitter();\n        /**\n         * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n         * \\@docs-private\n         */\n        _this._onTouched = function () { };\n        _this._currentAnimationClass = '';\n        _this._currentCheckState = TransitionCheckState.Init;\n        _this._controlValueAccessorChangeFn = function () { };\n        _this._checked = false;\n        _this._disabled = false;\n        _this._indeterminate = false;\n        _this.tabIndex = parseInt(tabIndex) || 0;\n        return _this;\n    }\n    Object.defineProperty(MatCheckbox.prototype, \"inputId\", {\n        /** Returns the unique id for the visual hidden input. */\n        get: /**\n         * Returns the unique id for the visual hidden input.\n         * @return {?}\n         */ function () { return (this.id || this._uniqueId) + \"-input\"; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatCheckbox.prototype, \"required\", {\n        get: /**\n         * Whether the checkbox is required.\n         * @return {?}\n         */ function () { return this._required; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) { this._required = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MatCheckbox.prototype.ngAfterViewInit = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this._focusMonitor\n                .monitor(this._inputElement.nativeElement)\n                .subscribe(function (focusOrigin) { return _this._onInputFocusChange(focusOrigin); });\n        };\n    /**\n     * @return {?}\n     */\n    MatCheckbox.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n        };\n    Object.defineProperty(MatCheckbox.prototype, \"checked\", {\n        get: /**\n         * Whether the checkbox is checked.\n         * @return {?}\n         */ function () { return this._checked; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            if (value != this.checked) {\n                this._checked = value;\n                this._changeDetectorRef.markForCheck();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatCheckbox.prototype, \"disabled\", {\n        get: /**\n         * Whether the checkbox is disabled. This fully overrides the implementation provided by\n         * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n         * @return {?}\n         */ function () { return this._disabled; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            if (value != this.disabled) {\n                this._disabled = value;\n                this._changeDetectorRef.markForCheck();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatCheckbox.prototype, \"indeterminate\", {\n        get: /**\n         * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n         * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n         * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n         * set to false.\n         * @return {?}\n         */ function () { return this._indeterminate; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            var /** @type {?} */ changed = value != this._indeterminate;\n            this._indeterminate = value;\n            if (changed) {\n                if (this._indeterminate) {\n                    this._transitionCheckState(TransitionCheckState.Indeterminate);\n                }\n                else {\n                    this._transitionCheckState(this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n                }\n                this.indeterminateChange.emit(this._indeterminate);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MatCheckbox.prototype._isRippleDisabled = /**\n     * @return {?}\n     */\n        function () {\n            return this.disableRipple || this.disabled;\n        };\n    /** Method being called whenever the label text changes. */\n    /**\n     * Method being called whenever the label text changes.\n     * @return {?}\n     */\n    MatCheckbox.prototype._onLabelTextChange = /**\n     * Method being called whenever the label text changes.\n     * @return {?}\n     */\n        function () {\n            // This method is getting called whenever the label of the checkbox changes.\n            // Since the checkbox uses the OnPush strategy we need to notify it about the change\n            // that has been recognized by the cdkObserveContent directive.\n            this._changeDetectorRef.markForCheck();\n        };\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    MatCheckbox.prototype.writeValue = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            this.checked = !!value;\n        };\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    MatCheckbox.prototype.registerOnChange = /**\n     * @param {?} fn\n     * @return {?}\n     */\n        function (fn) {\n            this._controlValueAccessorChangeFn = fn;\n        };\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    MatCheckbox.prototype.registerOnTouched = /**\n     * @param {?} fn\n     * @return {?}\n     */\n        function (fn) {\n            this._onTouched = fn;\n        };\n    // Implemented as part of ControlValueAccessor.\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    MatCheckbox.prototype.setDisabledState = /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n        function (isDisabled) {\n            this.disabled = isDisabled;\n        };\n    /**\n     * @return {?}\n     */\n    MatCheckbox.prototype._getAriaChecked = /**\n     * @return {?}\n     */\n        function () {\n            return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n        };\n    /**\n     * @param {?} newState\n     * @return {?}\n     */\n    MatCheckbox.prototype._transitionCheckState = /**\n     * @param {?} newState\n     * @return {?}\n     */\n        function (newState) {\n            var /** @type {?} */ oldState = this._currentCheckState;\n            var /** @type {?} */ element = this._elementRef.nativeElement;\n            if (oldState === newState) {\n                return;\n            }\n            if (this._currentAnimationClass.length > 0) {\n                element.classList.remove(this._currentAnimationClass);\n            }\n            this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(oldState, newState);\n            this._currentCheckState = newState;\n            if (this._currentAnimationClass.length > 0) {\n                element.classList.add(this._currentAnimationClass);\n            }\n        };\n    /**\n     * @return {?}\n     */\n    MatCheckbox.prototype._emitChangeEvent = /**\n     * @return {?}\n     */\n        function () {\n            var /** @type {?} */ event = new MatCheckboxChange();\n            event.source = this;\n            event.checked = this.checked;\n            this._controlValueAccessorChangeFn(this.checked);\n            this.change.emit(event);\n        };\n    /**\n     * Function is called whenever the focus changes for the input element.\n     * @param {?} focusOrigin\n     * @return {?}\n     */\n    MatCheckbox.prototype._onInputFocusChange = /**\n     * Function is called whenever the focus changes for the input element.\n     * @param {?} focusOrigin\n     * @return {?}\n     */\n        function (focusOrigin) {\n            // TODO(paul): support `program`. See https://github.com/angular/material2/issues/9889\n            if (!this._focusRipple && focusOrigin === 'keyboard') {\n                this._focusRipple = this.ripple.launch(0, 0, { persistent: true });\n            }\n            else if (!focusOrigin) {\n                if (this._focusRipple) {\n                    this._focusRipple.fadeOut();\n                    this._focusRipple = null;\n                }\n                this._onTouched();\n            }\n        };\n    /** Toggles the `checked` state of the checkbox. */\n    /**\n     * Toggles the `checked` state of the checkbox.\n     * @return {?}\n     */\n    MatCheckbox.prototype.toggle = /**\n     * Toggles the `checked` state of the checkbox.\n     * @return {?}\n     */\n        function () {\n            this.checked = !this.checked;\n        };\n    /**\n     * Event handler for checkbox input element.\n     * Toggles checked state if element is not disabled.\n     * Do not toggle on (change) event since IE doesn't fire change event when\n     *   indeterminate checkbox is clicked.\n     * @param event\n     */\n    /**\n     * Event handler for checkbox input element.\n     * Toggles checked state if element is not disabled.\n     * Do not toggle on (change) event since IE doesn't fire change event when\n     *   indeterminate checkbox is clicked.\n     * @param {?} event\n     * @return {?}\n     */\n    MatCheckbox.prototype._onInputClick = /**\n     * Event handler for checkbox input element.\n     * Toggles checked state if element is not disabled.\n     * Do not toggle on (change) event since IE doesn't fire change event when\n     *   indeterminate checkbox is clicked.\n     * @param {?} event\n     * @return {?}\n     */\n        function (event) {\n            var _this = this;\n            // We have to stop propagation for click events on the visual hidden input element.\n            // By default, when a user clicks on a label element, a generated click event will be\n            // dispatched on the associated input element. Since we are using a label element as our\n            // root container, the click event on the `checkbox` will be executed twice.\n            // The real click event will bubble up, and the generated click event also tries to bubble up.\n            // This will lead to multiple click events.\n            // Preventing bubbling for the second event will solve that issue.\n            event.stopPropagation();\n            // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n            if (!this.disabled && this._clickAction !== 'noop') {\n                // When user manually click on the checkbox, `indeterminate` is set to false.\n                if (this.indeterminate && this._clickAction !== 'check') {\n                    Promise.resolve().then(function () {\n                        _this._indeterminate = false;\n                        _this.indeterminateChange.emit(_this._indeterminate);\n                    });\n                }\n                this.toggle();\n                this._transitionCheckState(this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n                // Emit our custom change event if the native input emitted one.\n                // It is important to only emit it, if the native input triggered one, because\n                // we don't want to trigger a change event, when the `checked` variable changes for example.\n                this._emitChangeEvent();\n            }\n            else if (!this.disabled && this._clickAction === 'noop') {\n                // Reset native input when clicked with noop. The native checkbox becomes checked after\n                // click, reset it to be align with `checked` value of `mat-checkbox`.\n                this._inputElement.nativeElement.checked = this.checked;\n                this._inputElement.nativeElement.indeterminate = this.indeterminate;\n            }\n        };\n    /** Focuses the checkbox. */\n    /**\n     * Focuses the checkbox.\n     * @return {?}\n     */\n    MatCheckbox.prototype.focus = /**\n     * Focuses the checkbox.\n     * @return {?}\n     */\n        function () {\n            this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n        };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    MatCheckbox.prototype._onInteractionEvent = /**\n     * @param {?} event\n     * @return {?}\n     */\n        function (event) {\n            // We always have to stop propagation on the change event.\n            // Otherwise the change event, from the input element, will bubble up and\n            // emit its event object to the `change` output.\n            event.stopPropagation();\n        };\n    /**\n     * @param {?} oldState\n     * @param {?} newState\n     * @return {?}\n     */\n    MatCheckbox.prototype._getAnimationClassForCheckStateTransition = /**\n     * @param {?} oldState\n     * @param {?} newState\n     * @return {?}\n     */\n        function (oldState, newState) {\n            // Don't transition if animations are disabled.\n            if (this._animationMode === 'NoopAnimations') {\n                return '';\n            }\n            var /** @type {?} */ animSuffix = '';\n            switch (oldState) {\n                case TransitionCheckState.Init:\n                    // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n                    // [checked] bound to it.\n                    if (newState === TransitionCheckState.Checked) {\n                        animSuffix = 'unchecked-checked';\n                    }\n                    else if (newState == TransitionCheckState.Indeterminate) {\n                        animSuffix = 'unchecked-indeterminate';\n                    }\n                    else {\n                        return '';\n                    }\n                    break;\n                case TransitionCheckState.Unchecked:\n                    animSuffix = newState === TransitionCheckState.Checked ?\n                        'unchecked-checked' : 'unchecked-indeterminate';\n                    break;\n                case TransitionCheckState.Checked:\n                    animSuffix = newState === TransitionCheckState.Unchecked ?\n                        'checked-unchecked' : 'checked-indeterminate';\n                    break;\n                case TransitionCheckState.Indeterminate:\n                    animSuffix = newState === TransitionCheckState.Checked ?\n                        'indeterminate-checked' : 'indeterminate-unchecked';\n                    break;\n            }\n            return \"mat-checkbox-anim-\" + animSuffix;\n        };\n    return MatCheckbox;\n}(_MatCheckboxMixinBase));\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar /** @type {?} */ MAT_CHECKBOX_REQUIRED_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: /*@__PURE__*/ forwardRef(function () { return MatCheckboxRequiredValidator; }),\n    multi: true\n};\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\nvar MatCheckboxRequiredValidator = /*@__PURE__*/ (function (_super) {\n    __extends(MatCheckboxRequiredValidator, _super);\n    function MatCheckboxRequiredValidator() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return MatCheckboxRequiredValidator;\n}(CheckboxRequiredValidator));\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar MatCheckboxModule = /*@__PURE__*/ (function () {\n    function MatCheckboxModule() {\n    }\n    return MatCheckboxModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nexport { MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR, TransitionCheckState, MatCheckboxChange, MatCheckboxBase, _MatCheckboxMixinBase, MatCheckbox, MAT_CHECKBOX_CLICK_ACTION, MatCheckboxModule, MAT_CHECKBOX_REQUIRED_VALIDATOR, MatCheckboxRequiredValidator };\n//# sourceMappingURL=checkbox.es5.js.map\n",null]}