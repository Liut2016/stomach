{"remainingRequest":"/home/liutao/Project/0/oncology/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/home/liutao/Project/0/oncology/node_modules/@angular/material/esm5/sort.es5.js","dependencies":[{"path":"/home/liutao/Project/0/oncology/node_modules/@angular/material/esm5/sort.es5.js","mtime":1526941038000},{"path":"/home/liutao/Project/0/oncology/node_modules/cache-loader/dist/cjs.js","mtime":1539266424898},{"path":"/home/liutao/Project/0/oncology/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1526531406000}],"contextDependencies":[],"result":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** PURE_IMPORTS_START tslib,_angular_core,_angular_cdk_coercion,_angular_material_core,rxjs,_angular_animations,_angular_cdk_table,_angular_common PURE_IMPORTS_END */\nimport { __extends } from 'tslib';\nimport { Directive, EventEmitter, Input, isDevMode, Output, Injectable, SkipSelf, Optional, NgModule, ChangeDetectionStrategy, ChangeDetectorRef, Component, ViewEncapsulation, defineInjectable } from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { mixinDisabled, mixinInitialized, AnimationCurves, AnimationDurations } from '@angular/material/core';\nimport { Subject, merge } from 'rxjs';\nimport { animate, state, style, transition, trigger, keyframes, query, animateChild } from '@angular/animations';\nimport { CdkColumnDef } from '@angular/cdk/table';\nimport { CommonModule } from '@angular/common';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@docs-private\n * @param {?} id\n * @return {?}\n */\nfunction getSortDuplicateSortableIdError(id) {\n    return Error(\"Cannot have two MatSortables with the same id (\" + id + \").\");\n}\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction getSortHeaderNotContainedWithinSortError() {\n    return Error(\"MatSortHeader must be placed within a parent element with the MatSort directive.\");\n}\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction getSortHeaderMissingIdError() {\n    return Error(\"MatSortHeader must be provided with a unique id.\");\n}\n/**\n * \\@docs-private\n * @param {?} direction\n * @return {?}\n */\nfunction getSortInvalidDirectionError(direction) {\n    return Error(direction + \" is not a valid sort direction ('asc' or 'desc').\");\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@docs-private\n */\nvar /**\n * \\@docs-private\n */ MatSortBase = /*@__PURE__*/ (function () {\n    function MatSortBase() {\n    }\n    return MatSortBase;\n}());\nvar /** @type {?} */ _MatSortMixinBase = /*@__PURE__*/ mixinInitialized(/*@__PURE__*/ mixinDisabled(MatSortBase));\n/**\n * Container for MatSortables to manage the sort state and provide default sort parameters.\n */\nvar MatSort = /*@__PURE__*/ (function (_super) {\n    __extends(MatSort, _super);\n    function MatSort() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        /**\n         * Collection of all registered sortables that this directive manages.\n         */\n        _this.sortables = new Map();\n        /**\n         * Used to notify any child components listening to state changes.\n         */\n        _this._stateChanges = new Subject();\n        /**\n         * The direction to set when an MatSortable is initially sorted.\n         * May be overriden by the MatSortable's sort start.\n         */\n        _this.start = 'asc';\n        _this._direction = '';\n        /**\n         * Event emitted when the user changes either the active sort or sort direction.\n         */\n        _this.sortChange = new EventEmitter();\n        return _this;\n    }\n    Object.defineProperty(MatSort.prototype, \"direction\", {\n        get: /**\n         * The sort direction of the currently active MatSortable.\n         * @return {?}\n         */ function () { return this._direction; },\n        set: /**\n         * @param {?} direction\n         * @return {?}\n         */ function (direction) {\n            if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n                throw getSortInvalidDirectionError(direction);\n            }\n            this._direction = direction;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatSort.prototype, \"disableClear\", {\n        get: /**\n         * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n         * May be overriden by the MatSortable's disable clear input.\n         * @return {?}\n         */ function () { return this._disableClear; },\n        set: /**\n         * @param {?} v\n         * @return {?}\n         */ function (v) { this._disableClear = coerceBooleanProperty(v); },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n     * collection of MatSortables.\n     */\n    /**\n     * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n     * collection of MatSortables.\n     * @param {?} sortable\n     * @return {?}\n     */\n    MatSort.prototype.register = /**\n     * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n     * collection of MatSortables.\n     * @param {?} sortable\n     * @return {?}\n     */\n        function (sortable) {\n            if (!sortable.id) {\n                throw getSortHeaderMissingIdError();\n            }\n            if (this.sortables.has(sortable.id)) {\n                throw getSortDuplicateSortableIdError(sortable.id);\n            }\n            this.sortables.set(sortable.id, sortable);\n        };\n    /**\n     * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n     * collection of contained MatSortables.\n     */\n    /**\n     * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n     * collection of contained MatSortables.\n     * @param {?} sortable\n     * @return {?}\n     */\n    MatSort.prototype.deregister = /**\n     * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n     * collection of contained MatSortables.\n     * @param {?} sortable\n     * @return {?}\n     */\n        function (sortable) {\n            this.sortables.delete(sortable.id);\n        };\n    /** Sets the active sort id and determines the new sort direction. */\n    /**\n     * Sets the active sort id and determines the new sort direction.\n     * @param {?} sortable\n     * @return {?}\n     */\n    MatSort.prototype.sort = /**\n     * Sets the active sort id and determines the new sort direction.\n     * @param {?} sortable\n     * @return {?}\n     */\n        function (sortable) {\n            if (this.active != sortable.id) {\n                this.active = sortable.id;\n                this.direction = sortable.start ? sortable.start : this.start;\n            }\n            else {\n                this.direction = this.getNextSortDirection(sortable);\n            }\n            this.sortChange.emit({ active: this.active, direction: this.direction });\n        };\n    /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n    /**\n     * Returns the next sort direction of the active sortable, checking for potential overrides.\n     * @param {?} sortable\n     * @return {?}\n     */\n    MatSort.prototype.getNextSortDirection = /**\n     * Returns the next sort direction of the active sortable, checking for potential overrides.\n     * @param {?} sortable\n     * @return {?}\n     */\n        function (sortable) {\n            if (!sortable) {\n                return '';\n            }\n            // Get the sort direction cycle with the potential sortable overrides.\n            var /** @type {?} */ disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n            var /** @type {?} */ sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n            // Get and return the next direction in the cycle\n            var /** @type {?} */ nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n            if (nextDirectionIndex >= sortDirectionCycle.length) {\n                nextDirectionIndex = 0;\n            }\n            return sortDirectionCycle[nextDirectionIndex];\n        };\n    /**\n     * @return {?}\n     */\n    MatSort.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            this._markInitialized();\n        };\n    /**\n     * @return {?}\n     */\n    MatSort.prototype.ngOnChanges = /**\n     * @return {?}\n     */\n        function () {\n            this._stateChanges.next();\n        };\n    /**\n     * @return {?}\n     */\n    MatSort.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            this._stateChanges.complete();\n        };\n    return MatSort;\n}(_MatSortMixinBase));\n/**\n * Returns the sort direction cycle to use given the provided parameters of order and clear.\n * @param {?} start\n * @param {?} disableClear\n * @return {?}\n */\nfunction getSortDirectionCycle(start, disableClear) {\n    var /** @type {?} */ sortOrder = ['asc', 'desc'];\n    if (start == 'desc') {\n        sortOrder.reverse();\n    }\n    if (!disableClear) {\n        sortOrder.push('');\n    }\n    return sortOrder;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar /** @type {?} */ SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n    AnimationCurves.STANDARD_CURVE;\n/**\n * Animations used by MatSort.\n */\nvar /** @type {?} */ matSortAnimations = {\n    /** Animation that moves the sort indicator. */\n    indicator: /*@__PURE__*/ trigger('indicator', [\n        /*@__PURE__*/ state('active-asc, asc', /*@__PURE__*/ style({ transform: 'translateY(0px)' })),\n        // 10px is the height of the sort indicator, minus the width of the pointers\n        /*@__PURE__*/ state('active-desc, desc', /*@__PURE__*/ style({ transform: 'translateY(10px)' })),\n        /*@__PURE__*/ transition('active-asc <=> active-desc', /*@__PURE__*/ animate(SORT_ANIMATION_TRANSITION))\n    ]),\n    /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n    leftPointer: /*@__PURE__*/ trigger('leftPointer', [\n        /*@__PURE__*/ state('active-asc, asc', /*@__PURE__*/ style({ transform: 'rotate(-45deg)' })),\n        /*@__PURE__*/ state('active-desc, desc', /*@__PURE__*/ style({ transform: 'rotate(45deg)' })),\n        /*@__PURE__*/ transition('active-asc <=> active-desc', /*@__PURE__*/ animate(SORT_ANIMATION_TRANSITION))\n    ]),\n    /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n    rightPointer: /*@__PURE__*/ trigger('rightPointer', [\n        /*@__PURE__*/ state('active-asc, asc', /*@__PURE__*/ style({ transform: 'rotate(45deg)' })),\n        /*@__PURE__*/ state('active-desc, desc', /*@__PURE__*/ style({ transform: 'rotate(-45deg)' })),\n        /*@__PURE__*/ transition('active-asc <=> active-desc', /*@__PURE__*/ animate(SORT_ANIMATION_TRANSITION))\n    ]),\n    /** Animation that controls the arrow opacity. */\n    arrowOpacity: /*@__PURE__*/ trigger('arrowOpacity', [\n        /*@__PURE__*/ state('desc-to-active, asc-to-active, active', /*@__PURE__*/ style({ opacity: 1 })),\n        /*@__PURE__*/ state('desc-to-hint, asc-to-hint, hint', /*@__PURE__*/ style({ opacity: .54 })),\n        /*@__PURE__*/ state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc', /*@__PURE__*/ style({ opacity: 0 })),\n        // Transition between all states except for immediate transitions\n        /*@__PURE__*/ transition('* => asc, * => desc, * => active, * => hint', /*@__PURE__*/ animate('0ms')),\n        /*@__PURE__*/ transition('* <=> *', /*@__PURE__*/ animate(SORT_ANIMATION_TRANSITION))\n    ]),\n    /**\n       * Animation for the translation of the arrow as a whole. States are separated into two\n       * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n       * peek, and active. The other states define a specific animation (source-to-destination)\n       * and are determined as a function of their prev user-perceived state and what the next state\n       * should be.\n       */\n    arrowPosition: /*@__PURE__*/ trigger('arrowPosition', [\n        // Hidden Above => Hint Center\n        /*@__PURE__*/ transition('* => desc-to-hint, * => desc-to-active', /*@__PURE__*/ animate(SORT_ANIMATION_TRANSITION, /*@__PURE__*/ keyframes([\n            /*@__PURE__*/ style({ transform: 'translateY(-25%)' }),\n            /*@__PURE__*/ style({ transform: 'translateY(0)' })\n        ]))),\n        // Hint Center => Hidden Below\n        /*@__PURE__*/ transition('* => hint-to-desc, * => active-to-desc', /*@__PURE__*/ animate(SORT_ANIMATION_TRANSITION, /*@__PURE__*/ keyframes([\n            /*@__PURE__*/ style({ transform: 'translateY(0)' }),\n            /*@__PURE__*/ style({ transform: 'translateY(25%)' })\n        ]))),\n        // Hidden Below => Hint Center\n        /*@__PURE__*/ transition('* => asc-to-hint, * => asc-to-active', /*@__PURE__*/ animate(SORT_ANIMATION_TRANSITION, /*@__PURE__*/ keyframes([\n            /*@__PURE__*/ style({ transform: 'translateY(25%)' }),\n            /*@__PURE__*/ style({ transform: 'translateY(0)' })\n        ]))),\n        // Hint Center => Hidden Above\n        /*@__PURE__*/ transition('* => hint-to-asc, * => active-to-asc', /*@__PURE__*/ animate(SORT_ANIMATION_TRANSITION, /*@__PURE__*/ keyframes([\n            /*@__PURE__*/ style({ transform: 'translateY(0)' }),\n            /*@__PURE__*/ style({ transform: 'translateY(-25%)' })\n        ]))),\n        /*@__PURE__*/ state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active', /*@__PURE__*/ style({ transform: 'translateY(0)' })),\n        /*@__PURE__*/ state('hint-to-desc, active-to-desc, desc', /*@__PURE__*/ style({ transform: 'translateY(-25%)' })),\n        /*@__PURE__*/ state('hint-to-asc, active-to-asc, asc', /*@__PURE__*/ style({ transform: 'translateY(25%)' })),\n    ]),\n    /** Necessary trigger that calls animate on children animations. */\n    allowChildren: /*@__PURE__*/ trigger('allowChildren', [\n        /*@__PURE__*/ transition('* <=> *', [\n            /*@__PURE__*/ query('@*', /*@__PURE__*/ animateChild(), { optional: true })\n        ])\n    ]),\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\nvar MatSortHeaderIntl = /*@__PURE__*/ (function () {\n    function MatSortHeaderIntl() {\n        /**\n         * Stream that emits whenever the labels here are changed. Use this to notify\n         * components if the labels have changed after initialization.\n         */\n        this.changes = new Subject();\n        /**\n         * ARIA label for the sorting button.\n         */\n        this.sortButtonLabel = function (id) {\n            return \"Change sorting for \" + id;\n        };\n    }\n    /** @nocollapse */ MatSortHeaderIntl.ngInjectableDef = defineInjectable({ factory: function MatSortHeaderIntl_Factory() { return new MatSortHeaderIntl(); }, token: MatSortHeaderIntl, providedIn: \"root\" });\n    return MatSortHeaderIntl;\n}());\n/**\n * \\@docs-private\n * @param {?} parentIntl\n * @return {?}\n */\nfunction MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl) {\n    return parentIntl || new MatSortHeaderIntl();\n}\n/**\n * \\@docs-private\n */\nvar /** @type {?} */ MAT_SORT_HEADER_INTL_PROVIDER = {\n    // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n    provide: MatSortHeaderIntl,\n    deps: [[/*@__PURE__*/ new Optional(), /*@__PURE__*/ new SkipSelf(), MatSortHeaderIntl]],\n    useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@docs-private\n */\nvar /**\n * \\@docs-private\n */ MatSortHeaderBase = /*@__PURE__*/ (function () {\n    function MatSortHeaderBase() {\n    }\n    return MatSortHeaderBase;\n}());\nvar /** @type {?} */ _MatSortHeaderMixinBase = /*@__PURE__*/ mixinDisabled(MatSortHeaderBase);\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\nvar MatSortHeader = /*@__PURE__*/ (function (_super) {\n    __extends(MatSortHeader, _super);\n    function MatSortHeader(_intl, changeDetectorRef, _sort, _cdkColumnDef) {\n        var _this = _super.call(this) || this;\n        _this._intl = _intl;\n        _this._sort = _sort;\n        _this._cdkColumnDef = _cdkColumnDef;\n        /**\n         * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n         * provide an affordance that the header is sortable by showing on focus and hover.\n         */\n        _this._showIndicatorHint = false;\n        /**\n         * The direction the arrow should be facing according to the current state.\n         */\n        _this._arrowDirection = '';\n        /**\n         * Whether the view state animation should show the transition between the `from` and `to` states.\n         */\n        _this._disableViewStateAnimation = false;\n        /**\n         * Sets the position of the arrow that displays when sorted.\n         */\n        _this.arrowPosition = 'after';\n        if (!_sort) {\n            throw getSortHeaderNotContainedWithinSortError();\n        }\n        _this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n            .subscribe(function () {\n            if (_this._isSorted()) {\n                _this._updateArrowDirection();\n            }\n            // If this header was recently active and now no longer sorted, animate away the arrow.\n            if (!_this._isSorted() && _this._viewState && _this._viewState.toState === 'active') {\n                _this._disableViewStateAnimation = false;\n                _this._setAnimationTransitionState({ fromState: 'active', toState: _this._arrowDirection });\n            }\n            changeDetectorRef.markForCheck();\n        });\n        return _this;\n    }\n    Object.defineProperty(MatSortHeader.prototype, \"disableClear\", {\n        get: /**\n         * Overrides the disable clear value of the containing MatSort for this MatSortable.\n         * @return {?}\n         */ function () { return this._disableClear; },\n        set: /**\n         * @param {?} v\n         * @return {?}\n         */ function (v) { this._disableClear = coerceBooleanProperty(v); },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MatSortHeader.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            if (!this.id && this._cdkColumnDef) {\n                this.id = this._cdkColumnDef.name;\n            }\n            // Initialize the direction of the arrow and set the view state to be immediately that state.\n            this._updateArrowDirection();\n            this._setAnimationTransitionState({ toState: this._isSorted() ? 'active' : this._arrowDirection });\n            this._sort.register(this);\n        };\n    /**\n     * @return {?}\n     */\n    MatSortHeader.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            this._sort.deregister(this);\n            this._rerenderSubscription.unsubscribe();\n        };\n    /**\n     * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n     * user showing what the active sort will become. If set to false, the arrow will fade away.\n     */\n    /**\n     * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n     * user showing what the active sort will become. If set to false, the arrow will fade away.\n     * @param {?} visible\n     * @return {?}\n     */\n    MatSortHeader.prototype._setIndicatorHintVisible = /**\n     * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n     * user showing what the active sort will become. If set to false, the arrow will fade away.\n     * @param {?} visible\n     * @return {?}\n     */\n        function (visible) {\n            // No-op if the sort header is disabled - should not make the hint visible.\n            if (this._isDisabled() && visible) {\n                return;\n            }\n            this._showIndicatorHint = visible;\n            if (!this._isSorted()) {\n                this._updateArrowDirection();\n                if (this._showIndicatorHint) {\n                    this._setAnimationTransitionState({ fromState: this._arrowDirection, toState: 'hint' });\n                }\n                else {\n                    this._setAnimationTransitionState({ fromState: 'hint', toState: this._arrowDirection });\n                }\n            }\n        };\n    /**\n     * Sets the animation transition view state for the arrow's position and opacity. If the\n     * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n     * no animation appears.\n     */\n    /**\n     * Sets the animation transition view state for the arrow's position and opacity. If the\n     * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n     * no animation appears.\n     * @param {?} viewState\n     * @return {?}\n     */\n    MatSortHeader.prototype._setAnimationTransitionState = /**\n     * Sets the animation transition view state for the arrow's position and opacity. If the\n     * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n     * no animation appears.\n     * @param {?} viewState\n     * @return {?}\n     */\n        function (viewState) {\n            this._viewState = viewState;\n            // If the animation for arrow position state (opacity/translation) should be disabled,\n            // remove the fromState so that it jumps right to the toState.\n            if (this._disableViewStateAnimation) {\n                this._viewState = { toState: viewState.toState };\n            }\n        };\n    /** Triggers the sort on this sort header and removes the indicator hint. */\n    /**\n     * Triggers the sort on this sort header and removes the indicator hint.\n     * @return {?}\n     */\n    MatSortHeader.prototype._handleClick = /**\n     * Triggers the sort on this sort header and removes the indicator hint.\n     * @return {?}\n     */\n        function () {\n            if (this._isDisabled()) {\n                return;\n            }\n            this._sort.sort(this);\n            // Do not show the animation if the header was already shown in the right position.\n            if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n                this._disableViewStateAnimation = true;\n            }\n            // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n            // the direction it is facing.\n            var /** @type {?} */ viewState = this._isSorted() ?\n                { fromState: this._arrowDirection, toState: 'active' } :\n                { fromState: 'active', toState: this._arrowDirection };\n            this._setAnimationTransitionState(viewState);\n            this._showIndicatorHint = false;\n        };\n    /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n    /**\n     * Whether this MatSortHeader is currently sorted in either ascending or descending order.\n     * @return {?}\n     */\n    MatSortHeader.prototype._isSorted = /**\n     * Whether this MatSortHeader is currently sorted in either ascending or descending order.\n     * @return {?}\n     */\n        function () {\n            return this._sort.active == this.id &&\n                (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n        };\n    /** Returns the animation state for the arrow direction (indicator and pointers). */\n    /**\n     * Returns the animation state for the arrow direction (indicator and pointers).\n     * @return {?}\n     */\n    MatSortHeader.prototype._getArrowDirectionState = /**\n     * Returns the animation state for the arrow direction (indicator and pointers).\n     * @return {?}\n     */\n        function () {\n            return \"\" + (this._isSorted() ? 'active-' : '') + this._arrowDirection;\n        };\n    /** Returns the arrow position state (opacity, translation). */\n    /**\n     * Returns the arrow position state (opacity, translation).\n     * @return {?}\n     */\n    MatSortHeader.prototype._getArrowViewState = /**\n     * Returns the arrow position state (opacity, translation).\n     * @return {?}\n     */\n        function () {\n            var /** @type {?} */ fromState = this._viewState.fromState;\n            return (fromState ? fromState + \"-to-\" : '') + this._viewState.toState;\n        };\n    /**\n     * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n     * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n     * active sorted direction. The reason this is updated through a function is because the direction\n     * should only be changed at specific times - when deactivated but the hint is displayed and when\n     * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n     * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n     * preserving its direction, even though the next sort direction is actually different and should\n     * only be changed once the arrow displays again (hint or activation).\n     */\n    /**\n     * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n     * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n     * active sorted direction. The reason this is updated through a function is because the direction\n     * should only be changed at specific times - when deactivated but the hint is displayed and when\n     * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n     * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n     * preserving its direction, even though the next sort direction is actually different and should\n     * only be changed once the arrow displays again (hint or activation).\n     * @return {?}\n     */\n    MatSortHeader.prototype._updateArrowDirection = /**\n     * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n     * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n     * active sorted direction. The reason this is updated through a function is because the direction\n     * should only be changed at specific times - when deactivated but the hint is displayed and when\n     * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n     * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n     * preserving its direction, even though the next sort direction is actually different and should\n     * only be changed once the arrow displays again (hint or activation).\n     * @return {?}\n     */\n        function () {\n            this._arrowDirection = this._isSorted() ?\n                this._sort.direction :\n                (this.start || this._sort.start);\n        };\n    /**\n     * @return {?}\n     */\n    MatSortHeader.prototype._isDisabled = /**\n     * @return {?}\n     */\n        function () {\n            return this._sort.disabled || this.disabled;\n        };\n    /**\n     * Gets the aria-sort attribute that should be applied to this sort header. If this header\n     * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n     * says that the aria-sort property should only be present on one header at a time, so removing\n     * ensures this is true.\n     */\n    /**\n     * Gets the aria-sort attribute that should be applied to this sort header. If this header\n     * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n     * says that the aria-sort property should only be present on one header at a time, so removing\n     * ensures this is true.\n     * @return {?}\n     */\n    MatSortHeader.prototype._getAriaSortAttribute = /**\n     * Gets the aria-sort attribute that should be applied to this sort header. If this header\n     * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n     * says that the aria-sort property should only be present on one header at a time, so removing\n     * ensures this is true.\n     * @return {?}\n     */\n        function () {\n            if (!this._isSorted()) {\n                return null;\n            }\n            return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n        };\n    return MatSortHeader;\n}(_MatSortHeaderMixinBase));\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar MatSortModule = /*@__PURE__*/ (function () {\n    function MatSortModule() {\n    }\n    return MatSortModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nexport { MatSortModule, MatSortHeaderBase, _MatSortHeaderMixinBase, MatSortHeader, MatSortHeaderIntl, MAT_SORT_HEADER_INTL_PROVIDER_FACTORY, MAT_SORT_HEADER_INTL_PROVIDER, MatSortBase, _MatSortMixinBase, MatSort, matSortAnimations };\n//# sourceMappingURL=sort.es5.js.map\n",null]}