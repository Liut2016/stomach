{"remainingRequest":"/home/liutao/Project/0/oncology/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/home/liutao/Project/0/oncology/node_modules/@swimlane/ngx-datatable/release/components/datatable.component.js","dependencies":[{"path":"/home/liutao/Project/0/oncology/node_modules/@swimlane/ngx-datatable/release/components/datatable.component.js","mtime":1511963642000},{"path":"/home/liutao/Project/0/oncology/node_modules/cache-loader/dist/cjs.js","mtime":1539266424898},{"path":"/home/liutao/Project/0/oncology/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1526531406000}],"contextDependencies":[],"result":["\"use strict\";\nvar __assign = (this && this.__assign) || Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s)\n            if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n    }\n    return t;\n};\nvar __decorate = /*@__PURE__*/ require(\"tslib\").__decorate;\nvar __metadata = /*@__PURE__*/ require(\"tslib\").__metadata;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = require(\"@angular/core\");\nvar utils_1 = require(\"../utils\");\nvar services_1 = require(\"../services\");\nvar types_1 = require(\"../types\");\nvar body_1 = require(\"./body\");\nvar body_group_header_directive_1 = require(\"./body/body-group-header.directive\");\nvar columns_1 = require(\"./columns\");\nvar row_detail_1 = require(\"./row-detail\");\nvar footer_1 = require(\"./footer\");\nvar header_1 = require(\"./header\");\nvar BehaviorSubject_1 = require(\"rxjs/BehaviorSubject\");\nvar DatatableComponent = /*@__PURE__*/ (function () {\n    function DatatableComponent(scrollbarHelper, cd, element, differs) {\n        this.scrollbarHelper = scrollbarHelper;\n        this.cd = cd;\n        /**\n         * List of row objects that should be\n         * represented as selected in the grid.\n         * Default value: `[]`\n         */\n        this.selected = [];\n        /**\n         * Enable vertical scrollbars\n         */\n        this.scrollbarV = false;\n        /**\n         * Enable horz scrollbars\n         */\n        this.scrollbarH = false;\n        /**\n         * The row height; which is necessary\n         * to calculate the height for the lazy rendering.\n         */\n        this.rowHeight = 30;\n        /**\n         * Type of column width distribution formula.\n         * Example: flex, force, standard\n         */\n        this.columnMode = types_1.ColumnMode.standard;\n        /**\n         * The minimum header height in pixels.\n         * Pass a falsey for no header\n         */\n        this.headerHeight = 30;\n        /**\n         * The minimum footer height in pixels.\n         * Pass falsey for no footer\n         */\n        this.footerHeight = 0;\n        /**\n         * If the table should use external paging\n         * otherwise its assumed that all data is preloaded.\n         */\n        this.externalPaging = false;\n        /**\n         * If the table should use external sorting or\n         * the built-in basic sorting.\n         */\n        this.externalSorting = false;\n        /**\n         * Show the linear loading bar.\n         * Default value: `false`\n         */\n        this.loadingIndicator = false;\n        /**\n         * Enable/Disable ability to re-order columns\n         * by dragging them.\n         */\n        this.reorderable = true;\n        /**\n         * The type of sorting\n         */\n        this.sortType = types_1.SortType.single;\n        /**\n         * Array of sorted columns by property and type.\n         * Default value: `[]`\n         */\n        this.sorts = [];\n        /**\n         * Css class overrides\n         */\n        this.cssClasses = {\n            sortAscending: 'datatable-icon-up',\n            sortDescending: 'datatable-icon-down',\n            pagerLeftArrow: 'datatable-icon-left',\n            pagerRightArrow: 'datatable-icon-right',\n            pagerPrevious: 'datatable-icon-prev',\n            pagerNext: 'datatable-icon-skip'\n        };\n        /**\n         * Message overrides for localization\n         *\n         * emptyMessage     [default] = 'No data to display'\n         * totalMessage     [default] = 'total'\n         * selectedMessage  [default] = 'selected'\n         */\n        this.messages = {\n            // Message to show when array is presented\n            // but contains no values\n            emptyMessage: 'No data to display',\n            // Footer total message\n            totalMessage: 'total',\n            // Footer selected message\n            selectedMessage: 'selected'\n        };\n        /**\n         * This will be used when displaying or selecting rows.\n         * when tracking/comparing them, we'll use the value of this fn,\n         *\n         * (`fn(x) === fn(y)` instead of `x === y`)\n         */\n        this.rowIdentity = (function (x) { return x; });\n        /**\n         * A boolean you can use to set the detault behaviour of rows and groups\n         * whether they will start expanded or not. If ommited the default is NOT expanded.\n         *\n         */\n        this.groupExpansionDefault = false;\n        /**\n         * Property to which you can use for determining select all\n         * rows on current page or not.\n         *\n         * @type {boolean}\n         * @memberOf DatatableComponent\n         */\n        this.selectAllRowsOnPage = false;\n        /**\n         * Body was scrolled typically in a `scrollbarV:true` scenario.\n         */\n        this.scroll = new core_1.EventEmitter();\n        /**\n         * A cell or row was focused via keyboard or mouse click.\n         */\n        this.activate = new core_1.EventEmitter();\n        /**\n         * A cell or row was selected.\n         */\n        this.select = new core_1.EventEmitter();\n        /**\n         * Column sort was invoked.\n         */\n        this.sort = new core_1.EventEmitter();\n        /**\n         * The table was paged either triggered by the pager or the body scroll.\n         */\n        this.page = new core_1.EventEmitter();\n        /**\n         * Columns were re-ordered.\n         */\n        this.reorder = new core_1.EventEmitter();\n        /**\n         * Column was resized.\n         */\n        this.resize = new core_1.EventEmitter();\n        /**\n         * The context menu was invoked on the table.\n         * type indicates whether the header or the body was clicked.\n         * content contains either the column or the row that was clicked.\n         */\n        this.tableContextmenu = new core_1.EventEmitter(false);\n        this.rowCount = 0;\n        this._offsetX = new BehaviorSubject_1.BehaviorSubject(0);\n        this._count = 0;\n        this._offset = 0;\n        // get ref to elm for measuring\n        this.element = element.nativeElement;\n        this.rowDiffer = differs.find({}).create();\n    }\n    Object.defineProperty(DatatableComponent.prototype, \"rows\", {\n        /**\n         * Gets the rows.\n         */\n        get: function () {\n            return this._rows;\n        },\n        /**\n         * Rows that are displayed in the table.\n         */\n        set: function (val) {\n            this._rows = val;\n            // auto sort on new updates\n            if (!this.externalSorting) {\n                this._internalRows = utils_1.sortRows(val, this._internalColumns, this.sorts);\n            }\n            else {\n                this._internalRows = val.slice();\n            }\n            // recalculate sizes/etc\n            this.recalculate();\n            if (this._rows && this._groupRowsBy) {\n                // If a column has been specified in _groupRowsBy created a new array with the data grouped by that row\n                this.groupedRows = this.groupArrayBy(this._rows, this._groupRowsBy);\n            }\n            this.cd.markForCheck();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DatatableComponent.prototype, \"groupRowsBy\", {\n        get: function () {\n            return this._groupRowsBy;\n        },\n        /**\n         * This attribute allows the user to set the name of the column to group the data with\n         */\n        set: function (val) {\n            if (val) {\n                this._groupRowsBy = val;\n                if (this._rows && this._groupRowsBy) {\n                    // cretes a new array with the data grouped\n                    this.groupedRows = this.groupArrayBy(this._rows, this._groupRowsBy);\n                }\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DatatableComponent.prototype, \"columns\", {\n        /**\n         * Get the columns.\n         */\n        get: function () {\n            return this._columns;\n        },\n        /**\n         * Columns to be displayed.\n         */\n        set: function (val) {\n            if (val) {\n                this._internalColumns = val.slice();\n                utils_1.setColumnDefaults(this._internalColumns);\n                this.recalculateColumns();\n            }\n            this._columns = val;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DatatableComponent.prototype, \"limit\", {\n        /**\n         * Gets the limit.\n         */\n        get: function () {\n            return this._limit;\n        },\n        /**\n         * The page size to be shown.\n         * Default value: `undefined`\n         */\n        set: function (val) {\n            this._limit = val;\n            // recalculate sizes/etc\n            this.recalculate();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DatatableComponent.prototype, \"count\", {\n        /**\n         * Gets the count.\n         */\n        get: function () {\n            return this._count;\n        },\n        /**\n         * The total count of all rows.\n         * Default value: `0`\n         */\n        set: function (val) {\n            this._count = val;\n            // recalculate sizes/etc\n            this.recalculate();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DatatableComponent.prototype, \"offset\", {\n        get: function () {\n            return Math.max(Math.min(this._offset, Math.ceil(this.rowCount / this.pageSize) - 1), 0);\n        },\n        /**\n         * The current offset ( page - 1 ) shown.\n         * Default value: `0`\n         */\n        set: function (val) {\n            this._offset = val;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DatatableComponent.prototype, \"isFixedHeader\", {\n        /**\n         * CSS class applied if the header height if fixed height.\n         */\n        get: function () {\n            var headerHeight = this.headerHeight;\n            return (typeof headerHeight === 'string') ?\n                headerHeight !== 'auto' : true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DatatableComponent.prototype, \"isFixedRow\", {\n        /**\n         * CSS class applied to the root element if\n         * the row heights are fixed heights.\n         */\n        get: function () {\n            var rowHeight = this.rowHeight;\n            return (typeof rowHeight === 'string') ?\n                rowHeight !== 'auto' : true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DatatableComponent.prototype, \"isVertScroll\", {\n        /**\n         * CSS class applied to root element if\n         * vertical scrolling is enabled.\n         */\n        get: function () {\n            return this.scrollbarV;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DatatableComponent.prototype, \"isHorScroll\", {\n        /**\n         * CSS class applied to the root element\n         * if the horziontal scrolling is enabled.\n         */\n        get: function () {\n            return this.scrollbarH;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DatatableComponent.prototype, \"isSelectable\", {\n        /**\n         * CSS class applied to root element is selectable.\n         */\n        get: function () {\n            return this.selectionType !== undefined;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DatatableComponent.prototype, \"isCheckboxSelection\", {\n        /**\n         * CSS class applied to root is checkbox selection.\n         */\n        get: function () {\n            return this.selectionType === types_1.SelectionType.checkbox;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DatatableComponent.prototype, \"isCellSelection\", {\n        /**\n         * CSS class applied to root if cell selection.\n         */\n        get: function () {\n            return this.selectionType === types_1.SelectionType.cell;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DatatableComponent.prototype, \"isSingleSelection\", {\n        /**\n         * CSS class applied to root if single select.\n         */\n        get: function () {\n            return this.selectionType === types_1.SelectionType.single;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DatatableComponent.prototype, \"isMultiSelection\", {\n        /**\n         * CSS class added to root element if mulit select\n         */\n        get: function () {\n            return this.selectionType === types_1.SelectionType.multi;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DatatableComponent.prototype, \"isMultiClickSelection\", {\n        /**\n         * CSS class added to root element if mulit click select\n         */\n        get: function () {\n            return this.selectionType === types_1.SelectionType.multiClick;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DatatableComponent.prototype, \"columnTemplates\", {\n        /**\n         * Returns the column templates.\n         */\n        get: function () {\n            return this._columnTemplates;\n        },\n        /**\n         * Column templates gathered from `ContentChildren`\n         * if described in your markup.\n         */\n        set: function (val) {\n            this._columnTemplates = val;\n            this.translateColumns(val);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DatatableComponent.prototype, \"allRowsSelected\", {\n        /**\n         * Returns if all rows are selected.\n         */\n        get: function () {\n            var allRowsSelected = (this.selected.length === this.rows.length);\n            if (this.selectAllRowsOnPage) {\n                var indexes = this.bodyComponent.indexes;\n                var rowsOnPage = indexes.last - indexes.first;\n                allRowsSelected = (this.selected.length === rowsOnPage);\n            }\n            return this.selected && this.rows &&\n                this.rows.length !== 0 && allRowsSelected;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Lifecycle hook that is called after data-bound\n     * properties of a directive are initialized.\n     */\n    DatatableComponent.prototype.ngOnInit = function () {\n        // need to call this immediatly to size\n        // if the table is hidden the visibility\n        // listener will invoke this itself upon show\n        this.recalculate();\n    };\n    /**\n     * Lifecycle hook that is called after a component's\n     * view has been fully initialized.\n     */\n    DatatableComponent.prototype.ngAfterViewInit = function () {\n        var _this = this;\n        if (!this.externalSorting) {\n            this._internalRows = utils_1.sortRows(this._rows, this._internalColumns, this.sorts);\n        }\n        // this has to be done to prevent the change detection\n        // tree from freaking out because we are readjusting\n        requestAnimationFrame(function () {\n            _this.recalculate();\n            // emit page for virtual server-side kickoff\n            if (_this.externalPaging && _this.scrollbarV) {\n                _this.page.emit({\n                    count: _this.count,\n                    pageSize: _this.pageSize,\n                    limit: _this.limit,\n                    offset: 0\n                });\n            }\n        });\n    };\n    /**\n     * Lifecycle hook that is called after a component's\n     * content has been fully initialized.\n     */\n    DatatableComponent.prototype.ngAfterContentInit = function () {\n        var _this = this;\n        this.columnTemplates.changes.subscribe(function (v) {\n            return _this.translateColumns(v);\n        });\n    };\n    /**\n     * Translates the templates to the column objects\n     */\n    DatatableComponent.prototype.translateColumns = function (val) {\n        if (val) {\n            var arr = val.toArray();\n            if (arr.length) {\n                this._internalColumns = utils_1.translateTemplates(arr);\n                utils_1.setColumnDefaults(this._internalColumns);\n                this.recalculateColumns();\n                this.cd.markForCheck();\n            }\n        }\n    };\n    /**\n     * Creates a map with the data grouped by the user choice of grouping index\n     *\n     * @param originalArray the original array passed via parameter\n     * @param groupByIndex  the index of the column to group the data by\n     */\n    DatatableComponent.prototype.groupArrayBy = function (originalArray, groupBy) {\n        // create a map to hold groups with their corresponding results\n        var map = new Map();\n        var i = 0;\n        originalArray.forEach(function (item) {\n            var key = item[groupBy];\n            if (!map.has(key)) {\n                map.set(key, [item]);\n            }\n            else {\n                map.get(key).push(item);\n            }\n            i++;\n        });\n        var addGroup = function (key, value) {\n            return { key: key, value: value };\n        };\n        // convert map back to a simple array of objects\n        return Array.from(map, function (x) { return addGroup(x[0], x[1]); });\n    };\n    /*\n    * Lifecycle hook that is called when Angular dirty checks a directive.\n    */\n    DatatableComponent.prototype.ngDoCheck = function () {\n        if (this.rowDiffer.diff(this.rows)) {\n            if (!this.externalSorting) {\n                this._internalRows = utils_1.sortRows(this._rows, this._internalColumns, this.sorts);\n            }\n            else {\n                this._internalRows = this.rows.slice();\n            }\n            this.recalculatePages();\n            this.cd.markForCheck();\n        }\n    };\n    /**\n     * Recalc's the sizes of the grid.\n     *\n     * Updated automatically on changes to:\n     *\n     *  - Columns\n     *  - Rows\n     *  - Paging related\n     *\n     * Also can be manually invoked or upon window resize.\n     */\n    DatatableComponent.prototype.recalculate = function () {\n        this.recalculateDims();\n        this.recalculateColumns();\n    };\n    /**\n     * Window resize handler to update sizes.\n     */\n    DatatableComponent.prototype.onWindowResize = function () {\n        this.recalculate();\n    };\n    /**\n     * Recalulcates the column widths based on column width\n     * distribution mode and scrollbar offsets.\n     */\n    DatatableComponent.prototype.recalculateColumns = function (columns, forceIdx, allowBleed) {\n        if (columns === void 0) {\n            columns = this._internalColumns;\n        }\n        if (forceIdx === void 0) {\n            forceIdx = -1;\n        }\n        if (allowBleed === void 0) {\n            allowBleed = this.scrollbarH;\n        }\n        if (!columns)\n            return undefined;\n        var width = this._innerWidth;\n        if (this.scrollbarV) {\n            width = width - this.scrollbarHelper.width;\n        }\n        if (this.columnMode === types_1.ColumnMode.force) {\n            utils_1.forceFillColumnWidths(columns, width, forceIdx, allowBleed);\n        }\n        else if (this.columnMode === types_1.ColumnMode.flex) {\n            utils_1.adjustColumnWidths(columns, width);\n        }\n        return columns;\n    };\n    /**\n     * Recalculates the dimensions of the table size.\n     * Internally calls the page size and row count calcs too.\n     *\n     */\n    DatatableComponent.prototype.recalculateDims = function () {\n        var dims = this.element.getBoundingClientRect();\n        this._innerWidth = Math.floor(dims.width);\n        if (this.scrollbarV) {\n            var height = dims.height;\n            if (this.headerHeight)\n                height = height - this.headerHeight;\n            if (this.footerHeight)\n                height = height - this.footerHeight;\n            this.bodyHeight = height;\n        }\n        this.recalculatePages();\n    };\n    /**\n     * Recalculates the pages after a update.\n     */\n    DatatableComponent.prototype.recalculatePages = function () {\n        this.pageSize = this.calcPageSize();\n        this.rowCount = this.calcRowCount();\n    };\n    /**\n     * Body triggered a page event.\n     */\n    DatatableComponent.prototype.onBodyPage = function (_a) {\n        var offset = _a.offset;\n        this.offset = offset;\n        this.page.emit({\n            count: this.count,\n            pageSize: this.pageSize,\n            limit: this.limit,\n            offset: this.offset\n        });\n    };\n    /**\n     * The body triggered a scroll event.\n     */\n    DatatableComponent.prototype.onBodyScroll = function (event) {\n        this._offsetX.next(event.offsetX);\n        this.scroll.emit(event);\n        this.cd.detectChanges();\n    };\n    /**\n     * The footer triggered a page event.\n     */\n    DatatableComponent.prototype.onFooterPage = function (event) {\n        this.offset = event.page - 1;\n        this.bodyComponent.updateOffsetY(this.offset);\n        this.page.emit({\n            count: this.count,\n            pageSize: this.pageSize,\n            limit: this.limit,\n            offset: this.offset\n        });\n        if (this.selectAllRowsOnPage) {\n            this.selected = [];\n            this.select.emit({\n                selected: this.selected\n            });\n        }\n    };\n    /**\n     * Recalculates the sizes of the page\n     */\n    DatatableComponent.prototype.calcPageSize = function (val) {\n        if (val === void 0) {\n            val = this.rows;\n        }\n        // Keep the page size constant even if the row has been expanded.\n        // This is because an expanded row is still considered to be a child of\n        // the original row.  Hence calculation would use rowHeight only.\n        if (this.scrollbarV) {\n            var size = Math.ceil(this.bodyHeight / this.rowHeight);\n            return Math.max(size, 0);\n        }\n        // if limit is passed, we are paging\n        if (this.limit !== undefined) {\n            return this.limit;\n        }\n        // otherwise use row length\n        if (val) {\n            return val.length;\n        }\n        // other empty :(\n        return 0;\n    };\n    /**\n     * Calculates the row count.\n     */\n    DatatableComponent.prototype.calcRowCount = function (val) {\n        if (val === void 0) {\n            val = this.rows;\n        }\n        if (!this.externalPaging) {\n            if (!val)\n                return 0;\n            if (this.groupedRows) {\n                return this.groupedRows.length;\n            }\n            else {\n                return val.length;\n            }\n        }\n        return this.count;\n    };\n    /**\n     * The header triggered a contextmenu event.\n     */\n    DatatableComponent.prototype.onColumnContextmenu = function (_a) {\n        var event = _a.event, column = _a.column;\n        this.tableContextmenu.emit({ event: event, type: types_1.ContextmenuType.header, content: column });\n    };\n    /**\n     * The body triggered a contextmenu event.\n     */\n    DatatableComponent.prototype.onRowContextmenu = function (_a) {\n        var event = _a.event, row = _a.row;\n        this.tableContextmenu.emit({ event: event, type: types_1.ContextmenuType.body, content: row });\n    };\n    /**\n     * The header triggered a column resize event.\n     */\n    DatatableComponent.prototype.onColumnResize = function (_a) {\n        var column = _a.column, newValue = _a.newValue;\n        /* Safari/iOS 10.2 workaround */\n        if (column === undefined) {\n            return;\n        }\n        var idx;\n        var cols = this._internalColumns.map(function (c, i) {\n            c = __assign({}, c);\n            if (c.$$id === column.$$id) {\n                idx = i;\n                c.width = newValue;\n                // set this so we can force the column\n                // width distribution to be to this value\n                c.$$oldWidth = newValue;\n            }\n            return c;\n        });\n        this.recalculateColumns(cols, idx);\n        this._internalColumns = cols;\n        this.resize.emit({\n            column: column,\n            newValue: newValue\n        });\n    };\n    /**\n     * The header triggered a column re-order event.\n     */\n    DatatableComponent.prototype.onColumnReorder = function (_a) {\n        var column = _a.column, newValue = _a.newValue, prevValue = _a.prevValue;\n        var cols = this._internalColumns.map(function (c) {\n            return __assign({}, c);\n        });\n        var prevCol = cols[newValue];\n        cols[newValue] = column;\n        cols[prevValue] = prevCol;\n        this._internalColumns = cols;\n        this.reorder.emit({\n            column: column,\n            newValue: newValue,\n            prevValue: prevValue\n        });\n    };\n    /**\n     * The header triggered a column sort event.\n     */\n    DatatableComponent.prototype.onColumnSort = function (event) {\n        // clean selected rows\n        if (this.selectAllRowsOnPage) {\n            this.selected = [];\n            this.select.emit({\n                selected: this.selected\n            });\n        }\n        var sorts = event.sorts;\n        // this could be optimized better since it will resort\n        // the rows again on the 'push' detection...\n        if (this.externalSorting === false) {\n            // don't use normal setter so we don't resort\n            this._internalRows = utils_1.sortRows(this.rows, this._internalColumns, sorts);\n        }\n        this.sorts = sorts;\n        // Always go to first page when sorting to see the newly sorted data\n        this.offset = 0;\n        this.bodyComponent.updateOffsetY(this.offset);\n        this.sort.emit(event);\n    };\n    /**\n     * Toggle all row selection\n     */\n    DatatableComponent.prototype.onHeaderSelect = function (event) {\n        if (this.selectAllRowsOnPage) {\n            // before we splice, chk if we currently have all selected\n            var first = this.bodyComponent.indexes.first;\n            var last = this.bodyComponent.indexes.last;\n            var allSelected = this.selected.length === (last - first);\n            // remove all existing either way\n            this.selected = [];\n            // do the opposite here\n            if (!allSelected) {\n                (_a = this.selected).push.apply(_a, this._internalRows.slice(first, last));\n            }\n        }\n        else {\n            // before we splice, chk if we currently have all selected\n            var allSelected = this.selected.length === this.rows.length;\n            // remove all existing either way\n            this.selected = [];\n            // do the opposite here\n            if (!allSelected) {\n                (_b = this.selected).push.apply(_b, this.rows);\n            }\n        }\n        this.select.emit({\n            selected: this.selected\n        });\n        var _a, _b;\n    };\n    /**\n     * A row was selected from body\n     */\n    DatatableComponent.prototype.onBodySelect = function (event) {\n        this.select.emit(event);\n    };\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Object),\n        __metadata(\"design:paramtypes\", [Object])\n    ], DatatableComponent.prototype, \"rows\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String),\n        __metadata(\"design:paramtypes\", [String])\n    ], DatatableComponent.prototype, \"groupRowsBy\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Array)\n    ], DatatableComponent.prototype, \"groupedRows\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Array),\n        __metadata(\"design:paramtypes\", [Array])\n    ], DatatableComponent.prototype, \"columns\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Array)\n    ], DatatableComponent.prototype, \"selected\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], DatatableComponent.prototype, \"scrollbarV\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], DatatableComponent.prototype, \"scrollbarH\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Number)\n    ], DatatableComponent.prototype, \"rowHeight\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String)\n    ], DatatableComponent.prototype, \"columnMode\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Object)\n    ], DatatableComponent.prototype, \"headerHeight\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Number)\n    ], DatatableComponent.prototype, \"footerHeight\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], DatatableComponent.prototype, \"externalPaging\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], DatatableComponent.prototype, \"externalSorting\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Number),\n        __metadata(\"design:paramtypes\", [Number])\n    ], DatatableComponent.prototype, \"limit\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Number),\n        __metadata(\"design:paramtypes\", [Number])\n    ], DatatableComponent.prototype, \"count\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Number),\n        __metadata(\"design:paramtypes\", [Number])\n    ], DatatableComponent.prototype, \"offset\", null);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], DatatableComponent.prototype, \"loadingIndicator\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String)\n    ], DatatableComponent.prototype, \"selectionType\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], DatatableComponent.prototype, \"reorderable\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String)\n    ], DatatableComponent.prototype, \"sortType\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Array)\n    ], DatatableComponent.prototype, \"sorts\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Object)\n    ], DatatableComponent.prototype, \"cssClasses\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Object)\n    ], DatatableComponent.prototype, \"messages\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Function)\n    ], DatatableComponent.prototype, \"rowIdentity\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Object)\n    ], DatatableComponent.prototype, \"rowClass\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Object)\n    ], DatatableComponent.prototype, \"selectCheck\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Function)\n    ], DatatableComponent.prototype, \"displayCheck\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Boolean)\n    ], DatatableComponent.prototype, \"groupExpansionDefault\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", String)\n    ], DatatableComponent.prototype, \"trackByProp\", void 0);\n    __decorate([\n        core_1.Input(),\n        __metadata(\"design:type\", Object)\n    ], DatatableComponent.prototype, \"selectAllRowsOnPage\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], DatatableComponent.prototype, \"scroll\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], DatatableComponent.prototype, \"activate\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], DatatableComponent.prototype, \"select\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], DatatableComponent.prototype, \"sort\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], DatatableComponent.prototype, \"page\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], DatatableComponent.prototype, \"reorder\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], DatatableComponent.prototype, \"resize\", void 0);\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", Object)\n    ], DatatableComponent.prototype, \"tableContextmenu\", void 0);\n    __decorate([\n        core_1.HostBinding('class.fixed-header'),\n        __metadata(\"design:type\", Boolean),\n        __metadata(\"design:paramtypes\", [])\n    ], DatatableComponent.prototype, \"isFixedHeader\", null);\n    __decorate([\n        core_1.HostBinding('class.fixed-row'),\n        __metadata(\"design:type\", Boolean),\n        __metadata(\"design:paramtypes\", [])\n    ], DatatableComponent.prototype, \"isFixedRow\", null);\n    __decorate([\n        core_1.HostBinding('class.scroll-vertical'),\n        __metadata(\"design:type\", Boolean),\n        __metadata(\"design:paramtypes\", [])\n    ], DatatableComponent.prototype, \"isVertScroll\", null);\n    __decorate([\n        core_1.HostBinding('class.scroll-horz'),\n        __metadata(\"design:type\", Boolean),\n        __metadata(\"design:paramtypes\", [])\n    ], DatatableComponent.prototype, \"isHorScroll\", null);\n    __decorate([\n        core_1.HostBinding('class.selectable'),\n        __metadata(\"design:type\", Boolean),\n        __metadata(\"design:paramtypes\", [])\n    ], DatatableComponent.prototype, \"isSelectable\", null);\n    __decorate([\n        core_1.HostBinding('class.checkbox-selection'),\n        __metadata(\"design:type\", Boolean),\n        __metadata(\"design:paramtypes\", [])\n    ], DatatableComponent.prototype, \"isCheckboxSelection\", null);\n    __decorate([\n        core_1.HostBinding('class.cell-selection'),\n        __metadata(\"design:type\", Boolean),\n        __metadata(\"design:paramtypes\", [])\n    ], DatatableComponent.prototype, \"isCellSelection\", null);\n    __decorate([\n        core_1.HostBinding('class.single-selection'),\n        __metadata(\"design:type\", Boolean),\n        __metadata(\"design:paramtypes\", [])\n    ], DatatableComponent.prototype, \"isSingleSelection\", null);\n    __decorate([\n        core_1.HostBinding('class.multi-selection'),\n        __metadata(\"design:type\", Boolean),\n        __metadata(\"design:paramtypes\", [])\n    ], DatatableComponent.prototype, \"isMultiSelection\", null);\n    __decorate([\n        core_1.HostBinding('class.multi-click-selection'),\n        __metadata(\"design:type\", Boolean),\n        __metadata(\"design:paramtypes\", [])\n    ], DatatableComponent.prototype, \"isMultiClickSelection\", null);\n    __decorate([\n        core_1.ContentChildren(columns_1.DataTableColumnDirective),\n        __metadata(\"design:type\", core_1.QueryList),\n        __metadata(\"design:paramtypes\", [core_1.QueryList])\n    ], DatatableComponent.prototype, \"columnTemplates\", null);\n    __decorate([\n        core_1.ContentChild(row_detail_1.DatatableRowDetailDirective),\n        __metadata(\"design:type\", row_detail_1.DatatableRowDetailDirective)\n    ], DatatableComponent.prototype, \"rowDetail\", void 0);\n    __decorate([\n        core_1.ContentChild(body_group_header_directive_1.DatatableGroupHeaderDirective),\n        __metadata(\"design:type\", body_group_header_directive_1.DatatableGroupHeaderDirective)\n    ], DatatableComponent.prototype, \"groupHeader\", void 0);\n    __decorate([\n        core_1.ContentChild(footer_1.DatatableFooterDirective),\n        __metadata(\"design:type\", footer_1.DatatableFooterDirective)\n    ], DatatableComponent.prototype, \"footer\", void 0);\n    __decorate([\n        core_1.ViewChild(body_1.DataTableBodyComponent),\n        __metadata(\"design:type\", body_1.DataTableBodyComponent)\n    ], DatatableComponent.prototype, \"bodyComponent\", void 0);\n    __decorate([\n        core_1.ViewChild(header_1.DataTableHeaderComponent),\n        __metadata(\"design:type\", header_1.DataTableHeaderComponent)\n    ], DatatableComponent.prototype, \"headerComponent\", void 0);\n    __decorate([\n        core_1.HostListener('window:resize'),\n        utils_1.throttleable(5),\n        __metadata(\"design:type\", Function),\n        __metadata(\"design:paramtypes\", []),\n        __metadata(\"design:returntype\", void 0)\n    ], DatatableComponent.prototype, \"onWindowResize\", null);\n    DatatableComponent = __decorate([\n        core_1.Component({\n            selector: 'ngx-datatable',\n            template: \"\\n    <div\\n      visibilityObserver\\n      (visible)=\\\"recalculate()\\\">\\n      <datatable-header\\n        *ngIf=\\\"headerHeight\\\"\\n        [sorts]=\\\"sorts\\\"\\n        [sortType]=\\\"sortType\\\"\\n        [scrollbarH]=\\\"scrollbarH\\\"\\n        [innerWidth]=\\\"_innerWidth\\\"\\n        [offsetX]=\\\"_offsetX | async\\\"\\n        [dealsWithGroup]=\\\"groupedRows\\\"\\n        [columns]=\\\"_internalColumns\\\"\\n        [headerHeight]=\\\"headerHeight\\\"\\n        [reorderable]=\\\"reorderable\\\"\\n        [sortAscendingIcon]=\\\"cssClasses.sortAscending\\\"\\n        [sortDescendingIcon]=\\\"cssClasses.sortDescending\\\"\\n        [allRowsSelected]=\\\"allRowsSelected\\\"\\n        [selectionType]=\\\"selectionType\\\"\\n        (sort)=\\\"onColumnSort($event)\\\"\\n        (resize)=\\\"onColumnResize($event)\\\"\\n        (reorder)=\\\"onColumnReorder($event)\\\"\\n        (select)=\\\"onHeaderSelect($event)\\\"\\n        (columnContextmenu)=\\\"onColumnContextmenu($event)\\\">\\n      </datatable-header>\\n      <datatable-body\\n        [groupRowsBy]=\\\"groupRowsBy\\\"\\n        [groupedRows]=\\\"groupedRows\\\"\\n        [rows]=\\\"_internalRows\\\"\\n        [groupExpansionDefault]=\\\"groupExpansionDefault\\\"\\n        [scrollbarV]=\\\"scrollbarV\\\"\\n        [scrollbarH]=\\\"scrollbarH\\\"\\n        [loadingIndicator]=\\\"loadingIndicator\\\"\\n        [externalPaging]=\\\"externalPaging\\\"\\n        [rowHeight]=\\\"rowHeight\\\"\\n        [rowCount]=\\\"rowCount\\\"\\n        [offset]=\\\"offset\\\"\\n        [trackByProp]=\\\"trackByProp\\\"\\n        [columns]=\\\"_internalColumns\\\"\\n        [pageSize]=\\\"pageSize\\\"\\n        [offsetX]=\\\"_offsetX | async\\\"\\n        [rowDetail]=\\\"rowDetail\\\"\\n        [groupHeader]=\\\"groupHeader\\\"\\n        [selected]=\\\"selected\\\"\\n        [innerWidth]=\\\"_innerWidth\\\"\\n        [bodyHeight]=\\\"bodyHeight\\\"\\n        [selectionType]=\\\"selectionType\\\"\\n        [emptyMessage]=\\\"messages.emptyMessage\\\"\\n        [rowIdentity]=\\\"rowIdentity\\\"\\n        [rowClass]=\\\"rowClass\\\"\\n        [selectCheck]=\\\"selectCheck\\\"\\n        [displayCheck]=\\\"displayCheck\\\"\\n        (page)=\\\"onBodyPage($event)\\\"\\n        (activate)=\\\"activate.emit($event)\\\"\\n        (rowContextmenu)=\\\"onRowContextmenu($event)\\\"\\n        (select)=\\\"onBodySelect($event)\\\"\\n        (scroll)=\\\"onBodyScroll($event)\\\">\\n      </datatable-body>\\n      <datatable-footer\\n        *ngIf=\\\"footerHeight\\\"\\n        [rowCount]=\\\"rowCount\\\"\\n        [pageSize]=\\\"pageSize\\\"\\n        [offset]=\\\"offset\\\"\\n        [footerHeight]=\\\"footerHeight\\\"\\n        [footerTemplate]=\\\"footer\\\"\\n        [totalMessage]=\\\"messages.totalMessage\\\"\\n        [pagerLeftArrowIcon]=\\\"cssClasses.pagerLeftArrow\\\"\\n        [pagerRightArrowIcon]=\\\"cssClasses.pagerRightArrow\\\"\\n        [pagerPreviousIcon]=\\\"cssClasses.pagerPrevious\\\"\\n        [selectedCount]=\\\"selected.length\\\"\\n        [selectedMessage]=\\\"!!selectionType && messages.selectedMessage\\\"\\n        [pagerNextIcon]=\\\"cssClasses.pagerNext\\\"\\n        (page)=\\\"onFooterPage($event)\\\">\\n      </datatable-footer>\\n    </div>\\n  \",\n            changeDetection: core_1.ChangeDetectionStrategy.OnPush,\n            encapsulation: core_1.ViewEncapsulation.None,\n            styleUrls: ['./datatable.component.css'],\n            host: {\n                class: 'ngx-datatable'\n            }\n        })\n    ], DatatableComponent);\n    return DatatableComponent;\n}());\nexports.DatatableComponent = DatatableComponent;\n",null]}