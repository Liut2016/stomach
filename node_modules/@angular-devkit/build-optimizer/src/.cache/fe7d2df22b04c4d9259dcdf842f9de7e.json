{"remainingRequest":"/home/liutao/Project/0/oncology/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/home/liutao/Project/0/oncology/node_modules/@angular/cdk/esm5/tree.es5.js","dependencies":[{"path":"/home/liutao/Project/0/oncology/node_modules/@angular/cdk/esm5/tree.es5.js","mtime":1526940964000},{"path":"/home/liutao/Project/0/oncology/node_modules/cache-loader/dist/cjs.js","mtime":1539266424898},{"path":"/home/liutao/Project/0/oncology/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1526531406000}],"contextDependencies":[],"result":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** PURE_IMPORTS_START _angular_cdk_collections,tslib,rxjs_operators,_angular_core,rxjs,_angular_cdk_bidi,_angular_cdk_coercion,_angular_cdk_a11y,_angular_common PURE_IMPORTS_END */\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { __extends } from 'tslib';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { Directive, TemplateRef, ViewContainerRef, ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, ElementRef, Input, IterableDiffers, ViewChild, ViewEncapsulation, Optional, Renderer2, NgModule } from '@angular/core';\nimport { BehaviorSubject, Observable, of, Subject } from 'rxjs';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceNumberProperty, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { CommonModule } from '@angular/common';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Base tree control. It has basic toggle/expand/collapse operations on a single data node.\n * @abstract\n * @template T\n */\nvar /**\n * Base tree control. It has basic toggle/expand/collapse operations on a single data node.\n * @abstract\n * @template T\n */ BaseTreeControl = /*@__PURE__*/ (function () {\n    function BaseTreeControl() {\n        /**\n         * A selection model with multi-selection to track expansion status.\n         */\n        this.expansionModel = new SelectionModel(true);\n    }\n    /** Toggles one single data node's expanded/collapsed state. */\n    /**\n     * Toggles one single data node's expanded/collapsed state.\n     * @param {?} dataNode\n     * @return {?}\n     */\n    BaseTreeControl.prototype.toggle = /**\n     * Toggles one single data node's expanded/collapsed state.\n     * @param {?} dataNode\n     * @return {?}\n     */\n        function (dataNode) {\n            this.expansionModel.toggle(dataNode);\n        };\n    /** Expands one single data node. */\n    /**\n     * Expands one single data node.\n     * @param {?} dataNode\n     * @return {?}\n     */\n    BaseTreeControl.prototype.expand = /**\n     * Expands one single data node.\n     * @param {?} dataNode\n     * @return {?}\n     */\n        function (dataNode) {\n            this.expansionModel.select(dataNode);\n        };\n    /** Collapses one single data node. */\n    /**\n     * Collapses one single data node.\n     * @param {?} dataNode\n     * @return {?}\n     */\n    BaseTreeControl.prototype.collapse = /**\n     * Collapses one single data node.\n     * @param {?} dataNode\n     * @return {?}\n     */\n        function (dataNode) {\n            this.expansionModel.deselect(dataNode);\n        };\n    /** Whether a given data node is expanded or not. Returns true if the data node is expanded. */\n    /**\n     * Whether a given data node is expanded or not. Returns true if the data node is expanded.\n     * @param {?} dataNode\n     * @return {?}\n     */\n    BaseTreeControl.prototype.isExpanded = /**\n     * Whether a given data node is expanded or not. Returns true if the data node is expanded.\n     * @param {?} dataNode\n     * @return {?}\n     */\n        function (dataNode) {\n            return this.expansionModel.isSelected(dataNode);\n        };\n    /** Toggles a subtree rooted at `node` recursively. */\n    /**\n     * Toggles a subtree rooted at `node` recursively.\n     * @param {?} dataNode\n     * @return {?}\n     */\n    BaseTreeControl.prototype.toggleDescendants = /**\n     * Toggles a subtree rooted at `node` recursively.\n     * @param {?} dataNode\n     * @return {?}\n     */\n        function (dataNode) {\n            this.expansionModel.isSelected(dataNode)\n                ? this.collapseDescendants(dataNode)\n                : this.expandDescendants(dataNode);\n        };\n    /** Collapse all dataNodes in the tree. */\n    /**\n     * Collapse all dataNodes in the tree.\n     * @return {?}\n     */\n    BaseTreeControl.prototype.collapseAll = /**\n     * Collapse all dataNodes in the tree.\n     * @return {?}\n     */\n        function () {\n            this.expansionModel.clear();\n        };\n    /** Expands a subtree rooted at given data node recursively. */\n    /**\n     * Expands a subtree rooted at given data node recursively.\n     * @param {?} dataNode\n     * @return {?}\n     */\n    BaseTreeControl.prototype.expandDescendants = /**\n     * Expands a subtree rooted at given data node recursively.\n     * @param {?} dataNode\n     * @return {?}\n     */\n        function (dataNode) {\n            var /** @type {?} */ toBeProcessed = [dataNode];\n            toBeProcessed.push.apply(toBeProcessed, this.getDescendants(dataNode));\n            (_a = this.expansionModel).select.apply(_a, toBeProcessed);\n            var _a;\n        };\n    /** Collapses a subtree rooted at given data node recursively. */\n    /**\n     * Collapses a subtree rooted at given data node recursively.\n     * @param {?} dataNode\n     * @return {?}\n     */\n    BaseTreeControl.prototype.collapseDescendants = /**\n     * Collapses a subtree rooted at given data node recursively.\n     * @param {?} dataNode\n     * @return {?}\n     */\n        function (dataNode) {\n            var /** @type {?} */ toBeProcessed = [dataNode];\n            toBeProcessed.push.apply(toBeProcessed, this.getDescendants(dataNode));\n            (_a = this.expansionModel).deselect.apply(_a, toBeProcessed);\n            var _a;\n        };\n    return BaseTreeControl;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Flat tree control. Able to expand/collapse a subtree recursively for flattened tree.\n * @template T\n */\nvar /**\n * Flat tree control. Able to expand/collapse a subtree recursively for flattened tree.\n * @template T\n */ FlatTreeControl = /*@__PURE__*/ (function (_super) {\n    __extends(FlatTreeControl, _super);\n    /** Construct with flat tree data node functions getLevel and isExpandable. */\n    function FlatTreeControl(getLevel, isExpandable) {\n        var _this = _super.call(this) || this;\n        _this.getLevel = getLevel;\n        _this.isExpandable = isExpandable;\n        return _this;\n    }\n    /**\n     * Gets a list of the data node's subtree of descendent data nodes.\n     *\n     * To make this working, the `dataNodes` of the TreeControl must be flattened tree nodes\n     * with correct levels.\n     */\n    /**\n     * Gets a list of the data node's subtree of descendent data nodes.\n     *\n     * To make this working, the `dataNodes` of the TreeControl must be flattened tree nodes\n     * with correct levels.\n     * @param {?} dataNode\n     * @return {?}\n     */\n    FlatTreeControl.prototype.getDescendants = /**\n     * Gets a list of the data node's subtree of descendent data nodes.\n     *\n     * To make this working, the `dataNodes` of the TreeControl must be flattened tree nodes\n     * with correct levels.\n     * @param {?} dataNode\n     * @return {?}\n     */\n        function (dataNode) {\n            var /** @type {?} */ startIndex = this.dataNodes.indexOf(dataNode);\n            var /** @type {?} */ results = [];\n            // Goes through flattened tree nodes in the `dataNodes` array, and get all descendants.\n            // The level of descendants of a tree node must be greater than the level of the given\n            // tree node.\n            // If we reach a node whose level is equal to the level of the tree node, we hit a sibling.\n            // If we reach a node whose level is greater than the level of the tree node, we hit a\n            // sibling of an ancestor.\n            for (var /** @type {?} */ i = startIndex + 1; i < this.dataNodes.length && this.getLevel(dataNode) < this.getLevel(this.dataNodes[i]); i++) {\n                results.push(this.dataNodes[i]);\n            }\n            return results;\n        };\n    /**\n     * Expands all data nodes in the tree.\n     *\n     * To make this working, the `dataNodes` variable of the TreeControl must be set to all flattened\n     * data nodes of the tree.\n     */\n    /**\n     * Expands all data nodes in the tree.\n     *\n     * To make this working, the `dataNodes` variable of the TreeControl must be set to all flattened\n     * data nodes of the tree.\n     * @return {?}\n     */\n    FlatTreeControl.prototype.expandAll = /**\n     * Expands all data nodes in the tree.\n     *\n     * To make this working, the `dataNodes` variable of the TreeControl must be set to all flattened\n     * data nodes of the tree.\n     * @return {?}\n     */\n        function () {\n            (_a = this.expansionModel).select.apply(_a, this.dataNodes);\n            var _a;\n        };\n    return FlatTreeControl;\n}(BaseTreeControl));\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Nested tree control. Able to expand/collapse a subtree recursively for NestedNode type.\n * @template T\n */\nvar /**\n * Nested tree control. Able to expand/collapse a subtree recursively for NestedNode type.\n * @template T\n */ NestedTreeControl = /*@__PURE__*/ (function (_super) {\n    __extends(NestedTreeControl, _super);\n    /** Construct with nested tree function getChildren. */\n    function NestedTreeControl(getChildren) {\n        var _this = _super.call(this) || this;\n        _this.getChildren = getChildren;\n        return _this;\n    }\n    /**\n     * Expands all dataNodes in the tree.\n     *\n     * To make this working, the `dataNodes` variable of the TreeControl must be set to all root level\n     * data nodes of the tree.\n     */\n    /**\n     * Expands all dataNodes in the tree.\n     *\n     * To make this working, the `dataNodes` variable of the TreeControl must be set to all root level\n     * data nodes of the tree.\n     * @return {?}\n     */\n    NestedTreeControl.prototype.expandAll = /**\n     * Expands all dataNodes in the tree.\n     *\n     * To make this working, the `dataNodes` variable of the TreeControl must be set to all root level\n     * data nodes of the tree.\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this.expansionModel.clear();\n            var /** @type {?} */ allNodes = this.dataNodes.reduce(function (accumulator, dataNode) {\n                return accumulator.concat(_this.getDescendants(dataNode), [dataNode]);\n            }, []);\n            (_a = this.expansionModel).select.apply(_a, allNodes);\n            var _a;\n        };\n    /** Gets a list of descendant dataNodes of a subtree rooted at given data node recursively. */\n    /**\n     * Gets a list of descendant dataNodes of a subtree rooted at given data node recursively.\n     * @param {?} dataNode\n     * @return {?}\n     */\n    NestedTreeControl.prototype.getDescendants = /**\n     * Gets a list of descendant dataNodes of a subtree rooted at given data node recursively.\n     * @param {?} dataNode\n     * @return {?}\n     */\n        function (dataNode) {\n            var /** @type {?} */ descendants = [];\n            this._getDescendants(descendants, dataNode);\n            // Remove the node itself\n            return descendants.splice(1);\n        };\n    /** A helper function to get descendants recursively. */\n    /**\n     * A helper function to get descendants recursively.\n     * @param {?} descendants\n     * @param {?} dataNode\n     * @return {?}\n     */\n    NestedTreeControl.prototype._getDescendants = /**\n     * A helper function to get descendants recursively.\n     * @param {?} descendants\n     * @param {?} dataNode\n     * @return {?}\n     */\n        function (descendants, dataNode) {\n            var _this = this;\n            descendants.push(dataNode);\n            this.getChildren(dataNode).pipe(take(1)).subscribe(function (children) {\n                if (children && children.length > 0) {\n                    children.forEach(function (child) { return _this._getDescendants(descendants, child); });\n                }\n            });\n        };\n    return NestedTreeControl;\n}(BaseTreeControl));\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Context provided to the tree node component.\n * @template T\n */\nvar /**\n * Context provided to the tree node component.\n * @template T\n */ CdkTreeNodeOutletContext = /*@__PURE__*/ (function () {\n    function CdkTreeNodeOutletContext(data) {\n        this.$implicit = data;\n    }\n    return CdkTreeNodeOutletContext;\n}());\n/**\n * Data node definition for the CdkTree.\n * Captures the node's template and a when predicate that describes when this node should be used.\n * @template T\n */\nvar CdkTreeNodeDef = /*@__PURE__*/ (function () {\n    /** @docs-private */\n    function CdkTreeNodeDef(template) {\n        this.template = template;\n    }\n    return CdkTreeNodeDef;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Outlet for nested CdkNode. Put `[cdkTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\nvar CdkTreeNodeOutlet = /*@__PURE__*/ (function () {\n    function CdkTreeNodeOutlet(viewContainer) {\n        this.viewContainer = viewContainer;\n    }\n    return CdkTreeNodeOutlet;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Returns an error to be thrown when there is no usable data.\n * \\@docs-private\n * @return {?}\n */\nfunction getTreeNoValidDataSourceError() {\n    return Error(\"A valid data source must be provided.\");\n}\n/**\n * Returns an error to be thrown when there are multiple nodes that are missing a when function.\n * \\@docs-private\n * @return {?}\n */\nfunction getTreeMultipleDefaultNodeDefsError() {\n    return Error(\"There can only be one default row without a when predicate function.\");\n}\n/**\n * Returns an error to be thrown when there are no matching node defs for a particular set of data.\n * \\@docs-private\n * @return {?}\n */\nfunction getTreeMissingMatchingNodeDefError() {\n    return Error(\"Could not find a matching node definition for the provided node data.\");\n}\n/**\n * Returns an error to be thrown when there are tree control.\n * \\@docs-private\n * @return {?}\n */\nfunction getTreeControlMissingError() {\n    return Error(\"Could not find a tree control for the tree.\");\n}\n/**\n * Returns an error to be thrown when tree control did not implement functions for flat/nested node.\n * \\@docs-private\n * @return {?}\n */\nfunction getTreeControlFunctionsMissingError() {\n    return Error(\"Could not find functions for nested/flat tree in tree control.\");\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Tree node for CdkTree. It contains the data in the tree node.\n * @template T\n */\nvar CdkTreeNode = /*@__PURE__*/ (function () {\n    function CdkTreeNode(_elementRef, _tree) {\n        this._elementRef = _elementRef;\n        this._tree = _tree;\n        /**\n         * Subject that emits when the component has been destroyed.\n         */\n        this._destroyed = new Subject();\n        /**\n         * The role of the node should be 'group' if it's an internal node,\n         * and 'treeitem' if it's a leaf node.\n         */\n        this.role = 'treeitem';\n        CdkTreeNode.mostRecentTreeNode = /** @type {?} */ (this);\n    }\n    Object.defineProperty(CdkTreeNode.prototype, \"data\", {\n        /** The tree node's data. */\n        get: /**\n         * The tree node's data.\n         * @return {?}\n         */ function () { return this._data; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._data = value;\n            this._setRoleFromData();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CdkTreeNode.prototype, \"isExpanded\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._tree.treeControl.isExpanded(this._data);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CdkTreeNode.prototype, \"level\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this._tree.treeControl.getLevel ? this._tree.treeControl.getLevel(this._data) : 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    CdkTreeNode.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            this._destroyed.next();\n            this._destroyed.complete();\n        };\n    /** Focuses the menu item. Implements for FocusableOption. */\n    /**\n     * Focuses the menu item. Implements for FocusableOption.\n     * @return {?}\n     */\n    CdkTreeNode.prototype.focus = /**\n     * Focuses the menu item. Implements for FocusableOption.\n     * @return {?}\n     */\n        function () {\n            this._elementRef.nativeElement.focus();\n        };\n    /**\n     * @return {?}\n     */\n    CdkTreeNode.prototype._setRoleFromData = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            if (this._tree.treeControl.isExpandable) {\n                this.role = this._tree.treeControl.isExpandable(this._data) ? 'group' : 'treeitem';\n            }\n            else {\n                if (!this._tree.treeControl.getChildren) {\n                    throw getTreeControlFunctionsMissingError();\n                }\n                this._tree.treeControl.getChildren(this._data).pipe(takeUntil(this._destroyed))\n                    .subscribe(function (children) {\n                    _this.role = children && children.length ? 'group' : 'treeitem';\n                });\n            }\n        };\n    /**\n     * The most recently created `CdkTreeNode`. We save it in static variable so we can retrieve it\n     * in `CdkTree` and set the data to it.\n     */\n    CdkTreeNode.mostRecentTreeNode = null;\n    return CdkTreeNode;\n}());\n/**\n * CDK tree component that connects with a data source to retrieve data of type `T` and renders\n * dataNodes with hierarchy. Updates the dataNodes when new data is provided by the data source.\n * @template T\n */\nvar CdkTree = /*@__PURE__*/ (function () {\n    function CdkTree(_differs, _changeDetectorRef) {\n        this._differs = _differs;\n        this._changeDetectorRef = _changeDetectorRef;\n        /**\n         * Subject that emits when the component has been destroyed.\n         */\n        this._onDestroy = new Subject();\n        /**\n         * Level of nodes\n         */\n        this._levels = new Map();\n        /**\n         * Stream containing the latest information on what rows are being displayed on screen.\n         * Can be used by the data source to as a heuristic of what data should be provided.\n         */\n        this.viewChange = new BehaviorSubject({ start: 0, end: Number.MAX_VALUE });\n    }\n    Object.defineProperty(CdkTree.prototype, \"dataSource\", {\n        get: /**\n         * Provides a stream containing the latest data array to render. Influenced by the tree's\n         * stream of view window (what dataNodes are currently on screen).\n         * Data source can be an observable of data array, or a dara array to render.\n         * @return {?}\n         */ function () { return this._dataSource; },\n        set: /**\n         * @param {?} dataSource\n         * @return {?}\n         */ function (dataSource) {\n            if (this._dataSource !== dataSource) {\n                this._switchDataSource(dataSource);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    CdkTree.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            this._dataDiffer = this._differs.find([]).create(this.trackBy);\n            if (!this.treeControl) {\n                throw getTreeControlMissingError();\n            }\n        };\n    /**\n     * @return {?}\n     */\n    CdkTree.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            this._nodeOutlet.viewContainer.clear();\n            this._onDestroy.next();\n            this._onDestroy.complete();\n            if (this._dataSource && typeof ((this._dataSource)).disconnect === 'function') {\n                ((this.dataSource)).disconnect(this);\n            }\n            if (this._dataSubscription) {\n                this._dataSubscription.unsubscribe();\n                this._dataSubscription = null;\n            }\n        };\n    /**\n     * @return {?}\n     */\n    CdkTree.prototype.ngAfterContentChecked = /**\n     * @return {?}\n     */\n        function () {\n            var /** @type {?} */ defaultNodeDefs = this._nodeDefs.filter(function (def) { return !def.when; });\n            if (defaultNodeDefs.length > 1) {\n                throw getTreeMultipleDefaultNodeDefsError();\n            }\n            this._defaultNodeDef = defaultNodeDefs[0];\n            if (this.dataSource && this._nodeDefs && !this._dataSubscription) {\n                this._observeRenderChanges();\n            }\n        };\n    /**\n     * Switch to the provided data source by resetting the data and unsubscribing from the current\n     * render change subscription if one exists. If the data source is null, interpret this by\n     * clearing the node outlet. Otherwise start listening for new data.\n     * @param {?} dataSource\n     * @return {?}\n     */\n    CdkTree.prototype._switchDataSource = /**\n     * Switch to the provided data source by resetting the data and unsubscribing from the current\n     * render change subscription if one exists. If the data source is null, interpret this by\n     * clearing the node outlet. Otherwise start listening for new data.\n     * @param {?} dataSource\n     * @return {?}\n     */\n        function (dataSource) {\n            if (this._dataSource && typeof ((this._dataSource)).disconnect === 'function') {\n                ((this.dataSource)).disconnect(this);\n            }\n            if (this._dataSubscription) {\n                this._dataSubscription.unsubscribe();\n                this._dataSubscription = null;\n            }\n            // Remove the all dataNodes if there is now no data source\n            if (!dataSource) {\n                this._nodeOutlet.viewContainer.clear();\n            }\n            this._dataSource = dataSource;\n            if (this._nodeDefs) {\n                this._observeRenderChanges();\n            }\n        };\n    /**\n     * Set up a subscription for the data provided by the data source.\n     * @return {?}\n     */\n    CdkTree.prototype._observeRenderChanges = /**\n     * Set up a subscription for the data provided by the data source.\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            var /** @type {?} */ dataStream;\n            // Cannot use `instanceof DataSource` since the data source could be a literal with\n            // `connect` function and may not extends DataSource.\n            if (typeof ((this._dataSource)).connect === 'function') {\n                dataStream = ((this._dataSource)).connect(this);\n            }\n            else if (this._dataSource instanceof Observable) {\n                dataStream = this._dataSource;\n            }\n            else if (Array.isArray(this._dataSource)) {\n                dataStream = of(this._dataSource);\n            }\n            if (dataStream) {\n                this._dataSubscription = dataStream.pipe(takeUntil(this._onDestroy))\n                    .subscribe(function (data) { return _this.renderNodeChanges(data); });\n            }\n            else {\n                throw getTreeNoValidDataSourceError();\n            }\n        };\n    /** Check for changes made in the data and render each change (node added/removed/moved). */\n    /**\n     * Check for changes made in the data and render each change (node added/removed/moved).\n     * @param {?} data\n     * @param {?=} dataDiffer\n     * @param {?=} viewContainer\n     * @param {?=} parentData\n     * @return {?}\n     */\n    CdkTree.prototype.renderNodeChanges = /**\n     * Check for changes made in the data and render each change (node added/removed/moved).\n     * @param {?} data\n     * @param {?=} dataDiffer\n     * @param {?=} viewContainer\n     * @param {?=} parentData\n     * @return {?}\n     */\n        function (data, dataDiffer, viewContainer, parentData) {\n            var _this = this;\n            if (dataDiffer === void 0) {\n                dataDiffer = this._dataDiffer;\n            }\n            if (viewContainer === void 0) {\n                viewContainer = this._nodeOutlet.viewContainer;\n            }\n            var /** @type {?} */ changes = dataDiffer.diff(data);\n            if (!changes) {\n                return;\n            }\n            changes.forEachOperation(function (item, adjustedPreviousIndex, currentIndex) {\n                if (item.previousIndex == null) {\n                    _this.insertNode(data[currentIndex], currentIndex, viewContainer, parentData);\n                }\n                else if (currentIndex == null) {\n                    viewContainer.remove(adjustedPreviousIndex);\n                    _this._levels.delete(item.item);\n                }\n                else {\n                    var /** @type {?} */ view = viewContainer.get(adjustedPreviousIndex);\n                    viewContainer.move(/** @type {?} */ ((view)), currentIndex);\n                }\n            });\n            this._changeDetectorRef.detectChanges();\n        };\n    /**\n     * Finds the matching node definition that should be used for this node data. If there is only\n     * one node definition, it is returned. Otherwise, find the node definition that has a when\n     * predicate that returns true with the data. If none return true, return the default node\n     * definition.\n     */\n    /**\n     * Finds the matching node definition that should be used for this node data. If there is only\n     * one node definition, it is returned. Otherwise, find the node definition that has a when\n     * predicate that returns true with the data. If none return true, return the default node\n     * definition.\n     * @param {?} data\n     * @param {?} i\n     * @return {?}\n     */\n    CdkTree.prototype._getNodeDef = /**\n     * Finds the matching node definition that should be used for this node data. If there is only\n     * one node definition, it is returned. Otherwise, find the node definition that has a when\n     * predicate that returns true with the data. If none return true, return the default node\n     * definition.\n     * @param {?} data\n     * @param {?} i\n     * @return {?}\n     */\n        function (data, i) {\n            if (this._nodeDefs.length === 1) {\n                return this._nodeDefs.first;\n            }\n            var /** @type {?} */ nodeDef = this._nodeDefs.find(function (def) { return def.when && def.when(i, data); }) || this._defaultNodeDef;\n            if (!nodeDef) {\n                throw getTreeMissingMatchingNodeDefError();\n            }\n            return nodeDef;\n        };\n    /**\n     * Create the embedded view for the data node template and place it in the correct index location\n     * within the data node view container.\n     */\n    /**\n     * Create the embedded view for the data node template and place it in the correct index location\n     * within the data node view container.\n     * @param {?} nodeData\n     * @param {?} index\n     * @param {?=} viewContainer\n     * @param {?=} parentData\n     * @return {?}\n     */\n    CdkTree.prototype.insertNode = /**\n     * Create the embedded view for the data node template and place it in the correct index location\n     * within the data node view container.\n     * @param {?} nodeData\n     * @param {?} index\n     * @param {?=} viewContainer\n     * @param {?=} parentData\n     * @return {?}\n     */\n        function (nodeData, index, viewContainer, parentData) {\n            var /** @type {?} */ node = this._getNodeDef(nodeData, index);\n            // Node context that will be provided to created embedded view\n            var /** @type {?} */ context = new CdkTreeNodeOutletContext(nodeData);\n            // If the tree is flat tree, then use the `getLevel` function in flat tree control\n            // Otherwise, use the level of parent node.\n            if (this.treeControl.getLevel) {\n                context.level = this.treeControl.getLevel(nodeData);\n            }\n            else if (typeof parentData !== 'undefined' && this._levels.has(parentData)) {\n                context.level = /** @type {?} */ ((this._levels.get(parentData))) + 1;\n            }\n            else {\n                context.level = 0;\n            }\n            this._levels.set(nodeData, context.level);\n            // Use default tree nodeOutlet, or nested node's nodeOutlet\n            var /** @type {?} */ container = viewContainer ? viewContainer : this._nodeOutlet.viewContainer;\n            container.createEmbeddedView(node.template, context, index);\n            // Set the data to just created `CdkTreeNode`.\n            // The `CdkTreeNode` created from `createEmbeddedView` will be saved in static variable\n            //     `mostRecentTreeNode`. We get it from static variable and pass the node data to it.\n            if (CdkTreeNode.mostRecentTreeNode) {\n                CdkTreeNode.mostRecentTreeNode.data = nodeData;\n            }\n        };\n    return CdkTree;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Nested node is a child of `<cdk-tree>`. It works with nested tree.\n * By using `cdk-nested-tree-node` component in tree node template, children of the parent node will\n * be added in the `cdkTreeNodeOutlet` in tree node template.\n * For example:\n *   ```html\n *   <cdk-mested-tree-node>\n *     {{node.name}}\n *     <ng-template cdkTreeNodeOutlet></ng-template>\n *   </cdk-tree-node>\n *   ```\n * The children of node will be automatically added to `cdkTreeNodeOutlet`, the result dom will be\n * like this:\n *   ```html\n *   <cdk-nested-tree-node>\n *     {{node.name}}\n *      <cdk-nested-tree-node>{{child1.name}}</cdk-tree-node>\n *      <cdk-nested-tree-node>{{child2.name}}</cdk-tree-node>\n *   </cdk-tree-node>\n *   ```\n * @template T\n */\nvar CdkNestedTreeNode = /*@__PURE__*/ (function (_super) {\n    __extends(CdkNestedTreeNode, _super);\n    function CdkNestedTreeNode(_elementRef, _tree, _differs) {\n        var _this = _super.call(this, _elementRef, _tree) || this;\n        _this._elementRef = _elementRef;\n        _this._tree = _tree;\n        _this._differs = _differs;\n        return _this;\n    }\n    /**\n     * @return {?}\n     */\n    CdkNestedTreeNode.prototype.ngAfterContentInit = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this._dataDiffer = this._differs.find([]).create(this._tree.trackBy);\n            if (!this._tree.treeControl.getChildren) {\n                throw getTreeControlFunctionsMissingError();\n            }\n            this._tree.treeControl.getChildren(this.data).pipe(takeUntil(this._destroyed))\n                .subscribe(function (result) {\n                _this._children = result;\n                _this.updateChildrenNodes();\n            });\n            this.nodeOutlet.changes.pipe(takeUntil(this._destroyed))\n                .subscribe(function () { return _this.updateChildrenNodes(); });\n        };\n    /**\n     * @return {?}\n     */\n    CdkNestedTreeNode.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            this._clear();\n            _super.prototype.ngOnDestroy.call(this);\n        };\n    /** Add children dataNodes to the NodeOutlet */\n    /**\n     * Add children dataNodes to the NodeOutlet\n     * @return {?}\n     */\n    CdkNestedTreeNode.prototype.updateChildrenNodes = /**\n     * Add children dataNodes to the NodeOutlet\n     * @return {?}\n     */\n        function () {\n            if (this.nodeOutlet.length && this._children) {\n                var /** @type {?} */ viewContainer = this.nodeOutlet.first.viewContainer;\n                this._tree.renderNodeChanges(this._children, this._dataDiffer, viewContainer, this._data);\n            }\n            else {\n                // Reset the data differ if there's no children nodes displayed\n                this._dataDiffer.diff([]);\n            }\n        };\n    /** Clear the children dataNodes. */\n    /**\n     * Clear the children dataNodes.\n     * @return {?}\n     */\n    CdkNestedTreeNode.prototype._clear = /**\n     * Clear the children dataNodes.\n     * @return {?}\n     */\n        function () {\n            if (this.nodeOutlet && this.nodeOutlet.first) {\n                this.nodeOutlet.first.viewContainer.clear();\n                this._dataDiffer.diff([]);\n            }\n        };\n    return CdkNestedTreeNode;\n}(CdkTreeNode));\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Indent for the children tree dataNodes.\n * This directive will add left-padding to the node to show hierarchy.\n * @template T\n */\nvar CdkTreeNodePadding = /*@__PURE__*/ (function () {\n    function CdkTreeNodePadding(_treeNode, _tree, _renderer, _element, _dir) {\n        var _this = this;\n        this._treeNode = _treeNode;\n        this._tree = _tree;\n        this._renderer = _renderer;\n        this._element = _element;\n        this._dir = _dir;\n        /**\n         * Subject that emits when the component has been destroyed.\n         */\n        this._destroyed = new Subject();\n        this._indent = 40;\n        this._setPadding();\n        if (this._dir) {\n            this._dir.change.pipe(takeUntil(this._destroyed)).subscribe(function () { return _this._setPadding(); });\n        }\n    }\n    Object.defineProperty(CdkTreeNodePadding.prototype, \"level\", {\n        get: /**\n         * The level of depth of the tree node. The padding will be `level * indent` pixels.\n         * @return {?}\n         */ function () { return this._level; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._level = coerceNumberProperty(value);\n            this._setPadding();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CdkTreeNodePadding.prototype, \"indent\", {\n        get: /**\n         * The indent for each level. Default number 40px from material design menu sub-menu spec.\n         * @return {?}\n         */ function () { return this._indent; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._indent = coerceNumberProperty(value);\n            this._setPadding();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    CdkTreeNodePadding.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            this._destroyed.next();\n            this._destroyed.complete();\n        };\n    /** The padding indent value for the tree node. Returns a string with px numbers if not null. */\n    /**\n     * The padding indent value for the tree node. Returns a string with px numbers if not null.\n     * @return {?}\n     */\n    CdkTreeNodePadding.prototype._paddingIndent = /**\n     * The padding indent value for the tree node. Returns a string with px numbers if not null.\n     * @return {?}\n     */\n        function () {\n            var /** @type {?} */ nodeLevel = (this._treeNode.data && this._tree.treeControl.getLevel)\n                ? this._tree.treeControl.getLevel(this._treeNode.data)\n                : null;\n            var /** @type {?} */ level = this._level || nodeLevel;\n            return level ? level * this._indent + \"px\" : null;\n        };\n    /**\n     * @return {?}\n     */\n    CdkTreeNodePadding.prototype._setPadding = /**\n     * @return {?}\n     */\n        function () {\n            var /** @type {?} */ padding = this._paddingIndent();\n            var /** @type {?} */ paddingProp = this._dir && this._dir.value === 'rtl' ? 'paddingRight' : 'paddingLeft';\n            this._renderer.setStyle(this._element.nativeElement, paddingProp, padding);\n        };\n    return CdkTreeNodePadding;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Node toggle to expand/collapse the node.\n * @template T\n */\nvar CdkTreeNodeToggle = /*@__PURE__*/ (function () {\n    function CdkTreeNodeToggle(_tree, _treeNode) {\n        this._tree = _tree;\n        this._treeNode = _treeNode;\n        this._recursive = false;\n    }\n    Object.defineProperty(CdkTreeNodeToggle.prototype, \"recursive\", {\n        get: /**\n         * Whether expand/collapse the node recursively.\n         * @return {?}\n         */ function () { return this._recursive; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) { this._recursive = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    CdkTreeNodeToggle.prototype._toggle = /**\n     * @param {?} event\n     * @return {?}\n     */\n        function (event) {\n            this.recursive\n                ? this._tree.treeControl.toggleDescendants(this._treeNode.data)\n                : this._tree.treeControl.toggle(this._treeNode.data);\n            event.stopPropagation();\n        };\n    return CdkTreeNodeToggle;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar /** @type {?} */ EXPORTED_DECLARATIONS = [\n    CdkNestedTreeNode,\n    CdkTreeNodeDef,\n    CdkTreeNodePadding,\n    CdkTreeNodeToggle,\n    CdkTree,\n    CdkTreeNode,\n    CdkTreeNodeOutlet,\n];\nvar CdkTreeModule = /*@__PURE__*/ (function () {\n    function CdkTreeModule() {\n    }\n    return CdkTreeModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nexport { BaseTreeControl, FlatTreeControl, NestedTreeControl, CdkNestedTreeNode, CdkTreeNodeOutletContext, CdkTreeNodeDef, CdkTreeNodePadding, CdkTreeNodeOutlet, CdkTreeNode, CdkTree, getTreeNoValidDataSourceError, getTreeMultipleDefaultNodeDefsError, getTreeMissingMatchingNodeDefError, getTreeControlMissingError, getTreeControlFunctionsMissingError, CdkTreeModule, CdkTreeNodeToggle };\n//# sourceMappingURL=tree.es5.js.map\n",null]}