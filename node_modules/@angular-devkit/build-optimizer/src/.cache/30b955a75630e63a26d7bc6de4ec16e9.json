{"remainingRequest":"/home/liutao/Project/0/oncology/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/home/liutao/Project/0/oncology/node_modules/@angular/material/esm5/expansion.es5.js","dependencies":[{"path":"/home/liutao/Project/0/oncology/node_modules/@angular/material/esm5/expansion.es5.js","mtime":1526941038000},{"path":"/home/liutao/Project/0/oncology/node_modules/cache-loader/dist/cjs.js","mtime":1539266424898},{"path":"/home/liutao/Project/0/oncology/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1526531406000}],"contextDependencies":[],"result":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** PURE_IMPORTS_START tslib,_angular_core,_angular_cdk_coercion,_angular_cdk_accordion,_angular_animations,_angular_cdk_collections,_angular_cdk_portal,rxjs,rxjs_operators,_angular_cdk_a11y,_angular_cdk_keycodes,_angular_common PURE_IMPORTS_END */\nimport { __extends } from 'tslib';\nimport { Directive, Input, TemplateRef, ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, Optional, ViewContainerRef, ViewEncapsulation, ElementRef, Host, NgModule } from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { CdkAccordion, CdkAccordionItem, CdkAccordionModule } from '@angular/cdk/accordion';\nimport { animate, animateChild, group, state, style, transition, trigger, query } from '@angular/animations';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\nimport { TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { Subject, merge, Subscription } from 'rxjs';\nimport { filter, startWith, take } from 'rxjs/operators';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { ENTER, SPACE } from '@angular/cdk/keycodes';\nimport { CommonModule } from '@angular/common';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Directive for a Material Design Accordion.\n */\nvar MatAccordion = /*@__PURE__*/ (function (_super) {\n    __extends(MatAccordion, _super);\n    function MatAccordion() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this._hideToggle = false;\n        /**\n         * The display mode used for all expansion panels in the accordion. Currently two display\n         * modes exist:\n         *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n         *     panel at a different elevation from the reset of the accordion.\n         *  flat - no spacing is placed around expanded panels, showing all panels at the same\n         *     elevation.\n         */\n        _this.displayMode = 'default';\n        return _this;\n    }\n    Object.defineProperty(MatAccordion.prototype, \"hideToggle\", {\n        get: /**\n         * Whether the expansion indicator should be hidden.\n         * @return {?}\n         */ function () { return this._hideToggle; },\n        set: /**\n         * @param {?} show\n         * @return {?}\n         */ function (show) { this._hideToggle = coerceBooleanProperty(show); },\n        enumerable: true,\n        configurable: true\n    });\n    return MatAccordion;\n}(CdkAccordion));\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Time and timing curve for expansion panel animations.\n */\nvar /** @type {?} */ EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n/**\n * Animations used by the Material expansion panel.\n */\nvar /** @type {?} */ matExpansionAnimations = {\n    /** Animation that rotates the indicator arrow. */\n    indicatorRotate: /*@__PURE__*/ trigger('indicatorRotate', [\n        /*@__PURE__*/ state('collapsed', /*@__PURE__*/ style({ transform: 'rotate(0deg)' })),\n        /*@__PURE__*/ state('expanded', /*@__PURE__*/ style({ transform: 'rotate(180deg)' })),\n        /*@__PURE__*/ transition('expanded <=> collapsed', /*@__PURE__*/ animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n    ]),\n    /** Animation that expands and collapses the panel header height. */\n    expansionHeaderHeight: /*@__PURE__*/ trigger('expansionHeight', [\n        /*@__PURE__*/ state('collapsed', /*@__PURE__*/ style({\n            height: '{{collapsedHeight}}',\n        }), {\n            params: { collapsedHeight: '48px' },\n        }),\n        /*@__PURE__*/ state('expanded', /*@__PURE__*/ style({\n            height: '{{expandedHeight}}'\n        }), {\n            params: { expandedHeight: '64px' }\n        }),\n        /*@__PURE__*/ transition('expanded <=> collapsed', /*@__PURE__*/ group([\n            /*@__PURE__*/ query('@indicatorRotate', /*@__PURE__*/ animateChild(), { optional: true }),\n            /*@__PURE__*/ animate(EXPANSION_PANEL_ANIMATION_TIMING),\n        ])),\n    ]),\n    /** Animation that expands and collapses the panel content. */\n    bodyExpansion: /*@__PURE__*/ trigger('bodyExpansion', [\n        /*@__PURE__*/ state('collapsed', /*@__PURE__*/ style({ height: '0px', visibility: 'hidden' })),\n        /*@__PURE__*/ state('expanded', /*@__PURE__*/ style({ height: '*', visibility: 'visible' })),\n        /*@__PURE__*/ transition('expanded <=> collapsed', /*@__PURE__*/ animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n    ])\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\nvar MatExpansionPanelContent = /*@__PURE__*/ (function () {\n    function MatExpansionPanelContent(_template) {\n        this._template = _template;\n    }\n    return MatExpansionPanelContent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Counter for generating unique element ids.\n */\nvar /** @type {?} */ uniqueId = 0;\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\nvar MatExpansionPanel = /*@__PURE__*/ (function (_super) {\n    __extends(MatExpansionPanel, _super);\n    function MatExpansionPanel(accordion, _changeDetectorRef, _uniqueSelectionDispatcher, _viewContainerRef) {\n        var _this = _super.call(this, accordion, _changeDetectorRef, _uniqueSelectionDispatcher) || this;\n        _this._viewContainerRef = _viewContainerRef;\n        _this._hideToggle = false;\n        /**\n         * Stream that emits for changes in `\\@Input` properties.\n         */\n        _this._inputChanges = new Subject();\n        /**\n         * ID for the associated header element. Used for a11y labelling.\n         */\n        _this._headerId = \"mat-expansion-panel-header-\" + uniqueId++;\n        _this.accordion = accordion;\n        return _this;\n    }\n    Object.defineProperty(MatExpansionPanel.prototype, \"hideToggle\", {\n        get: /**\n         * Whether the toggle indicator should be hidden.\n         * @return {?}\n         */ function () { return this._hideToggle; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */ function (value) {\n            this._hideToggle = coerceBooleanProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** Whether the expansion indicator should be hidden. */\n    /**\n     * Whether the expansion indicator should be hidden.\n     * @return {?}\n     */\n    MatExpansionPanel.prototype._getHideToggle = /**\n     * Whether the expansion indicator should be hidden.\n     * @return {?}\n     */\n        function () {\n            if (this.accordion) {\n                return this.accordion.hideToggle;\n            }\n            return this.hideToggle;\n        };\n    /** Determines whether the expansion panel should have spacing between it and its siblings. */\n    /**\n     * Determines whether the expansion panel should have spacing between it and its siblings.\n     * @return {?}\n     */\n    MatExpansionPanel.prototype._hasSpacing = /**\n     * Determines whether the expansion panel should have spacing between it and its siblings.\n     * @return {?}\n     */\n        function () {\n            if (this.accordion) {\n                return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n            }\n            return false;\n        };\n    /** Gets the expanded state string. */\n    /**\n     * Gets the expanded state string.\n     * @return {?}\n     */\n    MatExpansionPanel.prototype._getExpandedState = /**\n     * Gets the expanded state string.\n     * @return {?}\n     */\n        function () {\n            return this.expanded ? 'expanded' : 'collapsed';\n        };\n    /**\n     * @return {?}\n     */\n    MatExpansionPanel.prototype.ngAfterContentInit = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            if (this._lazyContent) {\n                // Render the content as soon as the panel becomes open.\n                this.opened.pipe(startWith(/** @type {?} */ ((null))), filter(function () { return _this.expanded && !_this._portal; }), take(1)).subscribe(function () {\n                    _this._portal = new TemplatePortal(_this._lazyContent._template, _this._viewContainerRef);\n                });\n            }\n        };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    MatExpansionPanel.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n        function (changes) {\n            this._inputChanges.next(changes);\n        };\n    /**\n     * @return {?}\n     */\n    MatExpansionPanel.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            _super.prototype.ngOnDestroy.call(this);\n            this._inputChanges.complete();\n        };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    MatExpansionPanel.prototype._bodyAnimation = /**\n     * @param {?} event\n     * @return {?}\n     */\n        function (event) {\n            var /** @type {?} */ classList = event.element.classList;\n            var /** @type {?} */ cssClass = 'mat-expanded';\n            var phaseName = event.phaseName, toState = event.toState;\n            // Toggle the body's `overflow: hidden` class when closing starts or when expansion ends in\n            // order to prevent the cases where switching too early would cause the animation to jump.\n            // Note that we do it directly on the DOM element to avoid the slight delay that comes\n            // with doing it via change detection.\n            if (phaseName === 'done' && toState === 'expanded') {\n                classList.add(cssClass);\n            }\n            else if (phaseName === 'start' && toState === 'collapsed') {\n                classList.remove(cssClass);\n            }\n        };\n    return MatExpansionPanel;\n}(CdkAccordionItem));\nvar MatExpansionPanelActionRow = /*@__PURE__*/ (function () {\n    function MatExpansionPanelActionRow() {\n    }\n    return MatExpansionPanelActionRow;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\nvar MatExpansionPanelHeader = /*@__PURE__*/ (function () {\n    function MatExpansionPanelHeader(panel, _element, _focusMonitor, _changeDetectorRef) {\n        var _this = this;\n        this.panel = panel;\n        this._element = _element;\n        this._focusMonitor = _focusMonitor;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._parentChangeSubscription = Subscription.EMPTY;\n        // Since the toggle state depends on an @Input on the panel, we\n        // need to  subscribe and trigger change detection manually.\n        this._parentChangeSubscription = merge(panel.opened, panel.closed, panel._inputChanges.pipe(filter(function (changes) { return !!(changes[\"hideToggle\"] || changes[\"disabled\"]); })))\n            .subscribe(function () { return _this._changeDetectorRef.markForCheck(); });\n        _focusMonitor.monitor(_element.nativeElement);\n    }\n    /** Toggles the expanded state of the panel. */\n    /**\n     * Toggles the expanded state of the panel.\n     * @return {?}\n     */\n    MatExpansionPanelHeader.prototype._toggle = /**\n     * Toggles the expanded state of the panel.\n     * @return {?}\n     */\n        function () {\n            this.panel.toggle();\n        };\n    /** Gets whether the panel is expanded. */\n    /**\n     * Gets whether the panel is expanded.\n     * @return {?}\n     */\n    MatExpansionPanelHeader.prototype._isExpanded = /**\n     * Gets whether the panel is expanded.\n     * @return {?}\n     */\n        function () {\n            return this.panel.expanded;\n        };\n    /** Gets the expanded state string of the panel. */\n    /**\n     * Gets the expanded state string of the panel.\n     * @return {?}\n     */\n    MatExpansionPanelHeader.prototype._getExpandedState = /**\n     * Gets the expanded state string of the panel.\n     * @return {?}\n     */\n        function () {\n            return this.panel._getExpandedState();\n        };\n    /** Gets the panel id. */\n    /**\n     * Gets the panel id.\n     * @return {?}\n     */\n    MatExpansionPanelHeader.prototype._getPanelId = /**\n     * Gets the panel id.\n     * @return {?}\n     */\n        function () {\n            return this.panel.id;\n        };\n    /** Gets whether the expand indicator should be shown. */\n    /**\n     * Gets whether the expand indicator should be shown.\n     * @return {?}\n     */\n    MatExpansionPanelHeader.prototype._showToggle = /**\n     * Gets whether the expand indicator should be shown.\n     * @return {?}\n     */\n        function () {\n            return !this.panel.hideToggle && !this.panel.disabled;\n        };\n    /** Handle keydown event calling to toggle() if appropriate. */\n    /**\n     * Handle keydown event calling to toggle() if appropriate.\n     * @param {?} event\n     * @return {?}\n     */\n    MatExpansionPanelHeader.prototype._keydown = /**\n     * Handle keydown event calling to toggle() if appropriate.\n     * @param {?} event\n     * @return {?}\n     */\n        function (event) {\n            switch (event.keyCode) {\n                // Toggle for space and enter keys.\n                case SPACE:\n                case ENTER:\n                    event.preventDefault();\n                    this._toggle();\n                    break;\n                default:\n                    return;\n            }\n        };\n    /**\n     * @return {?}\n     */\n    MatExpansionPanelHeader.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            this._parentChangeSubscription.unsubscribe();\n            this._focusMonitor.stopMonitoring(this._element.nativeElement);\n        };\n    return MatExpansionPanelHeader;\n}());\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\nvar MatExpansionPanelDescription = /*@__PURE__*/ (function () {\n    function MatExpansionPanelDescription() {\n    }\n    return MatExpansionPanelDescription;\n}());\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\nvar MatExpansionPanelTitle = /*@__PURE__*/ (function () {\n    function MatExpansionPanelTitle() {\n    }\n    return MatExpansionPanelTitle;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar MatExpansionModule = /*@__PURE__*/ (function () {\n    function MatExpansionModule() {\n    }\n    return MatExpansionModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nexport { MatExpansionModule, MatAccordion, MatExpansionPanel, MatExpansionPanelActionRow, MatExpansionPanelHeader, MatExpansionPanelDescription, MatExpansionPanelTitle, MatExpansionPanelContent, EXPANSION_PANEL_ANIMATION_TIMING, matExpansionAnimations };\n//# sourceMappingURL=expansion.es5.js.map\n",null]}