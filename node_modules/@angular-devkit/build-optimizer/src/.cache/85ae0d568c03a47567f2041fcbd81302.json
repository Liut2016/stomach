{"remainingRequest":"/home/liutao/Project/0/oncology/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/home/liutao/Project/0/oncology/node_modules/@swimlane/ngx-datatable/release/directives/orderable.directive.js","dependencies":[{"path":"/home/liutao/Project/0/oncology/node_modules/@swimlane/ngx-datatable/release/directives/orderable.directive.js","mtime":1511963642000},{"path":"/home/liutao/Project/0/oncology/node_modules/cache-loader/dist/cjs.js","mtime":1539266424898},{"path":"/home/liutao/Project/0/oncology/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1526531406000}],"contextDependencies":[],"result":["\"use strict\";\nvar __decorate = /*@__PURE__*/ require(\"tslib\").__decorate;\nvar __metadata = /*@__PURE__*/ require(\"tslib\").__metadata;\nvar __param = /*@__PURE__*/ require(\"tslib\").__param;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = require(\"@angular/core\");\nvar draggable_directive_1 = require(\"./draggable.directive\");\nvar platform_browser_1 = require(\"@angular/platform-browser\");\nvar OrderableDirective = /*@__PURE__*/ (function () {\n    function OrderableDirective(differs, document) {\n        this.document = document;\n        this.reorder = new core_1.EventEmitter();\n        this.differ = differs.find({}).create();\n    }\n    OrderableDirective.prototype.ngAfterContentInit = function () {\n        // HACK: Investigate Better Way\n        this.updateSubscriptions();\n        this.draggables.changes.subscribe(this.updateSubscriptions.bind(this));\n    };\n    OrderableDirective.prototype.ngOnDestroy = function () {\n        this.draggables.forEach(function (d) {\n            d.dragStart.unsubscribe();\n            d.dragEnd.unsubscribe();\n        });\n    };\n    OrderableDirective.prototype.updateSubscriptions = function () {\n        var _this = this;\n        var diffs = this.differ.diff(this.createMapDiffs());\n        if (diffs) {\n            var subscribe = function (_a) {\n                var currentValue = _a.currentValue, previousValue = _a.previousValue;\n                unsubscribe_1({ previousValue: previousValue });\n                if (currentValue) {\n                    currentValue.dragStart.subscribe(_this.onDragStart.bind(_this));\n                    currentValue.dragEnd.subscribe(_this.onDragEnd.bind(_this));\n                }\n            };\n            var unsubscribe_1 = function (_a) {\n                var previousValue = _a.previousValue;\n                if (previousValue) {\n                    previousValue.dragStart.unsubscribe();\n                    previousValue.dragEnd.unsubscribe();\n                }\n            };\n            diffs.forEachAddedItem(subscribe.bind(this));\n            // diffs.forEachChangedItem(subscribe.bind(this));\n            diffs.forEachRemovedItem(unsubscribe_1.bind(this));\n        }\n    };\n    OrderableDirective.prototype.onDragStart = function () {\n        this.positions = {};\n        var i = 0;\n        for (var _i = 0, _a = this.draggables.toArray(); _i < _a.length; _i++) {\n            var dragger = _a[_i];\n            var elm = dragger.element;\n            var left = parseInt(elm.offsetLeft.toString(), 0);\n            this.positions[dragger.dragModel.prop] = {\n                left: left,\n                right: left + parseInt(elm.offsetWidth.toString(), 0),\n                index: i++,\n                element: elm\n            };\n        }\n    };\n    OrderableDirective.prototype.onDragEnd = function (_a) {\n        var element = _a.element, model = _a.model, event = _a.event;\n        var prevPos = this.positions[model.prop];\n        var target = this.isTarget(model, event);\n        if (target) {\n            this.reorder.emit({\n                prevIndex: prevPos.index,\n                newIndex: target.i,\n                model: model\n            });\n        }\n        element.style.left = 'auto';\n    };\n    OrderableDirective.prototype.isTarget = function (model, event) {\n        var i = 0;\n        var x = event.x || event.clientX;\n        var y = event.y || event.clientY;\n        var targets = this.document.elementsFromPoint(x, y);\n        var _loop_1 = function (prop) {\n            // current column position which throws event.\n            var pos = this_1.positions[prop];\n            // since we drag the inner span, we need to find it in the elements at the cursor\n            if (model.prop !== prop && targets.find(function (el) { return el === pos.element; })) {\n                return { value: {\n                        pos: pos,\n                        i: i\n                    } };\n            }\n            i++;\n        };\n        var this_1 = this;\n        for (var prop in this.positions) {\n            var state_1 = _loop_1(prop);\n            if (typeof state_1 === \"object\")\n                return state_1.value;\n        }\n    };\n    OrderableDirective.prototype.createMapDiffs = function () {\n        return this.draggables.toArray()\n            .reduce(function (acc, curr) {\n            acc[curr.dragModel.$$id] = curr;\n            return acc;\n        }, {});\n    };\n    __decorate([\n        core_1.Output(),\n        __metadata(\"design:type\", core_1.EventEmitter)\n    ], OrderableDirective.prototype, \"reorder\", void 0);\n    __decorate([\n        core_1.ContentChildren(draggable_directive_1.DraggableDirective, { descendants: true }),\n        __metadata(\"design:type\", core_1.QueryList)\n    ], OrderableDirective.prototype, \"draggables\", void 0);\n    OrderableDirective = __decorate([\n        core_1.Directive({ selector: '[orderable]' }),\n        __param(1, core_1.Inject(platform_browser_1.DOCUMENT))\n    ], OrderableDirective);\n    return OrderableDirective;\n}());\nexports.OrderableDirective = OrderableDirective;\n",null]}