{"remainingRequest":"/home/liutao/Project/0/oncology/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/home/liutao/Project/0/oncology/node_modules/@swimlane/ngx-datatable/release/utils/math.js","dependencies":[{"path":"/home/liutao/Project/0/oncology/node_modules/@swimlane/ngx-datatable/release/utils/math.js","mtime":1511963642000},{"path":"/home/liutao/Project/0/oncology/node_modules/cache-loader/dist/cjs.js","mtime":1539266424898},{"path":"/home/liutao/Project/0/oncology/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1526531406000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar column_1 = require(\"./column\");\n/**\n * Calculates the Total Flex Grow\n */\nfunction getTotalFlexGrow(columns) {\n    var totalFlexGrow = 0;\n    for (var _i = 0, columns_1 = columns; _i < columns_1.length; _i++) {\n        var c = columns_1[_i];\n        totalFlexGrow += c.flexGrow || 0;\n    }\n    return totalFlexGrow;\n}\nexports.getTotalFlexGrow = getTotalFlexGrow;\n/**\n * Adjusts the column widths.\n * Inspired by: https://github.com/facebook/fixed-data-table/blob/master/src/FixedDataTableWidthHelper.js\n */\nfunction adjustColumnWidths(allColumns, expectedWidth) {\n    var columnsWidth = column_1.columnsTotalWidth(allColumns);\n    var totalFlexGrow = getTotalFlexGrow(allColumns);\n    var colsByGroup = column_1.columnsByPin(allColumns);\n    if (columnsWidth !== expectedWidth) {\n        scaleColumns(colsByGroup, expectedWidth, totalFlexGrow);\n    }\n}\nexports.adjustColumnWidths = adjustColumnWidths;\n/**\n * Resizes columns based on the flexGrow property, while respecting manually set widths\n */\nfunction scaleColumns(colsByGroup, maxWidth, totalFlexGrow) {\n    // calculate total width and flexgrow points for coulumns that can be resized\n    for (var attr in colsByGroup) {\n        for (var _i = 0, _a = colsByGroup[attr]; _i < _a.length; _i++) {\n            var column = _a[_i];\n            if (!column.canAutoResize) {\n                maxWidth -= column.width;\n                totalFlexGrow -= column.flexGrow;\n            }\n            else {\n                column.width = 0;\n            }\n        }\n    }\n    var hasMinWidth = {};\n    var remainingWidth = maxWidth;\n    // resize columns until no width is left to be distributed\n    do {\n        var widthPerFlexPoint = remainingWidth / totalFlexGrow;\n        remainingWidth = 0;\n        for (var attr in colsByGroup) {\n            for (var _b = 0, _c = colsByGroup[attr]; _b < _c.length; _b++) {\n                var column = _c[_b];\n                // if the column can be resize and it hasn't reached its minimum width yet\n                if (column.canAutoResize && !hasMinWidth[column.prop]) {\n                    var newWidth = column.width + column.flexGrow * widthPerFlexPoint;\n                    if (column.minWidth !== undefined && newWidth < column.minWidth) {\n                        remainingWidth += newWidth - column.minWidth;\n                        column.width = column.minWidth;\n                        hasMinWidth[column.prop] = true;\n                    }\n                    else {\n                        column.width = newWidth;\n                    }\n                }\n            }\n        }\n    } while (remainingWidth !== 0);\n}\n/**\n * Forces the width of the columns to\n * distribute equally but overflowing when necessary\n *\n * Rules:\n *\n *  - If combined withs are less than the total width of the grid,\n *    proportion the widths given the min / max / normal widths to fill the width.\n *\n *  - If the combined widths, exceed the total width of the grid,\n *    use the standard widths.\n *\n *  - If a column is resized, it should always use that width\n *\n *  - The proportional widths should never fall below min size if specified.\n *\n *  - If the grid starts off small but then becomes greater than the size ( + / - )\n *    the width should use the original width; not the newly proportioned widths.\n */\nfunction forceFillColumnWidths(allColumns, expectedWidth, startIdx, allowBleed, defaultColWidth) {\n    if (defaultColWidth === void 0) { defaultColWidth = 300; }\n    var columnsToResize = allColumns\n        .slice(startIdx + 1, allColumns.length)\n        .filter(function (c) {\n        return c.canAutoResize !== false;\n    });\n    for (var _i = 0, columnsToResize_1 = columnsToResize; _i < columnsToResize_1.length; _i++) {\n        var column = columnsToResize_1[_i];\n        if (!column.$$oldWidth) {\n            column.$$oldWidth = column.width;\n        }\n    }\n    var additionWidthPerColumn = 0;\n    var exceedsWindow = false;\n    var contentWidth = getContentWidth(allColumns, defaultColWidth);\n    var remainingWidth = expectedWidth - contentWidth;\n    var columnsProcessed = [];\n    // This loop takes care of the\n    do {\n        additionWidthPerColumn = remainingWidth / columnsToResize.length;\n        exceedsWindow = contentWidth >= expectedWidth;\n        for (var _a = 0, columnsToResize_2 = columnsToResize; _a < columnsToResize_2.length; _a++) {\n            var column = columnsToResize_2[_a];\n            if (exceedsWindow && allowBleed) {\n                column.width = column.$$oldWidth || column.width || defaultColWidth;\n            }\n            else {\n                var newSize = (column.width || defaultColWidth) + additionWidthPerColumn;\n                if (column.minWidth && newSize < column.minWidth) {\n                    column.width = column.minWidth;\n                    columnsProcessed.push(column);\n                }\n                else if (column.maxWidth && newSize > column.maxWidth) {\n                    column.width = column.maxWidth;\n                    columnsProcessed.push(column);\n                }\n                else {\n                    column.width = newSize;\n                }\n            }\n            column.width = Math.max(0, column.width);\n        }\n        contentWidth = getContentWidth(allColumns);\n        remainingWidth = expectedWidth - contentWidth;\n        removeProcessedColumns(columnsToResize, columnsProcessed);\n    } while (remainingWidth > 0 && columnsToResize.length !== 0);\n}\nexports.forceFillColumnWidths = forceFillColumnWidths;\n/**\n * Remove the processed columns from the current active columns.\n */\nfunction removeProcessedColumns(columnsToResize, columnsProcessed) {\n    for (var _i = 0, columnsProcessed_1 = columnsProcessed; _i < columnsProcessed_1.length; _i++) {\n        var column = columnsProcessed_1[_i];\n        var index = columnsToResize.indexOf(column);\n        columnsToResize.splice(index, 1);\n    }\n}\n/**\n * Gets the width of the columns\n */\nfunction getContentWidth(allColumns, defaultColWidth) {\n    if (defaultColWidth === void 0) { defaultColWidth = 300; }\n    var contentWidth = 0;\n    for (var _i = 0, allColumns_1 = allColumns; _i < allColumns_1.length; _i++) {\n        var column = allColumns_1[_i];\n        contentWidth += (column.width || defaultColWidth);\n    }\n    return contentWidth;\n}\n//# sourceMappingURL=math.js.map",null]}