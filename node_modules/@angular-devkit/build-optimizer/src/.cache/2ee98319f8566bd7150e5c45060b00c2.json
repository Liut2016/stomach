{"remainingRequest":"/home/liutao/Project/0/oncology/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/home/liutao/Project/0/oncology/node_modules/ngx-store/src/utility/storage/cookies-storage.js","dependencies":[{"path":"/home/liutao/Project/0/oncology/node_modules/ngx-store/src/utility/storage/cookies-storage.js","mtime":1526508791000},{"path":"/home/liutao/Project/0/oncology/node_modules/cache-loader/dist/cjs.js","mtime":1539266424898},{"path":"/home/liutao/Project/0/oncology/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1526531406000}],"contextDependencies":[],"result":["import { __extends } from \"tslib\";\nimport { Config, debug } from '../../config/index';\nimport { NgxStorage } from './storage';\nimport { WebStorageUtility } from '../webstorage.utility';\nimport { interval } from 'rxjs';\nvar CookiesStorage = /*@__PURE__*/ (function (_super) {\n    __extends(CookiesStorage, _super);\n    function CookiesStorage() {\n        var _this = _super.call(this) || this;\n        _this.getAllItems();\n        if (Config.cookiesCheckInterval) {\n            interval(Config.cookiesCheckInterval)\n                .subscribe(function () {\n                if (!_this.externalChanges.observers.length) {\n                    return; // don't run if there are no set subscriptions\n                }\n                _this.getAllItems();\n            });\n        }\n        return _this;\n    }\n    Object.defineProperty(CookiesStorage.prototype, \"type\", {\n        get: function () {\n            return 'cookiesStorage';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CookiesStorage.prototype, \"length\", {\n        get: function () {\n            return this.getAllKeys().length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    CookiesStorage.prototype.key = function (index) {\n        return this.getAllKeys()[index];\n    };\n    CookiesStorage.prototype.getItem = function (key) {\n        return this.getAllItems().get(key);\n    };\n    CookiesStorage.prototype.removeItem = function (key) {\n        if (typeof document === 'undefined')\n            return;\n        var domain = this.resolveDomain(Config.cookiesScope);\n        domain = (domain) ? 'domain=' + domain + ';' : '';\n        document.cookie = key + '=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/;' + domain;\n        this.cachedItemsMap.delete(key);\n    };\n    /**\n     * @param key\n     * @param value\n     * @param expirationDate passing null affects in lifetime cookie\n     */\n    /**\n         * @param key\n         * @param value\n         * @param expirationDate passing null affects in lifetime cookie\n         */\n    CookiesStorage.prototype.setItem = /**\n         * @param key\n         * @param value\n         * @param expirationDate passing null affects in lifetime cookie\n         */\n        function (key, value, expirationDate) {\n            if (typeof document === 'undefined')\n                return;\n            var domain = this.resolveDomain(Config.cookiesScope);\n            debug.log('Cookies domain:', domain);\n            domain = (domain) ? 'domain=' + domain + ';' : '';\n            var utcDate = '';\n            if (expirationDate instanceof Date) {\n                utcDate = expirationDate.toUTCString();\n            }\n            else if (expirationDate === null) {\n                utcDate = 'Fri, 18 Dec 2099 12:00:00 GMT';\n            }\n            var expires = utcDate ? '; expires=' + utcDate : '';\n            var cookie = key + '=' + value + expires + ';path=/;' + domain;\n            debug.log('Cookie`s set instruction:', cookie);\n            this.cachedItemsMap.set(key, value);\n            document.cookie = cookie;\n        };\n    CookiesStorage.prototype.clear = function () {\n        var _this = this;\n        this.getAllKeys().forEach(function (key) { return _this.removeItem(key); });\n    };\n    CookiesStorage.prototype.forEach = function (callbackFn) {\n        return this.getAllItems().forEach(function (value, key) { return callbackFn(value, key); });\n    };\n    CookiesStorage.prototype.getAllKeys = function () {\n        return Array.from(this.getAllItems().keys());\n    };\n    // TODO: consider getting cookies from all paths\n    // TODO: consider getting cookies from all paths\n    CookiesStorage.prototype.getAllItems =\n        // TODO: consider getting cookies from all paths\n        function () {\n            var _this = this;\n            if (this.cachedCookieString === document.cookie) {\n                // No changes\n                return this.cachedItemsMap;\n            }\n            var map = new Map();\n            if (typeof document === 'undefined')\n                return map;\n            var cookies = document.cookie.split(';');\n            for (var i = 0; i < cookies.length; i++) {\n                var cookie = cookies[i].trim();\n                var eqPos = cookie.indexOf('=');\n                var key = eqPos > -1 ? cookie.substr(0, eqPos) : cookie;\n                var value = eqPos > -1 ? cookie.substr(eqPos + 1, cookie.length) : cookie;\n                map.set(key, value);\n            }\n            // detect changes and emit events\n            if (this.cachedItemsMap) {\n                map.forEach(function (value, key) {\n                    var cachedValue = _this.cachedItemsMap.get(key);\n                    cachedValue = (cachedValue !== undefined) ? cachedValue : null;\n                    if (value !== cachedValue) {\n                        _this.emitEvent(key, WebStorageUtility.getGettable(value), WebStorageUtility.getGettable(cachedValue));\n                    }\n                });\n                this.cachedItemsMap.forEach(function (value, key) {\n                    if (!map.has(key)) {\n                        _this.emitEvent(key, null, WebStorageUtility.getGettable(value));\n                    }\n                });\n            }\n            this.cachedCookieString = document.cookie;\n            return this.cachedItemsMap = map;\n        };\n    /**\n     * domain.com         + path=\".\"          = .domain.com\n     * domain.com         + path=\".sub.\"      = .sub.domain.com\n     * sub.domain.com     + path=\"sub.\"       = sub.domain.com\n     * www.sub.domain.com + path=\".\"          = .sub.domain.com\n     * localhost          + path=\".whatever.\" = localhost\n     * @param path\n     */\n    /**\n         * domain.com         + path=\".\"          = .domain.com\n         * domain.com         + path=\".sub.\"      = .sub.domain.com\n         * sub.domain.com     + path=\"sub.\"       = sub.domain.com\n         * www.sub.domain.com + path=\".\"          = .sub.domain.com\n         * localhost          + path=\".whatever.\" = localhost\n         * @param path\n         */\n    CookiesStorage.prototype.resolveDomain = /**\n         * domain.com         + path=\".\"          = .domain.com\n         * domain.com         + path=\".sub.\"      = .sub.domain.com\n         * sub.domain.com     + path=\"sub.\"       = sub.domain.com\n         * www.sub.domain.com + path=\".\"          = .sub.domain.com\n         * localhost          + path=\".whatever.\" = localhost\n         * @param path\n         */\n        function (path) {\n            if (!path)\n                return '';\n            var hostname = document.domain;\n            if ((hostname.match(/\\./g) || []).length < 1) {\n                return '';\n            }\n            var www = (path[0] !== '.' && hostname.indexOf('www.') === 0) ? 'www.' : '';\n            return www + path + this.getDomain();\n        };\n    /**\n     * This function determines base domain by setting cookie at the highest level possible\n     * @url http://rossscrivener.co.uk/blog/javascript-get-domain-exclude-subdomain\n     */\n    /**\n         * This function determines base domain by setting cookie at the highest level possible\n         * @url http://rossscrivener.co.uk/blog/javascript-get-domain-exclude-subdomain\n         */\n    CookiesStorage.prototype.getDomain = /**\n         * This function determines base domain by setting cookie at the highest level possible\n         * @url http://rossscrivener.co.uk/blog/javascript-get-domain-exclude-subdomain\n         */\n        function () {\n            var i = 0;\n            var domain = document.domain;\n            var domainParts = domain.split('.');\n            var s = '_gd' + (new Date()).getTime();\n            while (i < (domainParts.length - 1) && document.cookie.indexOf(s + '=' + s) === -1) {\n                domain = domainParts.slice(-1 - (++i)).join('.');\n                document.cookie = s + '=' + s + ';domain=' + domain + ';';\n            }\n            document.cookie = s + '=;expires=Thu, 01 Jan 1970 00:00:00 GMT;domain=' + domain + ';';\n            return domain;\n        };\n    return CookiesStorage;\n}(NgxStorage));\nexport { CookiesStorage };\nexport var cookiesStorage = new CookiesStorage();\n//# sourceMappingURL=cookies-storage.js.map\n",null]}