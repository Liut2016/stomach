{"remainingRequest":"/home/liutao/Project/0/oncology/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/home/liutao/Project/0/oncology/node_modules/@swimlane/ngx-datatable/release/utils/column-prop-getters.js","dependencies":[{"path":"/home/liutao/Project/0/oncology/node_modules/@swimlane/ngx-datatable/release/utils/column-prop-getters.js","mtime":1511963642000},{"path":"/home/liutao/Project/0/oncology/node_modules/cache-loader/dist/cjs.js","mtime":1539266424898},{"path":"/home/liutao/Project/0/oncology/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1526531406000}],"contextDependencies":[],"result":["\"use strict\";\n// maybe rename this file to prop-getters.ts\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Always returns the empty string ''\n * @returns {string}\n */\nfunction emptyStringGetter() {\n    return '';\n}\nexports.emptyStringGetter = emptyStringGetter;\n/**\n * Returns the appropriate getter function for this kind of prop.\n * If prop == null, returns the emptyStringGetter.\n */\nfunction getterForProp(prop) {\n    if (prop == null)\n        return emptyStringGetter;\n    if (typeof prop === 'number') {\n        return numericIndexGetter;\n    }\n    else {\n        // deep or simple\n        if (prop.indexOf('.') !== -1) {\n            return deepValueGetter;\n        }\n        else {\n            return shallowValueGetter;\n        }\n    }\n}\nexports.getterForProp = getterForProp;\n/**\n * Returns the value at this numeric index.\n * @param row array of values\n * @param index numeric index\n * @returns {any} or '' if invalid index\n */\nfunction numericIndexGetter(row, index) {\n    if (row == null)\n        return '';\n    // mimic behavior of deepValueGetter\n    if (!row || index == null)\n        return row;\n    var value = row[index];\n    if (value == null)\n        return '';\n    return value;\n}\nexports.numericIndexGetter = numericIndexGetter;\n/**\n * Returns the value of a field.\n * (more efficient than deepValueGetter)\n * @param obj object containing the field\n * @param fieldName field name string\n * @returns {any}\n */\nfunction shallowValueGetter(obj, fieldName) {\n    if (obj == null)\n        return '';\n    if (!obj || !fieldName)\n        return obj;\n    var value = obj[fieldName];\n    if (value == null)\n        return '';\n    return value;\n}\nexports.shallowValueGetter = shallowValueGetter;\n/**\n * Returns a deep object given a string. zoo['animal.type']\n * @param {object} obj\n * @param {string} path\n */\nfunction deepValueGetter(obj, path) {\n    if (obj == null)\n        return '';\n    if (!obj || !path)\n        return obj;\n    // check if path matches a root-level field\n    // { \"a.b.c\": 123 }\n    var current = obj[path];\n    if (current !== undefined)\n        return current;\n    current = obj;\n    var split = path.split('.');\n    if (split.length) {\n        for (var i = 0; i < split.length; i++) {\n            current = current[split[i]];\n            // if found undefined, return empty string\n            if (current === undefined || current === null)\n                return '';\n        }\n    }\n    return current;\n}\nexports.deepValueGetter = deepValueGetter;\n//# sourceMappingURL=column-prop-getters.js.map",null]}